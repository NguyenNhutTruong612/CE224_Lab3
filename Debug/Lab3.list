
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a158  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b28  0800a304  0800a304  0001a304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be2c  0800be2c  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800be2c  0800be2c  0001be2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be34  0800be34  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be34  0800be34  0001be34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be38  0800be38  0001be38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800be3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020144  2**0
                  CONTENTS
 10 .bss          00001e80  20000144  20000144  00020144  2**2
                  ALLOC
 11 ._user_heap_stack 00002404  20001fc4  20001fc4  00020144  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019999  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004118  00000000  00000000  00039b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  0003dc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001408  00000000  00000000  0003f218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028919  00000000  00000000  00040620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ae7b  00000000  00000000  00068f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e166e  00000000  00000000  00083db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00165422  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a54  00000000  00000000  00165474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000144 	.word	0x20000144
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800a2ec 	.word	0x0800a2ec

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000148 	.word	0x20000148
 80001e8:	0800a2ec 	.word	0x0800a2ec

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f001 fb18 	bl	8001b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f82a 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f892 	bl	8000624 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000500:	f009 f9d2 	bl	80098a8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 8000504:	f000 fcae 	bl	8000e64 <BSP_LCD_Init>
  //set the layer buffer address into SDRAM
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000508:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800050c:	2001      	movs	r0, #1
 800050e:	f000 fd2b 	bl	8000f68 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8000512:	2001      	movs	r0, #1
 8000514:	f000 fd8c 	bl	8001030 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000518:	f000 ff3e 	bl	8001398 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 800051c:	4809      	ldr	r0, [pc, #36]	; (8000544 <main+0x54>)
 800051e:	f000 fdf9 	bl	8001114 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000522:	4808      	ldr	r0, [pc, #32]	; (8000544 <main+0x54>)
 8000524:	f000 fdac 	bl	8001080 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000528:	f04f 30ff 	mov.w	r0, #4294967295
 800052c:	f000 fd90 	bl	8001050 <BSP_LCD_SetTextColor>
  //write text
  BSP_LCD_DisplayStringAtLine(2,"Cube STM32");
 8000530:	4905      	ldr	r1, [pc, #20]	; (8000548 <main+0x58>)
 8000532:	2002      	movs	r0, #2
 8000534:	f000 ff18 	bl	8001368 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(3,"BSP");
 8000538:	4904      	ldr	r1, [pc, #16]	; (800054c <main+0x5c>)
 800053a:	2003      	movs	r0, #3
 800053c:	f000 ff14 	bl	8001368 <BSP_LCD_DisplayStringAtLine>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x50>
 8000542:	bf00      	nop
 8000544:	ff0000ff 	.word	0xff0000ff
 8000548:	0800a304 	.word	0x0800a304
 800054c:	0800a310 	.word	0x0800a310

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f009 febc 	bl	800a2dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b28      	ldr	r3, [pc, #160]	; (800061c <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a27      	ldr	r2, [pc, #156]	; (800061c <SystemClock_Config+0xcc>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <SystemClock_Config+0xd0>)
 800059a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ac:	2301      	movs	r3, #1
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c0:	2308      	movs	r3, #8
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ce:	2307      	movs	r3, #7
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 ffbe 	bl	8004558 <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005e2:	f000 f847 	bl	8000674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2302      	movs	r3, #2
 80005ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80005f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2105      	movs	r1, #5
 8000604:	4618      	mov	r0, r3
 8000606:	f004 fa1f 	bl	8004a48 <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000610:	f000 f830 	bl	8000674 <Error_Handler>
  }
}
 8000614:	bf00      	nop
 8000616:	3750      	adds	r7, #80	; 0x50
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_GPIO_Init+0x4c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <MX_GPIO_Init+0x4c>)
 8000634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <MX_GPIO_Init+0x4c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_GPIO_Init+0x4c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a08      	ldr	r2, [pc, #32]	; (8000670 <MX_GPIO_Init+0x4c>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_GPIO_Init+0x4c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	e7fe      	b.n	800067c <Error_Handler+0x8>
	...

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <HAL_MspInit+0x4c>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <HAL_MspInit+0x4c>)
 8000690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000694:	6453      	str	r3, [r2, #68]	; 0x44
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <HAL_MspInit+0x4c>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <HAL_MspInit+0x4c>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <HAL_MspInit+0x4c>)
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b0:	6413      	str	r3, [r2, #64]	; 0x40
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_MspInit+0x4c>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <NMI_Handler+0x4>

080006d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler+0x4>

080006e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <UsageFault_Handler+0x4>

080006ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071c:	f001 fa56 	bl	8001bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <OTG_HS_IRQHandler+0x10>)
 800072a:	f002 fde8 	bl	80032fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20001898 	.word	0x20001898

08000738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <SystemInit+0x20>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <SystemInit+0x20>)
 8000744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800075c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000794 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000762:	490e      	ldr	r1, [pc, #56]	; (800079c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000764:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000768:	e002      	b.n	8000770 <LoopCopyDataInit>

0800076a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800076c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076e:	3304      	adds	r3, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000774:	d3f9      	bcc.n	800076a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000776:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000778:	4c0b      	ldr	r4, [pc, #44]	; (80007a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800077c:	e001      	b.n	8000782 <LoopFillZerobss>

0800077e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000780:	3204      	adds	r2, #4

08000782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000784:	d3fb      	bcc.n	800077e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000786:	f7ff ffd7 	bl	8000738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800078a:	f009 fd83 	bl	800a294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800078e:	f7ff feaf 	bl	80004f0 <main>
  bx  lr    
 8000792:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000794:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 80007a0:	0800be3c 	.word	0x0800be3c
  ldr r2, =_sbss
 80007a4:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 80007a8:	20001fc4 	.word	0x20001fc4

080007ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC_IRQHandler>

080007ae <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80007b2:	f000 fa5d 	bl	8000c70 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80007b6:	20ca      	movs	r0, #202	; 0xca
 80007b8:	f000 f95d 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80007bc:	20c3      	movs	r0, #195	; 0xc3
 80007be:	f000 f967 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80007c2:	2008      	movs	r0, #8
 80007c4:	f000 f964 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80007c8:	2050      	movs	r0, #80	; 0x50
 80007ca:	f000 f961 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80007ce:	20cf      	movs	r0, #207	; 0xcf
 80007d0:	f000 f951 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 f95b 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80007da:	20c1      	movs	r0, #193	; 0xc1
 80007dc:	f000 f958 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80007e0:	2030      	movs	r0, #48	; 0x30
 80007e2:	f000 f955 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80007e6:	20ed      	movs	r0, #237	; 0xed
 80007e8:	f000 f945 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80007ec:	2064      	movs	r0, #100	; 0x64
 80007ee:	f000 f94f 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80007f2:	2003      	movs	r0, #3
 80007f4:	f000 f94c 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80007f8:	2012      	movs	r0, #18
 80007fa:	f000 f949 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80007fe:	2081      	movs	r0, #129	; 0x81
 8000800:	f000 f946 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000804:	20e8      	movs	r0, #232	; 0xe8
 8000806:	f000 f936 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800080a:	2085      	movs	r0, #133	; 0x85
 800080c:	f000 f940 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000810:	2000      	movs	r0, #0
 8000812:	f000 f93d 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000816:	2078      	movs	r0, #120	; 0x78
 8000818:	f000 f93a 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800081c:	20cb      	movs	r0, #203	; 0xcb
 800081e:	f000 f92a 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000822:	2039      	movs	r0, #57	; 0x39
 8000824:	f000 f934 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000828:	202c      	movs	r0, #44	; 0x2c
 800082a:	f000 f931 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800082e:	2000      	movs	r0, #0
 8000830:	f000 f92e 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000834:	2034      	movs	r0, #52	; 0x34
 8000836:	f000 f92b 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800083a:	2002      	movs	r0, #2
 800083c:	f000 f928 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000840:	20f7      	movs	r0, #247	; 0xf7
 8000842:	f000 f918 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000846:	2020      	movs	r0, #32
 8000848:	f000 f922 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800084c:	20ea      	movs	r0, #234	; 0xea
 800084e:	f000 f912 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000852:	2000      	movs	r0, #0
 8000854:	f000 f91c 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000858:	2000      	movs	r0, #0
 800085a:	f000 f919 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800085e:	20b1      	movs	r0, #177	; 0xb1
 8000860:	f000 f909 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000864:	2000      	movs	r0, #0
 8000866:	f000 f913 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800086a:	201b      	movs	r0, #27
 800086c:	f000 f910 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000870:	20b6      	movs	r0, #182	; 0xb6
 8000872:	f000 f900 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000876:	200a      	movs	r0, #10
 8000878:	f000 f90a 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800087c:	20a2      	movs	r0, #162	; 0xa2
 800087e:	f000 f907 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000882:	20c0      	movs	r0, #192	; 0xc0
 8000884:	f000 f8f7 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000888:	2010      	movs	r0, #16
 800088a:	f000 f901 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800088e:	20c1      	movs	r0, #193	; 0xc1
 8000890:	f000 f8f1 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000894:	2010      	movs	r0, #16
 8000896:	f000 f8fb 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800089a:	20c5      	movs	r0, #197	; 0xc5
 800089c:	f000 f8eb 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80008a0:	2045      	movs	r0, #69	; 0x45
 80008a2:	f000 f8f5 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80008a6:	2015      	movs	r0, #21
 80008a8:	f000 f8f2 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80008ac:	20c7      	movs	r0, #199	; 0xc7
 80008ae:	f000 f8e2 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80008b2:	2090      	movs	r0, #144	; 0x90
 80008b4:	f000 f8ec 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80008b8:	2036      	movs	r0, #54	; 0x36
 80008ba:	f000 f8dc 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80008be:	20c8      	movs	r0, #200	; 0xc8
 80008c0:	f000 f8e6 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80008c4:	20f2      	movs	r0, #242	; 0xf2
 80008c6:	f000 f8d6 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 f8e0 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80008d0:	20b0      	movs	r0, #176	; 0xb0
 80008d2:	f000 f8d0 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80008d6:	20c2      	movs	r0, #194	; 0xc2
 80008d8:	f000 f8da 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80008dc:	20b6      	movs	r0, #182	; 0xb6
 80008de:	f000 f8ca 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80008e2:	200a      	movs	r0, #10
 80008e4:	f000 f8d4 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80008e8:	20a7      	movs	r0, #167	; 0xa7
 80008ea:	f000 f8d1 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80008ee:	2027      	movs	r0, #39	; 0x27
 80008f0:	f000 f8ce 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80008f4:	2004      	movs	r0, #4
 80008f6:	f000 f8cb 	bl	8000a90 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80008fa:	202a      	movs	r0, #42	; 0x2a
 80008fc:	f000 f8bb 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000900:	2000      	movs	r0, #0
 8000902:	f000 f8c5 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000906:	2000      	movs	r0, #0
 8000908:	f000 f8c2 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800090c:	2000      	movs	r0, #0
 800090e:	f000 f8bf 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000912:	20ef      	movs	r0, #239	; 0xef
 8000914:	f000 f8bc 	bl	8000a90 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000918:	202b      	movs	r0, #43	; 0x2b
 800091a:	f000 f8ac 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800091e:	2000      	movs	r0, #0
 8000920:	f000 f8b6 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000924:	2000      	movs	r0, #0
 8000926:	f000 f8b3 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800092a:	2001      	movs	r0, #1
 800092c:	f000 f8b0 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000930:	203f      	movs	r0, #63	; 0x3f
 8000932:	f000 f8ad 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000936:	20f6      	movs	r0, #246	; 0xf6
 8000938:	f000 f89d 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800093c:	2001      	movs	r0, #1
 800093e:	f000 f8a7 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000942:	2000      	movs	r0, #0
 8000944:	f000 f8a4 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000948:	2006      	movs	r0, #6
 800094a:	f000 f8a1 	bl	8000a90 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800094e:	202c      	movs	r0, #44	; 0x2c
 8000950:	f000 f891 	bl	8000a76 <ili9341_WriteReg>
  LCD_Delay(200);
 8000954:	20c8      	movs	r0, #200	; 0xc8
 8000956:	f000 fa79 	bl	8000e4c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800095a:	2026      	movs	r0, #38	; 0x26
 800095c:	f000 f88b 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000960:	2001      	movs	r0, #1
 8000962:	f000 f895 	bl	8000a90 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000966:	20e0      	movs	r0, #224	; 0xe0
 8000968:	f000 f885 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800096c:	200f      	movs	r0, #15
 800096e:	f000 f88f 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000972:	2029      	movs	r0, #41	; 0x29
 8000974:	f000 f88c 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000978:	2024      	movs	r0, #36	; 0x24
 800097a:	f000 f889 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800097e:	200c      	movs	r0, #12
 8000980:	f000 f886 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000984:	200e      	movs	r0, #14
 8000986:	f000 f883 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800098a:	2009      	movs	r0, #9
 800098c:	f000 f880 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000990:	204e      	movs	r0, #78	; 0x4e
 8000992:	f000 f87d 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000996:	2078      	movs	r0, #120	; 0x78
 8000998:	f000 f87a 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 800099c:	203c      	movs	r0, #60	; 0x3c
 800099e:	f000 f877 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80009a2:	2009      	movs	r0, #9
 80009a4:	f000 f874 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80009a8:	2013      	movs	r0, #19
 80009aa:	f000 f871 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80009ae:	2005      	movs	r0, #5
 80009b0:	f000 f86e 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80009b4:	2017      	movs	r0, #23
 80009b6:	f000 f86b 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80009ba:	2011      	movs	r0, #17
 80009bc:	f000 f868 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80009c0:	2000      	movs	r0, #0
 80009c2:	f000 f865 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80009c6:	20e1      	movs	r0, #225	; 0xe1
 80009c8:	f000 f855 	bl	8000a76 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80009cc:	2000      	movs	r0, #0
 80009ce:	f000 f85f 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80009d2:	2016      	movs	r0, #22
 80009d4:	f000 f85c 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80009d8:	201b      	movs	r0, #27
 80009da:	f000 f859 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80009de:	2004      	movs	r0, #4
 80009e0:	f000 f856 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80009e4:	2011      	movs	r0, #17
 80009e6:	f000 f853 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80009ea:	2007      	movs	r0, #7
 80009ec:	f000 f850 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80009f0:	2031      	movs	r0, #49	; 0x31
 80009f2:	f000 f84d 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80009f6:	2033      	movs	r0, #51	; 0x33
 80009f8:	f000 f84a 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80009fc:	2042      	movs	r0, #66	; 0x42
 80009fe:	f000 f847 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000a02:	2005      	movs	r0, #5
 8000a04:	f000 f844 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000a08:	200c      	movs	r0, #12
 8000a0a:	f000 f841 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000a0e:	200a      	movs	r0, #10
 8000a10:	f000 f83e 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000a14:	2028      	movs	r0, #40	; 0x28
 8000a16:	f000 f83b 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000a1a:	202f      	movs	r0, #47	; 0x2f
 8000a1c:	f000 f838 	bl	8000a90 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000a20:	200f      	movs	r0, #15
 8000a22:	f000 f835 	bl	8000a90 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000a26:	2011      	movs	r0, #17
 8000a28:	f000 f825 	bl	8000a76 <ili9341_WriteReg>
  LCD_Delay(200);
 8000a2c:	20c8      	movs	r0, #200	; 0xc8
 8000a2e:	f000 fa0d 	bl	8000e4c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000a32:	2029      	movs	r0, #41	; 0x29
 8000a34:	f000 f81f 	bl	8000a76 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000a38:	202c      	movs	r0, #44	; 0x2c
 8000a3a:	f000 f81c 	bl	8000a76 <ili9341_WriteReg>
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000a46:	f000 f913 	bl	8000c70 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000a4a:	2103      	movs	r1, #3
 8000a4c:	20d3      	movs	r0, #211	; 0xd3
 8000a4e:	f000 f82c 	bl	8000aaa <ili9341_ReadData>
 8000a52:	4603      	mov	r3, r0
 8000a54:	b29b      	uxth	r3, r3
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000a5e:	2029      	movs	r0, #41	; 0x29
 8000a60:	f000 f809 	bl	8000a76 <ili9341_WriteReg>
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8000a6c:	2028      	movs	r0, #40	; 0x28
 8000a6e:	f000 f802 	bl	8000a76 <ili9341_WriteReg>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f98e 	bl	8000da4 <LCD_IO_WriteReg>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f95f 	bl	8000d60 <LCD_IO_WriteData>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	460a      	mov	r2, r1
 8000ab4:	80fb      	strh	r3, [r7, #6]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000aba:	797a      	ldrb	r2, [r7, #5]
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 f991 	bl	8000de8 <LCD_IO_ReadData>
 8000ac6:	4603      	mov	r3, r0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8000ad4:	23f0      	movs	r3, #240	; 0xf0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8000ae4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000af8:	4819      	ldr	r0, [pc, #100]	; (8000b60 <SPIx_Init+0x6c>)
 8000afa:	f005 f8ac 	bl	8005c56 <HAL_SPI_GetState>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d12b      	bne.n	8000b5c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <SPIx_Init+0x6c>)
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <SPIx_Init+0x70>)
 8000b08:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <SPIx_Init+0x6c>)
 8000b0c:	2218      	movs	r2, #24
 8000b0e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <SPIx_Init+0x6c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <SPIx_Init+0x6c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <SPIx_Init+0x6c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <SPIx_Init+0x6c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <SPIx_Init+0x6c>)
 8000b2a:	2207      	movs	r2, #7
 8000b2c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <SPIx_Init+0x6c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <SPIx_Init+0x6c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <SPIx_Init+0x6c>)
 8000b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b40:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <SPIx_Init+0x6c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <SPIx_Init+0x6c>)
 8000b4a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b4e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <SPIx_Init+0x6c>)
 8000b52:	f000 f853 	bl	8000bfc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000b56:	4802      	ldr	r0, [pc, #8]	; (8000b60 <SPIx_Init+0x6c>)
 8000b58:	f004 fbc9 	bl	80052ee <HAL_SPI_Init>
  } 
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000160 	.word	0x20000160
 8000b64:	40015000 	.word	0x40015000

08000b68 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <SPIx_Read+0x38>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f107 0108 	add.w	r1, r7, #8
 8000b82:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <SPIx_Read+0x3c>)
 8000b84:	f004 fdb4 	bl	80056f0 <HAL_SPI_Receive>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000b92:	f000 f827 	bl	8000be4 <SPIx_Error>
  }
  
  return readvalue;
 8000b96:	68bb      	ldr	r3, [r7, #8]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000003c 	.word	0x2000003c
 8000ba4:	20000160 	.word	0x20000160

08000ba8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <SPIx_Write+0x34>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	1db9      	adds	r1, r7, #6
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4808      	ldr	r0, [pc, #32]	; (8000be0 <SPIx_Write+0x38>)
 8000bc0:	f004 fc5a 	bl	8005478 <HAL_SPI_Transmit>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000bce:	f000 f809 	bl	8000be4 <SPIx_Error>
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000003c 	.word	0x2000003c
 8000be0:	20000160 	.word	0x20000160

08000be4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000be8:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <SPIx_Error+0x14>)
 8000bea:	f004 fc09 	bl	8005400 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8000bee:	f7ff ff81 	bl	8000af4 <SPIx_Init>
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000160 	.word	0x20000160

08000bfc <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <SPIx_MspInit+0x6c>)
 8000c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0c:	4a16      	ldr	r2, [pc, #88]	; (8000c68 <SPIx_MspInit+0x6c>)
 8000c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c12:	6453      	str	r3, [r2, #68]	; 0x44
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <SPIx_MspInit+0x6c>)
 8000c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <SPIx_MspInit+0x6c>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <SPIx_MspInit+0x6c>)
 8000c2a:	f043 0320 	orr.w	r3, r3, #32
 8000c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <SPIx_MspInit+0x6c>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	f003 0320 	and.w	r3, r3, #32
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000c3c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000c4e:	2305      	movs	r3, #5
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <SPIx_MspInit+0x70>)
 8000c5a:	f001 fd61 	bl	8002720 <HAL_GPIO_Init>
}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40021400 	.word	0x40021400

08000c70 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000c76:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <LCD_IO_Init+0xe0>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d164      	bne.n	8000d48 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8000c7e:	4b34      	ldr	r3, [pc, #208]	; (8000d50 <LCD_IO_Init+0xe0>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	4b32      	ldr	r3, [pc, #200]	; (8000d54 <LCD_IO_Init+0xe4>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a31      	ldr	r2, [pc, #196]	; (8000d54 <LCD_IO_Init+0xe4>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <LCD_IO_Init+0xe4>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4827      	ldr	r0, [pc, #156]	; (8000d58 <LCD_IO_Init+0xe8>)
 8000cba:	f001 fd31 	bl	8002720 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <LCD_IO_Init+0xe4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a23      	ldr	r2, [pc, #140]	; (8000d54 <LCD_IO_Init+0xe4>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <LCD_IO_Init+0xe4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4819      	ldr	r0, [pc, #100]	; (8000d58 <LCD_IO_Init+0xe8>)
 8000cf4:	f001 fd14 	bl	8002720 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <LCD_IO_Init+0xe4>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <LCD_IO_Init+0xe4>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <LCD_IO_Init+0xe4>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000d14:	2304      	movs	r3, #4
 8000d16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480c      	ldr	r0, [pc, #48]	; (8000d5c <LCD_IO_Init+0xec>)
 8000d2c:	f001 fcf8 	bl	8002720 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000d30:	2200      	movs	r2, #0
 8000d32:	2104      	movs	r1, #4
 8000d34:	4809      	ldr	r0, [pc, #36]	; (8000d5c <LCD_IO_Init+0xec>)
 8000d36:	f001 fe9f 	bl	8002a78 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2104      	movs	r1, #4
 8000d3e:	4807      	ldr	r0, [pc, #28]	; (8000d5c <LCD_IO_Init+0xec>)
 8000d40:	f001 fe9a 	bl	8002a78 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8000d44:	f7ff fed6 	bl	8000af4 <SPIx_Init>
  }
}
 8000d48:	bf00      	nop
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200001b8 	.word	0x200001b8
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020c00 	.word	0x40020c00
 8000d5c:	40020800 	.word	0x40020800

08000d60 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d70:	480a      	ldr	r0, [pc, #40]	; (8000d9c <LCD_IO_WriteData+0x3c>)
 8000d72:	f001 fe81 	bl	8002a78 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8000d76:	2200      	movs	r2, #0
 8000d78:	2104      	movs	r1, #4
 8000d7a:	4809      	ldr	r0, [pc, #36]	; (8000da0 <LCD_IO_WriteData+0x40>)
 8000d7c:	f001 fe7c 	bl	8002a78 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff10 	bl	8000ba8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2104      	movs	r1, #4
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <LCD_IO_WriteData+0x40>)
 8000d8e:	f001 fe73 	bl	8002a78 <HAL_GPIO_WritePin>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40020c00 	.word	0x40020c00
 8000da0:	40020800 	.word	0x40020800

08000da4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db4:	480a      	ldr	r0, [pc, #40]	; (8000de0 <LCD_IO_WriteReg+0x3c>)
 8000db6:	f001 fe5f 	bl	8002a78 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2104      	movs	r1, #4
 8000dbe:	4809      	ldr	r0, [pc, #36]	; (8000de4 <LCD_IO_WriteReg+0x40>)
 8000dc0:	f001 fe5a 	bl	8002a78 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff feed 	bl	8000ba8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	4804      	ldr	r0, [pc, #16]	; (8000de4 <LCD_IO_WriteReg+0x40>)
 8000dd4:	f001 fe50 	bl	8002a78 <HAL_GPIO_WritePin>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40020c00 	.word	0x40020c00
 8000de4:	40020800 	.word	0x40020800

08000de8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	80fb      	strh	r3, [r7, #6]
 8000df4:	4613      	mov	r3, r2
 8000df6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2104      	movs	r1, #4
 8000e00:	4810      	ldr	r0, [pc, #64]	; (8000e44 <LCD_IO_ReadData+0x5c>)
 8000e02:	f001 fe39 	bl	8002a78 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0c:	480e      	ldr	r0, [pc, #56]	; (8000e48 <LCD_IO_ReadData+0x60>)
 8000e0e:	f001 fe33 	bl	8002a78 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fec7 	bl	8000ba8 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fea3 	bl	8000b68 <SPIx_Read>
 8000e22:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2a:	4807      	ldr	r0, [pc, #28]	; (8000e48 <LCD_IO_ReadData+0x60>)
 8000e2c:	f001 fe24 	bl	8002a78 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000e30:	2201      	movs	r2, #1
 8000e32:	2104      	movs	r1, #4
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <LCD_IO_ReadData+0x5c>)
 8000e36:	f001 fe1f 	bl	8002a78 <HAL_GPIO_WritePin>
  
  return readvalue;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40020800 	.word	0x40020800
 8000e48:	40020c00 	.word	0x40020c00

08000e4c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 fed9 	bl	8001c0c <HAL_Delay>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8000e68:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000e6a:	4a2e      	ldr	r2, [pc, #184]	; (8000f24 <BSP_LCD_Init+0xc0>)
 8000e6c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8000e6e:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000e70:	2209      	movs	r2, #9
 8000e72:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8000e74:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8000e7a:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000e7c:	221d      	movs	r2, #29
 8000e7e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8000e80:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000e82:	2203      	movs	r2, #3
 8000e84:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000e88:	f240 120d 	movw	r2, #269	; 0x10d
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8000e8e:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000e90:	f240 1243 	movw	r2, #323	; 0x143
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000e98:	f240 1217 	movw	r2, #279	; 0x117
 8000e9c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8000e9e:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000ea0:	f240 1247 	movw	r2, #327	; 0x147
 8000ea4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <BSP_LCD_Init+0xc4>)
 8000ec0:	2208      	movs	r2, #8
 8000ec2:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <BSP_LCD_Init+0xc4>)
 8000ec6:	22c0      	movs	r2, #192	; 0xc0
 8000ec8:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <BSP_LCD_Init+0xc4>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <BSP_LCD_Init+0xc4>)
 8000ed2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <BSP_LCD_Init+0xc4>)
 8000eda:	f003 ffad 	bl	8004e38 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8000ef6:	f000 fa5f 	bl	80013b8 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8000efa:	4809      	ldr	r0, [pc, #36]	; (8000f20 <BSP_LCD_Init+0xbc>)
 8000efc:	f001 fdd6 	bl	8002aac <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <BSP_LCD_Init+0xc8>)
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <BSP_LCD_Init+0xcc>)
 8000f04:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <BSP_LCD_Init+0xc8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8000f0e:	f000 fc41 	bl	8001794 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000f12:	4808      	ldr	r0, [pc, #32]	; (8000f34 <BSP_LCD_Init+0xd0>)
 8000f14:	f000 f8ce 	bl	80010b4 <BSP_LCD_SetFont>

  return LCD_OK;
 8000f18:	2300      	movs	r3, #0
}  
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001bc 	.word	0x200001bc
 8000f24:	40016800 	.word	0x40016800
 8000f28:	200002a4 	.word	0x200002a4
 8000f2c:	200002f0 	.word	0x200002f0
 8000f30:	20000004 	.word	0x20000004
 8000f34:	20000040 	.word	0x20000040

08000f38 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <BSP_LCD_GetXSize+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f42:	4798      	blx	r3
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200002f0 	.word	0x200002f0

08000f50 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <BSP_LCD_GetYSize+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5a:	4798      	blx	r3
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200002f0 	.word	0x200002f0

08000f68 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b090      	sub	sp, #64	; 0x40
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000f78:	f7ff ffde 	bl	8000f38 <BSP_LCD_GetXSize>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000f84:	f7ff ffe4 	bl	8000f50 <BSP_LCD_GetYSize>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8000f94:	23ff      	movs	r3, #255	; 0xff
 8000f96:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000fb8:	f7ff ffbe 	bl	8000f38 <BSP_LCD_GetXSize>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000fc0:	f7ff ffc6 	bl	8000f50 <BSP_LCD_GetYSize>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8000fc8:	88fa      	ldrh	r2, [r7, #6]
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4814      	ldr	r0, [pc, #80]	; (8001024 <BSP_LCD_LayerDefaultInit+0xbc>)
 8000fd2:	f001 fe45 	bl	8002c60 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000fd6:	88fa      	ldrh	r2, [r7, #6]
 8000fd8:	4913      	ldr	r1, [pc, #76]	; (8001028 <BSP_LCD_LayerDefaultInit+0xc0>)
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8000fea:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000fec:	88fa      	ldrh	r2, [r7, #6]
 8000fee:	490e      	ldr	r1, [pc, #56]	; (8001028 <BSP_LCD_LayerDefaultInit+0xc0>)
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3308      	adds	r3, #8
 8000ffc:	4a0b      	ldr	r2, [pc, #44]	; (800102c <BSP_LCD_LayerDefaultInit+0xc4>)
 8000ffe:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001000:	88fa      	ldrh	r2, [r7, #6]
 8001002:	4909      	ldr	r1, [pc, #36]	; (8001028 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001012:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001016:	f001 fe61 	bl	8002cdc <HAL_LTDC_EnableDither>
}
 800101a:	bf00      	nop
 800101c:	3740      	adds	r7, #64	; 0x40
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200001bc 	.word	0x200001bc
 8001028:	200002d8 	.word	0x200002d8
 800102c:	20000040 	.word	0x20000040

08001030 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <BSP_LCD_SelectLayer+0x1c>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200002d4 	.word	0x200002d4

08001050 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <BSP_LCD_SetTextColor+0x28>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4907      	ldr	r1, [pc, #28]	; (800107c <BSP_LCD_SetTextColor+0x2c>)
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	200002d4 	.word	0x200002d4
 800107c:	200002d8 	.word	0x200002d8

08001080 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <BSP_LCD_SetBackColor+0x2c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4908      	ldr	r1, [pc, #32]	; (80010b0 <BSP_LCD_SetBackColor+0x30>)
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	3304      	adds	r3, #4
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	601a      	str	r2, [r3, #0]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200002d4 	.word	0x200002d4
 80010b0:	200002d8 	.word	0x200002d8

080010b4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <BSP_LCD_SetFont+0x2c>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4908      	ldr	r1, [pc, #32]	; (80010e4 <BSP_LCD_SetFont+0x30>)
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	440b      	add	r3, r1
 80010cc:	3308      	adds	r3, #8
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	601a      	str	r2, [r3, #0]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	200002d4 	.word	0x200002d4
 80010e4:	200002d8 	.word	0x200002d8

080010e8 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <BSP_LCD_GetFont+0x24>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4907      	ldr	r1, [pc, #28]	; (8001110 <BSP_LCD_GetFont+0x28>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	3308      	adds	r3, #8
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200002d4 	.word	0x200002d4
 8001110:	200002d8 	.word	0x200002d8

08001114 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001116:	b085      	sub	sp, #20
 8001118:	af02      	add	r7, sp, #8
 800111a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <BSP_LCD_Clear+0x48>)
 800111e:	681c      	ldr	r4, [r3, #0]
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <BSP_LCD_Clear+0x48>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <BSP_LCD_Clear+0x4c>)
 8001126:	2134      	movs	r1, #52	; 0x34
 8001128:	fb01 f303 	mul.w	r3, r1, r3
 800112c:	4413      	add	r3, r2
 800112e:	335c      	adds	r3, #92	; 0x5c
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	461e      	mov	r6, r3
 8001134:	f7ff ff00 	bl	8000f38 <BSP_LCD_GetXSize>
 8001138:	4605      	mov	r5, r0
 800113a:	f7ff ff09 	bl	8000f50 <BSP_LCD_GetYSize>
 800113e:	4602      	mov	r2, r0
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	2300      	movs	r3, #0
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	4613      	mov	r3, r2
 800114a:	462a      	mov	r2, r5
 800114c:	4631      	mov	r1, r6
 800114e:	4620      	mov	r0, r4
 8001150:	f000 fae8 	bl	8001724 <FillBuffer>
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800115c:	200002d4 	.word	0x200002d4
 8001160:	200001bc 	.word	0x200001bc

08001164 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
 800116e:	460b      	mov	r3, r1
 8001170:	80bb      	strh	r3, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <BSP_LCD_DisplayChar+0x80>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	491b      	ldr	r1, [pc, #108]	; (80011e8 <BSP_LCD_DisplayChar+0x84>)
 800117c:	4613      	mov	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	3308      	adds	r3, #8
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6819      	ldr	r1, [r3, #0]
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <BSP_LCD_DisplayChar+0x80>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4c14      	ldr	r4, [pc, #80]	; (80011e8 <BSP_LCD_DisplayChar+0x84>)
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4423      	add	r3, r4
 80011a2:	3308      	adds	r3, #8
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80011a8:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <BSP_LCD_DisplayChar+0x80>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4c0d      	ldr	r4, [pc, #52]	; (80011e8 <BSP_LCD_DisplayChar+0x84>)
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4423      	add	r3, r4
 80011bc:	3308      	adds	r3, #8
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	889b      	ldrh	r3, [r3, #4]
 80011c2:	3307      	adds	r3, #7
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	da00      	bge.n	80011ca <BSP_LCD_DisplayChar+0x66>
 80011c8:	3307      	adds	r3, #7
 80011ca:	10db      	asrs	r3, r3, #3
 80011cc:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80011d0:	18ca      	adds	r2, r1, r3
 80011d2:	88b9      	ldrh	r1, [r7, #4]
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f9ea 	bl	80015b0 <DrawChar>
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	200002d4 	.word	0x200002d4
 80011e8:	200002d8 	.word	0x200002d8

080011ec <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80011ec:	b5b0      	push	{r4, r5, r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60ba      	str	r2, [r7, #8]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4603      	mov	r3, r0
 80011f8:	81fb      	strh	r3, [r7, #14]
 80011fa:	460b      	mov	r3, r1
 80011fc:	81bb      	strh	r3, [r7, #12]
 80011fe:	4613      	mov	r3, r2
 8001200:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001202:	2301      	movs	r3, #1
 8001204:	83fb      	strh	r3, [r7, #30]
 8001206:	2300      	movs	r3, #0
 8001208:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001216:	e002      	b.n	800121e <BSP_LCD_DisplayStringAt+0x32>
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	3301      	adds	r3, #1
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	617a      	str	r2, [r7, #20]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f6      	bne.n	8001218 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800122a:	f7ff fe85 	bl	8000f38 <BSP_LCD_GetXSize>
 800122e:	4601      	mov	r1, r0
 8001230:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <BSP_LCD_DisplayStringAt+0x174>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	484b      	ldr	r0, [pc, #300]	; (8001364 <BSP_LCD_DisplayStringAt+0x178>)
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4403      	add	r3, r0
 8001240:	3308      	adds	r3, #8
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	889b      	ldrh	r3, [r3, #4]
 8001246:	fbb1 f3f3 	udiv	r3, r1, r3
 800124a:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2b03      	cmp	r3, #3
 8001250:	d01c      	beq.n	800128c <BSP_LCD_DisplayStringAt+0xa0>
 8001252:	2b03      	cmp	r3, #3
 8001254:	dc33      	bgt.n	80012be <BSP_LCD_DisplayStringAt+0xd2>
 8001256:	2b01      	cmp	r3, #1
 8001258:	d002      	beq.n	8001260 <BSP_LCD_DisplayStringAt+0x74>
 800125a:	2b02      	cmp	r3, #2
 800125c:	d019      	beq.n	8001292 <BSP_LCD_DisplayStringAt+0xa6>
 800125e:	e02e      	b.n	80012be <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	1ad1      	subs	r1, r2, r3
 8001266:	4b3e      	ldr	r3, [pc, #248]	; (8001360 <BSP_LCD_DisplayStringAt+0x174>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	483e      	ldr	r0, [pc, #248]	; (8001364 <BSP_LCD_DisplayStringAt+0x178>)
 800126c:	4613      	mov	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4403      	add	r3, r0
 8001276:	3308      	adds	r3, #8
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	889b      	ldrh	r3, [r3, #4]
 800127c:	fb01 f303 	mul.w	r3, r1, r3
 8001280:	085b      	lsrs	r3, r3, #1
 8001282:	b29a      	uxth	r2, r3
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	4413      	add	r3, r2
 8001288:	83fb      	strh	r3, [r7, #30]
      break;
 800128a:	e01b      	b.n	80012c4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 800128c:	89fb      	ldrh	r3, [r7, #14]
 800128e:	83fb      	strh	r3, [r7, #30]
      break;
 8001290:	e018      	b.n	80012c4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	b299      	uxth	r1, r3
 800129a:	4b31      	ldr	r3, [pc, #196]	; (8001360 <BSP_LCD_DisplayStringAt+0x174>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4831      	ldr	r0, [pc, #196]	; (8001364 <BSP_LCD_DisplayStringAt+0x178>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4403      	add	r3, r0
 80012aa:	3308      	adds	r3, #8
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	889b      	ldrh	r3, [r3, #4]
 80012b0:	fb11 f303 	smulbb	r3, r1, r3
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	89fb      	ldrh	r3, [r7, #14]
 80012b8:	4413      	add	r3, r2
 80012ba:	83fb      	strh	r3, [r7, #30]
      break;
 80012bc:	e002      	b.n	80012c4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	83fb      	strh	r3, [r7, #30]
      break;
 80012c2:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80012c4:	e01a      	b.n	80012fc <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	89b9      	ldrh	r1, [r7, #12]
 80012cc:	8bfb      	ldrh	r3, [r7, #30]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff48 	bl	8001164 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80012d4:	4b22      	ldr	r3, [pc, #136]	; (8001360 <BSP_LCD_DisplayStringAt+0x174>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4922      	ldr	r1, [pc, #136]	; (8001364 <BSP_LCD_DisplayStringAt+0x178>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	3308      	adds	r3, #8
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	889a      	ldrh	r2, [r3, #4]
 80012ea:	8bfb      	ldrh	r3, [r7, #30]
 80012ec:	4413      	add	r3, r2
 80012ee:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	3301      	adds	r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
    i++;
 80012f6:	8bbb      	ldrh	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	bf14      	ite	ne
 8001304:	2301      	movne	r3, #1
 8001306:	2300      	moveq	r3, #0
 8001308:	b2dc      	uxtb	r4, r3
 800130a:	f7ff fe15 	bl	8000f38 <BSP_LCD_GetXSize>
 800130e:	8bb9      	ldrh	r1, [r7, #28]
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <BSP_LCD_DisplayStringAt+0x174>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4d13      	ldr	r5, [pc, #76]	; (8001364 <BSP_LCD_DisplayStringAt+0x178>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	442b      	add	r3, r5
 8001320:	3308      	adds	r3, #8
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	889b      	ldrh	r3, [r3, #4]
 8001326:	fb01 f303 	mul.w	r3, r1, r3
 800132a:	1ac3      	subs	r3, r0, r3
 800132c:	b299      	uxth	r1, r3
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <BSP_LCD_DisplayStringAt+0x174>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	480c      	ldr	r0, [pc, #48]	; (8001364 <BSP_LCD_DisplayStringAt+0x178>)
 8001334:	4613      	mov	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4403      	add	r3, r0
 800133e:	3308      	adds	r3, #8
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	889b      	ldrh	r3, [r3, #4]
 8001344:	4299      	cmp	r1, r3
 8001346:	bf2c      	ite	cs
 8001348:	2301      	movcs	r3, #1
 800134a:	2300      	movcc	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4023      	ands	r3, r4
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1b7      	bne.n	80012c6 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8001356:	bf00      	nop
 8001358:	bf00      	nop
 800135a:	3720      	adds	r7, #32
 800135c:	46bd      	mov	sp, r7
 800135e:	bdb0      	pop	{r4, r5, r7, pc}
 8001360:	200002d4 	.word	0x200002d4
 8001364:	200002d8 	.word	0x200002d8

08001368 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001374:	f7ff feb8 	bl	80010e8 <BSP_LCD_GetFont>
 8001378:	4603      	mov	r3, r0
 800137a:	88db      	ldrh	r3, [r3, #6]
 800137c:	88fa      	ldrh	r2, [r7, #6]
 800137e:	fb12 f303 	smulbb	r3, r2, r3
 8001382:	b299      	uxth	r1, r3
 8001384:	2303      	movs	r3, #3
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	2000      	movs	r0, #0
 800138a:	f7ff ff2f 	bl	80011ec <BSP_LCD_DisplayStringAt>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <BSP_LCD_DisplayOn+0x1c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80013a6:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <BSP_LCD_DisplayOn+0x1c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	4798      	blx	r3
  }
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200002f0 	.word	0x200002f0

080013b8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
 80013c2:	4b61      	ldr	r3, [pc, #388]	; (8001548 <BSP_LCD_MspInit+0x190>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a60      	ldr	r2, [pc, #384]	; (8001548 <BSP_LCD_MspInit+0x190>)
 80013c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b5e      	ldr	r3, [pc, #376]	; (8001548 <BSP_LCD_MspInit+0x190>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013d6:	623b      	str	r3, [r7, #32]
 80013d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	4b5a      	ldr	r3, [pc, #360]	; (8001548 <BSP_LCD_MspInit+0x190>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a59      	ldr	r2, [pc, #356]	; (8001548 <BSP_LCD_MspInit+0x190>)
 80013e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b57      	ldr	r3, [pc, #348]	; (8001548 <BSP_LCD_MspInit+0x190>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	4b53      	ldr	r3, [pc, #332]	; (8001548 <BSP_LCD_MspInit+0x190>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a52      	ldr	r2, [pc, #328]	; (8001548 <BSP_LCD_MspInit+0x190>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b50      	ldr	r3, [pc, #320]	; (8001548 <BSP_LCD_MspInit+0x190>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	61bb      	str	r3, [r7, #24]
 8001410:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	4b4c      	ldr	r3, [pc, #304]	; (8001548 <BSP_LCD_MspInit+0x190>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a4b      	ldr	r2, [pc, #300]	; (8001548 <BSP_LCD_MspInit+0x190>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b49      	ldr	r3, [pc, #292]	; (8001548 <BSP_LCD_MspInit+0x190>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b45      	ldr	r3, [pc, #276]	; (8001548 <BSP_LCD_MspInit+0x190>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a44      	ldr	r2, [pc, #272]	; (8001548 <BSP_LCD_MspInit+0x190>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b42      	ldr	r3, [pc, #264]	; (8001548 <BSP_LCD_MspInit+0x190>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <BSP_LCD_MspInit+0x190>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a3d      	ldr	r2, [pc, #244]	; (8001548 <BSP_LCD_MspInit+0x190>)
 8001454:	f043 0308 	orr.w	r3, r3, #8
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <BSP_LCD_MspInit+0x190>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <BSP_LCD_MspInit+0x190>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a36      	ldr	r2, [pc, #216]	; (8001548 <BSP_LCD_MspInit+0x190>)
 8001470:	f043 0320 	orr.w	r3, r3, #32
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <BSP_LCD_MspInit+0x190>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <BSP_LCD_MspInit+0x190>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <BSP_LCD_MspInit+0x190>)
 800148c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <BSP_LCD_MspInit+0x190>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800149e:	f641 0358 	movw	r3, #6232	; 0x1858
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80014ac:	2302      	movs	r3, #2
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80014b0:	230e      	movs	r3, #14
 80014b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	4824      	ldr	r0, [pc, #144]	; (800154c <BSP_LCD_MspInit+0x194>)
 80014bc:	f001 f930 	bl	8002720 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80014c0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80014c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ca:	4619      	mov	r1, r3
 80014cc:	4820      	ldr	r0, [pc, #128]	; (8001550 <BSP_LCD_MspInit+0x198>)
 80014ce:	f001 f927 	bl	8002720 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80014d2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80014d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014dc:	4619      	mov	r1, r3
 80014de:	481d      	ldr	r0, [pc, #116]	; (8001554 <BSP_LCD_MspInit+0x19c>)
 80014e0:	f001 f91e 	bl	8002720 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80014e4:	2348      	movs	r3, #72	; 0x48
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	481a      	ldr	r0, [pc, #104]	; (8001558 <BSP_LCD_MspInit+0x1a0>)
 80014f0:	f001 f916 	bl	8002720 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80014f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	4816      	ldr	r0, [pc, #88]	; (800155c <BSP_LCD_MspInit+0x1a4>)
 8001502:	f001 f90d 	bl	8002720 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001506:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800150c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001510:	4619      	mov	r1, r3
 8001512:	4813      	ldr	r0, [pc, #76]	; (8001560 <BSP_LCD_MspInit+0x1a8>)
 8001514:	f001 f904 	bl	8002720 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001518:	2303      	movs	r3, #3
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800151c:	2309      	movs	r3, #9
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001524:	4619      	mov	r1, r3
 8001526:	480a      	ldr	r0, [pc, #40]	; (8001550 <BSP_LCD_MspInit+0x198>)
 8001528:	f001 f8fa 	bl	8002720 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800152c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	4809      	ldr	r0, [pc, #36]	; (8001560 <BSP_LCD_MspInit+0x1a8>)
 800153a:	f001 f8f1 	bl	8002720 <HAL_GPIO_Init>
}
 800153e:	bf00      	nop
 8001540:	3738      	adds	r7, #56	; 0x38
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020400 	.word	0x40020400
 8001554:	40020800 	.word	0x40020800
 8001558:	40020c00 	.word	0x40020c00
 800155c:	40021400 	.word	0x40021400
 8001560:	40021800 	.word	0x40021800

08001564 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001564:	b5b0      	push	{r4, r5, r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	603a      	str	r2, [r7, #0]
 800156e:	80fb      	strh	r3, [r7, #6]
 8001570:	460b      	mov	r3, r1
 8001572:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <BSP_LCD_DrawPixel+0x44>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <BSP_LCD_DrawPixel+0x48>)
 800157a:	2134      	movs	r1, #52	; 0x34
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	4413      	add	r3, r2
 8001582:	335c      	adds	r3, #92	; 0x5c
 8001584:	681c      	ldr	r4, [r3, #0]
 8001586:	88bd      	ldrh	r5, [r7, #4]
 8001588:	f7ff fcd6 	bl	8000f38 <BSP_LCD_GetXSize>
 800158c:	4603      	mov	r3, r0
 800158e:	fb03 f205 	mul.w	r2, r3, r5
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4423      	add	r3, r4
 800159a:	461a      	mov	r2, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	6013      	str	r3, [r2, #0]
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bdb0      	pop	{r4, r5, r7, pc}
 80015a8:	200002d4 	.word	0x200002d4
 80015ac:	200001bc 	.word	0x200001bc

080015b0 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	603a      	str	r2, [r7, #0]
 80015ba:	80fb      	strh	r3, [r7, #6]
 80015bc:	460b      	mov	r3, r1
 80015be:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80015cc:	4b53      	ldr	r3, [pc, #332]	; (800171c <DrawChar+0x16c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4953      	ldr	r1, [pc, #332]	; (8001720 <DrawChar+0x170>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	3308      	adds	r3, #8
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	88db      	ldrh	r3, [r3, #6]
 80015e2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80015e4:	4b4d      	ldr	r3, [pc, #308]	; (800171c <DrawChar+0x16c>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	494d      	ldr	r1, [pc, #308]	; (8001720 <DrawChar+0x170>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	3308      	adds	r3, #8
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	889b      	ldrh	r3, [r3, #4]
 80015fa:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80015fc:	8a3b      	ldrh	r3, [r7, #16]
 80015fe:	3307      	adds	r3, #7
 8001600:	2b00      	cmp	r3, #0
 8001602:	da00      	bge.n	8001606 <DrawChar+0x56>
 8001604:	3307      	adds	r3, #7
 8001606:	10db      	asrs	r3, r3, #3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	b2da      	uxtb	r2, r3
 800160e:	8a3b      	ldrh	r3, [r7, #16]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
 800161a:	e076      	b.n	800170a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800161c:	8a3b      	ldrh	r3, [r7, #16]
 800161e:	3307      	adds	r3, #7
 8001620:	2b00      	cmp	r3, #0
 8001622:	da00      	bge.n	8001626 <DrawChar+0x76>
 8001624:	3307      	adds	r3, #7
 8001626:	10db      	asrs	r3, r3, #3
 8001628:	461a      	mov	r2, r3
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	fb02 f303 	mul.w	r3, r2, r3
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	4413      	add	r3, r2
 8001634:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001636:	8a3b      	ldrh	r3, [r7, #16]
 8001638:	3307      	adds	r3, #7
 800163a:	2b00      	cmp	r3, #0
 800163c:	da00      	bge.n	8001640 <DrawChar+0x90>
 800163e:	3307      	adds	r3, #7
 8001640:	10db      	asrs	r3, r3, #3
 8001642:	2b01      	cmp	r3, #1
 8001644:	d002      	beq.n	800164c <DrawChar+0x9c>
 8001646:	2b02      	cmp	r3, #2
 8001648:	d004      	beq.n	8001654 <DrawChar+0xa4>
 800164a:	e00c      	b.n	8001666 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	617b      	str	r3, [r7, #20]
      break;
 8001652:	e016      	b.n	8001682 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	021b      	lsls	r3, r3, #8
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	3201      	adds	r2, #1
 800165e:	7812      	ldrb	r2, [r2, #0]
 8001660:	4313      	orrs	r3, r2
 8001662:	617b      	str	r3, [r7, #20]
      break;
 8001664:	e00d      	b.n	8001682 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	041a      	lsls	r2, r3, #16
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	3301      	adds	r3, #1
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	4313      	orrs	r3, r2
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	3202      	adds	r2, #2
 800167a:	7812      	ldrb	r2, [r2, #0]
 800167c:	4313      	orrs	r3, r2
 800167e:	617b      	str	r3, [r7, #20]
      break;
 8001680:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
 8001686:	e036      	b.n	80016f6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001688:	8a3a      	ldrh	r2, [r7, #16]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	1ad2      	subs	r2, r2, r3
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	4413      	add	r3, r2
 8001692:	3b01      	subs	r3, #1
 8001694:	2201      	movs	r2, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	461a      	mov	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d012      	beq.n	80016ca <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	4413      	add	r3, r2
 80016ac:	b298      	uxth	r0, r3
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <DrawChar+0x16c>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	491b      	ldr	r1, [pc, #108]	; (8001720 <DrawChar+0x170>)
 80016b4:	4613      	mov	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	88bb      	ldrh	r3, [r7, #4]
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff ff4e 	bl	8001564 <BSP_LCD_DrawPixel>
 80016c8:	e012      	b.n	80016f0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	4413      	add	r3, r2
 80016d2:	b298      	uxth	r0, r3
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <DrawChar+0x16c>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4911      	ldr	r1, [pc, #68]	; (8001720 <DrawChar+0x170>)
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	3304      	adds	r3, #4
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	88bb      	ldrh	r3, [r7, #4]
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff ff3a 	bl	8001564 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	3301      	adds	r3, #1
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	8a3b      	ldrh	r3, [r7, #16]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d3c4      	bcc.n	8001688 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80016fe:	88bb      	ldrh	r3, [r7, #4]
 8001700:	3301      	adds	r3, #1
 8001702:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	3301      	adds	r3, #1
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	8a7b      	ldrh	r3, [r7, #18]
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	429a      	cmp	r2, r3
 8001710:	d384      	bcc.n	800161c <DrawChar+0x6c>
  }
}
 8001712:	bf00      	nop
 8001714:	bf00      	nop
 8001716:	3720      	adds	r7, #32
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200002d4 	.word	0x200002d4
 8001720:	200002d8 	.word	0x200002d8

08001724 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af02      	add	r7, sp, #8
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <FillBuffer+0x68>)
 8001734:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001738:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800173a:	4b14      	ldr	r3, [pc, #80]	; (800178c <FillBuffer+0x68>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001740:	4a12      	ldr	r2, [pc, #72]	; (800178c <FillBuffer+0x68>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <FillBuffer+0x68>)
 8001748:	4a11      	ldr	r2, [pc, #68]	; (8001790 <FillBuffer+0x6c>)
 800174a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800174c:	480f      	ldr	r0, [pc, #60]	; (800178c <FillBuffer+0x68>)
 800174e:	f000 fd51 	bl	80021f4 <HAL_DMA2D_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d115      	bne.n	8001784 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8001758:	68f9      	ldr	r1, [r7, #12]
 800175a:	480c      	ldr	r0, [pc, #48]	; (800178c <FillBuffer+0x68>)
 800175c:	f000 feb2 	bl	80024c4 <HAL_DMA2D_ConfigLayer>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10e      	bne.n	8001784 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69f9      	ldr	r1, [r7, #28]
 8001770:	4806      	ldr	r0, [pc, #24]	; (800178c <FillBuffer+0x68>)
 8001772:	f000 fd92 	bl	800229a <HAL_DMA2D_Start>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d103      	bne.n	8001784 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800177c:	210a      	movs	r1, #10
 800177e:	4803      	ldr	r0, [pc, #12]	; (800178c <FillBuffer+0x68>)
 8001780:	f000 fdb6 	bl	80022f0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000264 	.word	0x20000264
 8001790:	4002b000 	.word	0x4002b000

08001794 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001798:	4b29      	ldr	r3, [pc, #164]	; (8001840 <BSP_SDRAM_Init+0xac>)
 800179a:	4a2a      	ldr	r2, [pc, #168]	; (8001844 <BSP_SDRAM_Init+0xb0>)
 800179c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800179e:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <BSP_SDRAM_Init+0xb4>)
 80017a0:	2202      	movs	r2, #2
 80017a2:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80017a4:	4b28      	ldr	r3, [pc, #160]	; (8001848 <BSP_SDRAM_Init+0xb4>)
 80017a6:	2207      	movs	r2, #7
 80017a8:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80017aa:	4b27      	ldr	r3, [pc, #156]	; (8001848 <BSP_SDRAM_Init+0xb4>)
 80017ac:	2204      	movs	r2, #4
 80017ae:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <BSP_SDRAM_Init+0xb4>)
 80017b2:	2207      	movs	r2, #7
 80017b4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <BSP_SDRAM_Init+0xb4>)
 80017b8:	2202      	movs	r2, #2
 80017ba:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <BSP_SDRAM_Init+0xb4>)
 80017be:	2202      	movs	r2, #2
 80017c0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <BSP_SDRAM_Init+0xb4>)
 80017c4:	2202      	movs	r2, #2
 80017c6:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <BSP_SDRAM_Init+0xac>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <BSP_SDRAM_Init+0xac>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80017d4:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <BSP_SDRAM_Init+0xac>)
 80017d6:	2204      	movs	r2, #4
 80017d8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <BSP_SDRAM_Init+0xac>)
 80017dc:	2210      	movs	r2, #16
 80017de:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <BSP_SDRAM_Init+0xac>)
 80017e2:	2240      	movs	r2, #64	; 0x40
 80017e4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <BSP_SDRAM_Init+0xac>)
 80017e8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80017ec:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <BSP_SDRAM_Init+0xac>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <BSP_SDRAM_Init+0xac>)
 80017f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017fa:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <BSP_SDRAM_Init+0xac>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <BSP_SDRAM_Init+0xac>)
 8001804:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001808:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800180a:	2100      	movs	r1, #0
 800180c:	480c      	ldr	r0, [pc, #48]	; (8001840 <BSP_SDRAM_Init+0xac>)
 800180e:	f000 f87f 	bl	8001910 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8001812:	490d      	ldr	r1, [pc, #52]	; (8001848 <BSP_SDRAM_Init+0xb4>)
 8001814:	480a      	ldr	r0, [pc, #40]	; (8001840 <BSP_SDRAM_Init+0xac>)
 8001816:	f003 fccf 	bl	80051b8 <HAL_SDRAM_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <BSP_SDRAM_Init+0xb8>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e002      	b.n	800182e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <BSP_SDRAM_Init+0xb8>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800182e:	f240 506a 	movw	r0, #1386	; 0x56a
 8001832:	f000 f80d 	bl	8001850 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <BSP_SDRAM_Init+0xb8>)
 8001838:	781b      	ldrb	r3, [r3, #0]
}
 800183a:	4618      	mov	r0, r3
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200002f4 	.word	0x200002f4
 8001844:	a0000140 	.word	0xa0000140
 8001848:	20000328 	.word	0x20000328
 800184c:	20000048 	.word	0x20000048

08001850 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001862:	4b29      	ldr	r3, [pc, #164]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001864:	2208      	movs	r2, #8
 8001866:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800186a:	2201      	movs	r2, #1
 800186c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001878:	4923      	ldr	r1, [pc, #140]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800187a:	4824      	ldr	r0, [pc, #144]	; (800190c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800187c:	f003 fcda 	bl	8005234 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001880:	2001      	movs	r0, #1
 8001882:	f000 f9c3 	bl	8001c0c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001888:	2202      	movs	r2, #2
 800188a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800188e:	2208      	movs	r2, #8
 8001890:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001894:	2201      	movs	r2, #1
 8001896:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800189e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018a2:	4919      	ldr	r1, [pc, #100]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018a4:	4819      	ldr	r0, [pc, #100]	; (800190c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018a6:	f003 fcc5 	bl	8005234 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018ac:	2203      	movs	r2, #3
 80018ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018b2:	2208      	movs	r2, #8
 80018b4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80018b6:	4b14      	ldr	r3, [pc, #80]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018b8:	2204      	movs	r2, #4
 80018ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80018c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c6:	4910      	ldr	r1, [pc, #64]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018c8:	4810      	ldr	r0, [pc, #64]	; (800190c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018ca:	f003 fcb3 	bl	8005234 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80018ce:	f44f 730c 	mov.w	r3, #560	; 0x230
 80018d2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018d6:	2204      	movs	r2, #4
 80018d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018dc:	2208      	movs	r2, #8
 80018de:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018ea:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80018ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f0:	4905      	ldr	r1, [pc, #20]	; (8001908 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018f2:	4806      	ldr	r0, [pc, #24]	; (800190c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018f4:	f003 fc9e 	bl	8005234 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4804      	ldr	r0, [pc, #16]	; (800190c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018fc:	f003 fccf 	bl	800529e <HAL_SDRAM_ProgramRefreshRate>
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000344 	.word	0x20000344
 800190c:	200002f4 	.word	0x200002f4

08001910 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b090      	sub	sp, #64	; 0x40
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80ec 	beq.w	8001afa <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
 8001926:	4b77      	ldr	r3, [pc, #476]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 8001928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192a:	4a76      	ldr	r2, [pc, #472]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6393      	str	r3, [r2, #56]	; 0x38
 8001932:	4b74      	ldr	r3, [pc, #464]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 8001934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
 800193c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
 8001942:	4b70      	ldr	r3, [pc, #448]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a6f      	ldr	r2, [pc, #444]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 8001948:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b6d      	ldr	r3, [pc, #436]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
 800195e:	4b69      	ldr	r3, [pc, #420]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a68      	ldr	r2, [pc, #416]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b66      	ldr	r3, [pc, #408]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	623b      	str	r3, [r7, #32]
 8001974:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	4b62      	ldr	r3, [pc, #392]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a61      	ldr	r2, [pc, #388]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b5f      	ldr	r3, [pc, #380]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	4b5b      	ldr	r3, [pc, #364]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a5a      	ldr	r2, [pc, #360]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 800199c:	f043 0308 	orr.w	r3, r3, #8
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b58      	ldr	r3, [pc, #352]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	4b54      	ldr	r3, [pc, #336]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a53      	ldr	r2, [pc, #332]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 80019b8:	f043 0310 	orr.w	r3, r3, #16
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b51      	ldr	r3, [pc, #324]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a4c      	ldr	r2, [pc, #304]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 80019d4:	f043 0320 	orr.w	r3, r3, #32
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0320 	and.w	r3, r3, #32
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b46      	ldr	r3, [pc, #280]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a45      	ldr	r2, [pc, #276]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 80019f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <BSP_SDRAM_MspInit+0x1f4>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001a06:	2302      	movs	r3, #2
 8001a08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8001a0e:	230c      	movs	r3, #12
 8001a10:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001a12:	2360      	movs	r3, #96	; 0x60
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	483a      	ldr	r0, [pc, #232]	; (8001b08 <BSP_SDRAM_MspInit+0x1f8>)
 8001a1e:	f000 fe7f 	bl	8002720 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8001a22:	2301      	movs	r3, #1
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8001a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4837      	ldr	r0, [pc, #220]	; (8001b0c <BSP_SDRAM_MspInit+0x1fc>)
 8001a2e:	f000 fe77 	bl	8002720 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001a32:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4834      	ldr	r0, [pc, #208]	; (8001b10 <BSP_SDRAM_MspInit+0x200>)
 8001a40:	f000 fe6e 	bl	8002720 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001a44:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4830      	ldr	r0, [pc, #192]	; (8001b14 <BSP_SDRAM_MspInit+0x204>)
 8001a52:	f000 fe65 	bl	8002720 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001a56:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a60:	4619      	mov	r1, r3
 8001a62:	482d      	ldr	r0, [pc, #180]	; (8001b18 <BSP_SDRAM_MspInit+0x208>)
 8001a64:	f000 fe5c 	bl	8002720 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001a68:	f248 1333 	movw	r3, #33075	; 0x8133
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a72:	4619      	mov	r1, r3
 8001a74:	4829      	ldr	r0, [pc, #164]	; (8001b1c <BSP_SDRAM_MspInit+0x20c>)
 8001a76:	f000 fe53 	bl	8002720 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001a7a:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001a80:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001a86:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001a90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a94:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001a98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a9c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001aa0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aa4:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8001aa6:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001aae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ab2:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001abc:	2203      	movs	r2, #3
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001ace:	4a15      	ldr	r2, [pc, #84]	; (8001b24 <BSP_SDRAM_MspInit+0x214>)
 8001ad0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad8:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8001ade:	4810      	ldr	r0, [pc, #64]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001ae0:	f000 fa78 	bl	8001fd4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8001ae4:	480e      	ldr	r0, [pc, #56]	; (8001b20 <BSP_SDRAM_MspInit+0x210>)
 8001ae6:	f000 f9c7 	bl	8001e78 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	210f      	movs	r1, #15
 8001aee:	2038      	movs	r0, #56	; 0x38
 8001af0:	f000 f98b 	bl	8001e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001af4:	2038      	movs	r0, #56	; 0x38
 8001af6:	f000 f9a4 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001afa:	bf00      	nop
 8001afc:	3740      	adds	r7, #64	; 0x40
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	40020800 	.word	0x40020800
 8001b10:	40020c00 	.word	0x40020c00
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40021400 	.word	0x40021400
 8001b1c:	40021800 	.word	0x40021800
 8001b20:	20000354 	.word	0x20000354
 8001b24:	40026410 	.word	0x40026410

08001b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_Init+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <HAL_Init+0x40>)
 8001b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_Init+0x40>)
 8001b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <HAL_Init+0x40>)
 8001b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b50:	2003      	movs	r0, #3
 8001b52:	f000 f94f 	bl	8001df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b56:	200f      	movs	r0, #15
 8001b58:	f000 f808 	bl	8001b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b5c:	f7fe fd90 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023c00 	.word	0x40023c00

08001b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_InitTick+0x54>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_InitTick+0x58>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f967 	bl	8001e5e <HAL_SYSTICK_Config>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00e      	b.n	8001bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b0f      	cmp	r3, #15
 8001b9e:	d80a      	bhi.n	8001bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f000 f92f 	bl	8001e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bac:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <HAL_InitTick+0x5c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e000      	b.n	8001bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	20000050 	.word	0x20000050
 8001bc8:	2000004c 	.word	0x2000004c

08001bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_IncTick+0x20>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_IncTick+0x24>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <HAL_IncTick+0x24>)
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000050 	.word	0x20000050
 8001bf0:	200003b4 	.word	0x200003b4

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_GetTick+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	200003b4 	.word	0x200003b4

08001c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff ffee 	bl	8001bf4 <HAL_GetTick>
 8001c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d005      	beq.n	8001c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_Delay+0x44>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c32:	bf00      	nop
 8001c34:	f7ff ffde 	bl	8001bf4 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d8f7      	bhi.n	8001c34 <HAL_Delay+0x28>
  {
  }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000050 	.word	0x20000050

08001c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c70:	4013      	ands	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c86:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	60d3      	str	r3, [r2, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	f003 0307 	and.w	r3, r3, #7
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db0b      	blt.n	8001ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4907      	ldr	r1, [pc, #28]	; (8001cf0 <__NVIC_EnableIRQ+0x38>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	2001      	movs	r0, #1
 8001cda:	fa00 f202 	lsl.w	r2, r0, r2
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f1c3 0307 	rsb	r3, r3, #7
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	bf28      	it	cs
 8001d66:	2304      	movcs	r3, #4
 8001d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d902      	bls.n	8001d78 <NVIC_EncodePriority+0x30>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	e000      	b.n	8001d7a <NVIC_EncodePriority+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	4313      	orrs	r3, r2
         );
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc0:	d301      	bcc.n	8001dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00f      	b.n	8001de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <SysTick_Config+0x40>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dce:	210f      	movs	r1, #15
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f7ff ff8e 	bl	8001cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <SysTick_Config+0x40>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SysTick_Config+0x40>)
 8001de0:	2207      	movs	r2, #7
 8001de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	e000e010 	.word	0xe000e010

08001df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff29 	bl	8001c54 <__NVIC_SetPriorityGrouping>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e1c:	f7ff ff3e 	bl	8001c9c <__NVIC_GetPriorityGrouping>
 8001e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	6978      	ldr	r0, [r7, #20]
 8001e28:	f7ff ff8e 	bl	8001d48 <NVIC_EncodePriority>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff5d 	bl	8001cf4 <__NVIC_SetPriority>
}
 8001e3a:	bf00      	nop
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff31 	bl	8001cb8 <__NVIC_EnableIRQ>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ffa2 	bl	8001db0 <SysTick_Config>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff feb6 	bl	8001bf4 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e099      	b.n	8001fc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb4:	e00f      	b.n	8001ed6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eb6:	f7ff fe9d 	bl	8001bf4 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b05      	cmp	r3, #5
 8001ec2:	d908      	bls.n	8001ed6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2203      	movs	r2, #3
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e078      	b.n	8001fc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1e8      	bne.n	8001eb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <HAL_DMA_Init+0x158>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d107      	bne.n	8001f40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f023 0307 	bic.w	r3, r3, #7
 8001f56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d117      	bne.n	8001f9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00e      	beq.n	8001f9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f8bd 	bl	80020fc <DMA_CheckFifoParam>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2240      	movs	r2, #64	; 0x40
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f96:	2301      	movs	r3, #1
 8001f98:	e016      	b.n	8001fc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f874 	bl	8002090 <DMA_CalcBaseAndBitshift>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	223f      	movs	r2, #63	; 0x3f
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	f010803f 	.word	0xf010803f

08001fd4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e050      	b.n	8002088 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d101      	bne.n	8001ff6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e048      	b.n	8002088 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0201 	bic.w	r2, r2, #1
 8002004:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2200      	movs	r2, #0
 8002014:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2221      	movs	r2, #33	; 0x21
 8002034:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f82a 	bl	8002090 <DMA_CalcBaseAndBitshift>
 800203c:	4603      	mov	r3, r0
 800203e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	223f      	movs	r2, #63	; 0x3f
 800206a:	409a      	lsls	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	3b10      	subs	r3, #16
 80020a0:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <DMA_CalcBaseAndBitshift+0x64>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020aa:	4a13      	ldr	r2, [pc, #76]	; (80020f8 <DMA_CalcBaseAndBitshift+0x68>)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d909      	bls.n	80020d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020c6:	f023 0303 	bic.w	r3, r3, #3
 80020ca:	1d1a      	adds	r2, r3, #4
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	659a      	str	r2, [r3, #88]	; 0x58
 80020d0:	e007      	b.n	80020e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020da:	f023 0303 	bic.w	r3, r3, #3
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	aaaaaaab 	.word	0xaaaaaaab
 80020f8:	0800be24 	.word	0x0800be24

080020fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d11f      	bne.n	8002156 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d856      	bhi.n	80021ca <DMA_CheckFifoParam+0xce>
 800211c:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <DMA_CheckFifoParam+0x28>)
 800211e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002122:	bf00      	nop
 8002124:	08002135 	.word	0x08002135
 8002128:	08002147 	.word	0x08002147
 800212c:	08002135 	.word	0x08002135
 8002130:	080021cb 	.word	0x080021cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d046      	beq.n	80021ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002144:	e043      	b.n	80021ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800214e:	d140      	bne.n	80021d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002154:	e03d      	b.n	80021d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800215e:	d121      	bne.n	80021a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d837      	bhi.n	80021d6 <DMA_CheckFifoParam+0xda>
 8002166:	a201      	add	r2, pc, #4	; (adr r2, 800216c <DMA_CheckFifoParam+0x70>)
 8002168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216c:	0800217d 	.word	0x0800217d
 8002170:	08002183 	.word	0x08002183
 8002174:	0800217d 	.word	0x0800217d
 8002178:	08002195 	.word	0x08002195
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
      break;
 8002180:	e030      	b.n	80021e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d025      	beq.n	80021da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002192:	e022      	b.n	80021da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800219c:	d11f      	bne.n	80021de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021a2:	e01c      	b.n	80021de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d903      	bls.n	80021b2 <DMA_CheckFifoParam+0xb6>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d003      	beq.n	80021b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021b0:	e018      	b.n	80021e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
      break;
 80021b6:	e015      	b.n	80021e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00e      	beq.n	80021e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
      break;
 80021c8:	e00b      	b.n	80021e2 <DMA_CheckFifoParam+0xe6>
      break;
 80021ca:	bf00      	nop
 80021cc:	e00a      	b.n	80021e4 <DMA_CheckFifoParam+0xe8>
      break;
 80021ce:	bf00      	nop
 80021d0:	e008      	b.n	80021e4 <DMA_CheckFifoParam+0xe8>
      break;
 80021d2:	bf00      	nop
 80021d4:	e006      	b.n	80021e4 <DMA_CheckFifoParam+0xe8>
      break;
 80021d6:	bf00      	nop
 80021d8:	e004      	b.n	80021e4 <DMA_CheckFifoParam+0xe8>
      break;
 80021da:	bf00      	nop
 80021dc:	e002      	b.n	80021e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80021de:	bf00      	nop
 80021e0:	e000      	b.n	80021e4 <DMA_CheckFifoParam+0xe8>
      break;
 80021e2:	bf00      	nop
    }
  } 
  
  return status; 
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop

080021f4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e03b      	b.n	800227e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f833 	bl	8002286 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002244:	f023 0107 	bic.w	r1, r3, #7
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800225e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68d1      	ldr	r1, [r2, #12]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	430b      	orrs	r3, r1
 800226c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af02      	add	r7, sp, #8
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_DMA2D_Start+0x1c>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e018      	b.n	80022e8 <HAL_DMA2D_Start+0x4e>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2202      	movs	r2, #2
 80022c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 f989 	bl	80025e8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0201 	orr.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d056      	beq.n	80023ba <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800230c:	f7ff fc72 	bl	8001bf4 <HAL_GetTick>
 8002310:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002312:	e04b      	b.n	80023ac <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002322:	2b00      	cmp	r3, #0
 8002324:	d023      	beq.n	800236e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002334:	f043 0202 	orr.w	r2, r3, #2
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2221      	movs	r2, #33	; 0x21
 8002358:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2204      	movs	r2, #4
 800235e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0a5      	b.n	80024ba <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002374:	d01a      	beq.n	80023ac <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002376:	f7ff fc3d 	bl	8001bf4 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d302      	bcc.n	800238c <HAL_DMA2D_PollForTransfer+0x9c>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10f      	bne.n	80023ac <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002390:	f043 0220 	orr.w	r2, r3, #32
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2203      	movs	r2, #3
 800239c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e086      	b.n	80024ba <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0ac      	beq.n	8002314 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d061      	beq.n	80024a0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80023dc:	f7ff fc0a 	bl	8001bf4 <HAL_GetTick>
 80023e0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80023e2:	e056      	b.n	8002492 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d02e      	beq.n	8002454 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002404:	f043 0204 	orr.w	r2, r3, #4
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241a:	f043 0202 	orr.w	r2, r3, #2
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2229      	movs	r2, #41	; 0x29
 800243e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2204      	movs	r2, #4
 8002444:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e032      	b.n	80024ba <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245a:	d01a      	beq.n	8002492 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800245c:	f7ff fbca 	bl	8001bf4 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d302      	bcc.n	8002472 <HAL_DMA2D_PollForTransfer+0x182>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10f      	bne.n	8002492 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	f043 0220 	orr.w	r2, r3, #32
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2203      	movs	r2, #3
 8002482:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e013      	b.n	80024ba <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0a1      	beq.n	80023e4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2212      	movs	r2, #18
 80024a6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_DMA2D_ConfigLayer+0x20>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e079      	b.n	80025d8 <HAL_DMA2D_ConfigLayer+0x114>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	3318      	adds	r3, #24
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	041b      	lsls	r3, r3, #16
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800250e:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <HAL_DMA2D_ConfigLayer+0x120>)
 8002510:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b0a      	cmp	r3, #10
 8002518:	d003      	beq.n	8002522 <HAL_DMA2D_ConfigLayer+0x5e>
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b09      	cmp	r3, #9
 8002520:	d107      	bne.n	8002532 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	e005      	b.n	800253e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	061b      	lsls	r3, r3, #24
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	4313      	orrs	r3, r2
 800253c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d120      	bne.n	8002586 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	43db      	mvns	r3, r3
 800254e:	ea02 0103 	and.w	r1, r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	430a      	orrs	r2, r1
 800255a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b0a      	cmp	r3, #10
 800256c:	d003      	beq.n	8002576 <HAL_DMA2D_ConfigLayer+0xb2>
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b09      	cmp	r3, #9
 8002574:	d127      	bne.n	80025c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
 8002584:	e01f      	b.n	80025c6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43db      	mvns	r3, r3
 8002590:	ea02 0103 	and.w	r1, r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	430a      	orrs	r2, r1
 800259c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b0a      	cmp	r3, #10
 80025ae:	d003      	beq.n	80025b8 <HAL_DMA2D_ConfigLayer+0xf4>
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b09      	cmp	r3, #9
 80025b6:	d106      	bne.n	80025c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80025c4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	ff03000f 	.word	0xff03000f

080025e8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b08b      	sub	sp, #44	; 0x2c
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	041a      	lsls	r2, r3, #16
 8002604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002606:	431a      	orrs	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002620:	d174      	bne.n	800270c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002628:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002630:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002638:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d108      	bne.n	800265a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	431a      	orrs	r2, r3
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	4313      	orrs	r3, r2
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
 8002658:	e053      	b.n	8002702 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d106      	bne.n	8002670 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	4313      	orrs	r3, r2
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	4313      	orrs	r3, r2
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
 800266e:	e048      	b.n	8002702 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d111      	bne.n	800269c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	0cdb      	lsrs	r3, r3, #19
 800267c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	0a9b      	lsrs	r3, r3, #10
 8002682:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	08db      	lsrs	r3, r3, #3
 8002688:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	02db      	lsls	r3, r3, #11
 8002692:	4313      	orrs	r3, r2
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	4313      	orrs	r3, r2
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
 800269a:	e032      	b.n	8002702 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d117      	bne.n	80026d4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	0fdb      	lsrs	r3, r3, #31
 80026a8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	0cdb      	lsrs	r3, r3, #19
 80026ae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	0adb      	lsrs	r3, r3, #11
 80026b4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	08db      	lsrs	r3, r3, #3
 80026ba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	029b      	lsls	r3, r3, #10
 80026c4:	431a      	orrs	r2, r3
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	03db      	lsls	r3, r3, #15
 80026ca:	4313      	orrs	r3, r2
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
 80026d2:	e016      	b.n	8002702 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	0f1b      	lsrs	r3, r3, #28
 80026d8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	0d1b      	lsrs	r3, r3, #20
 80026de:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	0b1b      	lsrs	r3, r3, #12
 80026e4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	011a      	lsls	r2, r3, #4
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	431a      	orrs	r2, r3
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	031b      	lsls	r3, r3, #12
 80026fa:	4313      	orrs	r3, r2
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002708:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800270a:	e003      	b.n	8002714 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	60da      	str	r2, [r3, #12]
}
 8002714:	bf00      	nop
 8002716:	372c      	adds	r7, #44	; 0x2c
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e177      	b.n	8002a2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8166 	bne.w	8002a26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d005      	beq.n	8002772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276e:	2b02      	cmp	r3, #2
 8002770:	d130      	bne.n	80027d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	2203      	movs	r2, #3
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a8:	2201      	movs	r2, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 0201 	and.w	r2, r3, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d017      	beq.n	8002810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d123      	bne.n	8002864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	220f      	movs	r2, #15
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	08da      	lsrs	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	69b9      	ldr	r1, [r7, #24]
 8002860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80c0 	beq.w	8002a26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b66      	ldr	r3, [pc, #408]	; (8002a44 <HAL_GPIO_Init+0x324>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	4a65      	ldr	r2, [pc, #404]	; (8002a44 <HAL_GPIO_Init+0x324>)
 80028b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b4:	6453      	str	r3, [r2, #68]	; 0x44
 80028b6:	4b63      	ldr	r3, [pc, #396]	; (8002a44 <HAL_GPIO_Init+0x324>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c2:	4a61      	ldr	r2, [pc, #388]	; (8002a48 <HAL_GPIO_Init+0x328>)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a58      	ldr	r2, [pc, #352]	; (8002a4c <HAL_GPIO_Init+0x32c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d037      	beq.n	800295e <HAL_GPIO_Init+0x23e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a57      	ldr	r2, [pc, #348]	; (8002a50 <HAL_GPIO_Init+0x330>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d031      	beq.n	800295a <HAL_GPIO_Init+0x23a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a56      	ldr	r2, [pc, #344]	; (8002a54 <HAL_GPIO_Init+0x334>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d02b      	beq.n	8002956 <HAL_GPIO_Init+0x236>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a55      	ldr	r2, [pc, #340]	; (8002a58 <HAL_GPIO_Init+0x338>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d025      	beq.n	8002952 <HAL_GPIO_Init+0x232>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a54      	ldr	r2, [pc, #336]	; (8002a5c <HAL_GPIO_Init+0x33c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01f      	beq.n	800294e <HAL_GPIO_Init+0x22e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a53      	ldr	r2, [pc, #332]	; (8002a60 <HAL_GPIO_Init+0x340>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d019      	beq.n	800294a <HAL_GPIO_Init+0x22a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a52      	ldr	r2, [pc, #328]	; (8002a64 <HAL_GPIO_Init+0x344>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_GPIO_Init+0x226>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a51      	ldr	r2, [pc, #324]	; (8002a68 <HAL_GPIO_Init+0x348>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00d      	beq.n	8002942 <HAL_GPIO_Init+0x222>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a50      	ldr	r2, [pc, #320]	; (8002a6c <HAL_GPIO_Init+0x34c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d007      	beq.n	800293e <HAL_GPIO_Init+0x21e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4f      	ldr	r2, [pc, #316]	; (8002a70 <HAL_GPIO_Init+0x350>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_GPIO_Init+0x21a>
 8002936:	2309      	movs	r3, #9
 8002938:	e012      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800293a:	230a      	movs	r3, #10
 800293c:	e010      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800293e:	2308      	movs	r3, #8
 8002940:	e00e      	b.n	8002960 <HAL_GPIO_Init+0x240>
 8002942:	2307      	movs	r3, #7
 8002944:	e00c      	b.n	8002960 <HAL_GPIO_Init+0x240>
 8002946:	2306      	movs	r3, #6
 8002948:	e00a      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800294a:	2305      	movs	r3, #5
 800294c:	e008      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800294e:	2304      	movs	r3, #4
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x240>
 8002952:	2303      	movs	r3, #3
 8002954:	e004      	b.n	8002960 <HAL_GPIO_Init+0x240>
 8002956:	2302      	movs	r3, #2
 8002958:	e002      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800295e:	2300      	movs	r3, #0
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	f002 0203 	and.w	r2, r2, #3
 8002966:	0092      	lsls	r2, r2, #2
 8002968:	4093      	lsls	r3, r2
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002970:	4935      	ldr	r1, [pc, #212]	; (8002a48 <HAL_GPIO_Init+0x328>)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297e:	4b3d      	ldr	r3, [pc, #244]	; (8002a74 <HAL_GPIO_Init+0x354>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029a2:	4a34      	ldr	r2, [pc, #208]	; (8002a74 <HAL_GPIO_Init+0x354>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a8:	4b32      	ldr	r3, [pc, #200]	; (8002a74 <HAL_GPIO_Init+0x354>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029cc:	4a29      	ldr	r2, [pc, #164]	; (8002a74 <HAL_GPIO_Init+0x354>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029d2:	4b28      	ldr	r3, [pc, #160]	; (8002a74 <HAL_GPIO_Init+0x354>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029f6:	4a1f      	ldr	r2, [pc, #124]	; (8002a74 <HAL_GPIO_Init+0x354>)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_GPIO_Init+0x354>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a20:	4a14      	ldr	r2, [pc, #80]	; (8002a74 <HAL_GPIO_Init+0x354>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b0f      	cmp	r3, #15
 8002a30:	f67f ae84 	bls.w	800273c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	3724      	adds	r7, #36	; 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	40020000 	.word	0x40020000
 8002a50:	40020400 	.word	0x40020400
 8002a54:	40020800 	.word	0x40020800
 8002a58:	40020c00 	.word	0x40020c00
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40021400 	.word	0x40021400
 8002a64:	40021800 	.word	0x40021800
 8002a68:	40021c00 	.word	0x40021c00
 8002a6c:	40022000 	.word	0x40022000
 8002a70:	40022400 	.word	0x40022400
 8002a74:	40013c00 	.word	0x40013c00

08002a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
 8002a84:	4613      	mov	r3, r2
 8002a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a88:	787b      	ldrb	r3, [r7, #1]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a94:	e003      	b.n	8002a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a96:	887b      	ldrh	r3, [r7, #2]
 8002a98:	041a      	lsls	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	619a      	str	r2, [r3, #24]
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0bf      	b.n	8002c3e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8ba 	bl	8002c4c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002aee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6999      	ldr	r1, [r3, #24]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b04:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6899      	ldr	r1, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <HAL_LTDC_Init+0x19c>)
 8002b20:	400b      	ands	r3, r1
 8002b22:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	041b      	lsls	r3, r3, #16
 8002b2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6899      	ldr	r1, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68d9      	ldr	r1, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b3e      	ldr	r3, [pc, #248]	; (8002c48 <HAL_LTDC_Init+0x19c>)
 8002b4e:	400b      	ands	r3, r1
 8002b50:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	041b      	lsls	r3, r3, #16
 8002b58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68d9      	ldr	r1, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1a      	ldr	r2, [r3, #32]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6919      	ldr	r1, [r3, #16]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4b33      	ldr	r3, [pc, #204]	; (8002c48 <HAL_LTDC_Init+0x19c>)
 8002b7c:	400b      	ands	r3, r1
 8002b7e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6919      	ldr	r1, [r3, #16]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6959      	ldr	r1, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <HAL_LTDC_Init+0x19c>)
 8002baa:	400b      	ands	r3, r1
 8002bac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	041b      	lsls	r3, r3, #16
 8002bb4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6959      	ldr	r1, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002bee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0206 	orr.w	r2, r2, #6
 8002c1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	f000f800 	.word	0xf000f800

08002c4c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002c60:	b5b0      	push	{r4, r5, r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_LTDC_ConfigLayer+0x1a>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e02c      	b.n	8002cd4 <HAL_LTDC_ConfigLayer+0x74>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2202      	movs	r2, #2
 8002c86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2134      	movs	r1, #52	; 0x34
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	4614      	mov	r4, r2
 8002c9e:	461d      	mov	r5, r3
 8002ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cac:	682b      	ldr	r3, [r5, #0]
 8002cae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f83b 	bl	8002d30 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bdb0      	pop	{r4, r5, r7, pc}

08002cdc <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_LTDC_EnableDither+0x16>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e016      	b.n	8002d20 <HAL_LTDC_EnableDither+0x44>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_LTDC_EnableDither+0x50>)
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	4a09      	ldr	r2, [pc, #36]	; (8002d2c <HAL_LTDC_EnableDither+0x50>)
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	40016800 	.word	0x40016800

08002d30 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	; 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	0c1b      	lsrs	r3, r3, #16
 8002d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4c:	4413      	add	r3, r2
 8002d4e:	041b      	lsls	r3, r3, #16
 8002d50:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	01db      	lsls	r3, r3, #7
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3384      	adds	r3, #132	; 0x84
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	4611      	mov	r1, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	01d2      	lsls	r2, r2, #7
 8002d6c:	440a      	add	r2, r1
 8002d6e:	3284      	adds	r2, #132	; 0x84
 8002d70:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002d74:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002d86:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002d88:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	01db      	lsls	r3, r3, #7
 8002d94:	440b      	add	r3, r1
 8002d96:	3384      	adds	r3, #132	; 0x84
 8002d98:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002d9e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dae:	4413      	add	r3, r2
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	01db      	lsls	r3, r3, #7
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3384      	adds	r3, #132	; 0x84
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	4611      	mov	r1, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	01d2      	lsls	r2, r2, #7
 8002dce:	440a      	add	r2, r1
 8002dd0:	3284      	adds	r2, #132	; 0x84
 8002dd2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002dd6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002de6:	4413      	add	r3, r2
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4619      	mov	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	01db      	lsls	r3, r3, #7
 8002df4:	440b      	add	r3, r1
 8002df6:	3384      	adds	r3, #132	; 0x84
 8002df8:	4619      	mov	r1, r3
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	01db      	lsls	r3, r3, #7
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3384      	adds	r3, #132	; 0x84
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	4611      	mov	r1, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	01d2      	lsls	r2, r2, #7
 8002e1a:	440a      	add	r2, r1
 8002e1c:	3284      	adds	r2, #132	; 0x84
 8002e1e:	f023 0307 	bic.w	r3, r3, #7
 8002e22:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	01db      	lsls	r3, r3, #7
 8002e2e:	4413      	add	r3, r2
 8002e30:	3384      	adds	r3, #132	; 0x84
 8002e32:	461a      	mov	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	061b      	lsls	r3, r3, #24
 8002e54:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	01db      	lsls	r3, r3, #7
 8002e60:	4413      	add	r3, r2
 8002e62:	3384      	adds	r3, #132	; 0x84
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	01db      	lsls	r3, r3, #7
 8002e70:	4413      	add	r3, r2
 8002e72:	3384      	adds	r3, #132	; 0x84
 8002e74:	461a      	mov	r2, r3
 8002e76:	2300      	movs	r3, #0
 8002e78:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e80:	461a      	mov	r2, r3
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	431a      	orrs	r2, r3
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	01db      	lsls	r3, r3, #7
 8002e94:	440b      	add	r3, r1
 8002e96:	3384      	adds	r3, #132	; 0x84
 8002e98:	4619      	mov	r1, r3
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	01db      	lsls	r3, r3, #7
 8002eaa:	4413      	add	r3, r2
 8002eac:	3384      	adds	r3, #132	; 0x84
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	01d2      	lsls	r2, r2, #7
 8002eba:	440a      	add	r2, r1
 8002ebc:	3284      	adds	r2, #132	; 0x84
 8002ebe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ec2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	01db      	lsls	r3, r3, #7
 8002ece:	4413      	add	r3, r2
 8002ed0:	3384      	adds	r3, #132	; 0x84
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	01db      	lsls	r3, r3, #7
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3384      	adds	r3, #132	; 0x84
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	4611      	mov	r1, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	01d2      	lsls	r2, r2, #7
 8002ef4:	440a      	add	r2, r1
 8002ef6:	3284      	adds	r2, #132	; 0x84
 8002ef8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002efc:	f023 0307 	bic.w	r3, r3, #7
 8002f00:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	69da      	ldr	r2, [r3, #28]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	68f9      	ldr	r1, [r7, #12]
 8002f0c:	6809      	ldr	r1, [r1, #0]
 8002f0e:	4608      	mov	r0, r1
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	01c9      	lsls	r1, r1, #7
 8002f14:	4401      	add	r1, r0
 8002f16:	3184      	adds	r1, #132	; 0x84
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	01db      	lsls	r3, r3, #7
 8002f26:	4413      	add	r3, r2
 8002f28:	3384      	adds	r3, #132	; 0x84
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	01db      	lsls	r3, r3, #7
 8002f36:	4413      	add	r3, r2
 8002f38:	3384      	adds	r3, #132	; 0x84
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	01db      	lsls	r3, r3, #7
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3384      	adds	r3, #132	; 0x84
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d102      	bne.n	8002f64 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002f5e:	2304      	movs	r3, #4
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	e01b      	b.n	8002f9c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d102      	bne.n	8002f72 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	61fb      	str	r3, [r7, #28]
 8002f70:	e014      	b.n	8002f9c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d00b      	beq.n	8002f92 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d007      	beq.n	8002f92 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d003      	beq.n	8002f92 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002f8e:	2b07      	cmp	r3, #7
 8002f90:	d102      	bne.n	8002f98 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002f92:	2302      	movs	r3, #2
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	e001      	b.n	8002f9c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	01db      	lsls	r3, r3, #7
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3384      	adds	r3, #132	; 0x84
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	01d2      	lsls	r2, r2, #7
 8002fb6:	440a      	add	r2, r1
 8002fb8:	3284      	adds	r2, #132	; 0x84
 8002fba:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002fbe:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	69fa      	ldr	r2, [r7, #28]
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	1acb      	subs	r3, r1, r3
 8002fd6:	69f9      	ldr	r1, [r7, #28]
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002fde:	68f9      	ldr	r1, [r7, #12]
 8002fe0:	6809      	ldr	r1, [r1, #0]
 8002fe2:	4608      	mov	r0, r1
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	01c9      	lsls	r1, r1, #7
 8002fe8:	4401      	add	r1, r0
 8002fea:	3184      	adds	r1, #132	; 0x84
 8002fec:	4313      	orrs	r3, r2
 8002fee:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	01db      	lsls	r3, r3, #7
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3384      	adds	r3, #132	; 0x84
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	4611      	mov	r1, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	01d2      	lsls	r2, r2, #7
 800300a:	440a      	add	r2, r1
 800300c:	3284      	adds	r2, #132	; 0x84
 800300e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003012:	f023 0307 	bic.w	r3, r3, #7
 8003016:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	01db      	lsls	r3, r3, #7
 8003022:	4413      	add	r3, r2
 8003024:	3384      	adds	r3, #132	; 0x84
 8003026:	461a      	mov	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	01db      	lsls	r3, r3, #7
 8003038:	4413      	add	r3, r2
 800303a:	3384      	adds	r3, #132	; 0x84
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	4611      	mov	r1, r2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	01d2      	lsls	r2, r2, #7
 8003048:	440a      	add	r2, r1
 800304a:	3284      	adds	r2, #132	; 0x84
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6013      	str	r3, [r2, #0]
}
 8003052:	bf00      	nop
 8003054:	3724      	adds	r7, #36	; 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800305e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003060:	b08f      	sub	sp, #60	; 0x3c
 8003062:	af0a      	add	r7, sp, #40	; 0x28
 8003064:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e10f      	b.n	8003290 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f006 fdec 	bl	8009c68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2203      	movs	r2, #3
 8003094:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 f93f 	bl	8006332 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	687e      	ldr	r6, [r7, #4]
 80030bc:	466d      	mov	r5, sp
 80030be:	f106 0410 	add.w	r4, r6, #16
 80030c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80030d2:	1d33      	adds	r3, r6, #4
 80030d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d6:	6838      	ldr	r0, [r7, #0]
 80030d8:	f003 f816 	bl	8006108 <USB_CoreInit>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2202      	movs	r2, #2
 80030e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e0d0      	b.n	8003290 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 f92d 	bl	8006354 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	73fb      	strb	r3, [r7, #15]
 80030fe:	e04a      	b.n	8003196 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	333d      	adds	r3, #61	; 0x3d
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	333c      	adds	r3, #60	; 0x3c
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	b298      	uxth	r0, r3
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	3344      	adds	r3, #68	; 0x44
 800313c:	4602      	mov	r2, r0
 800313e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	3340      	adds	r3, #64	; 0x40
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003154:	7bfa      	ldrb	r2, [r7, #15]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	3348      	adds	r3, #72	; 0x48
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	334c      	adds	r3, #76	; 0x4c
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	3354      	adds	r3, #84	; 0x54
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	3301      	adds	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	429a      	cmp	r2, r3
 800319e:	d3af      	bcc.n	8003100 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a0:	2300      	movs	r3, #0
 80031a2:	73fb      	strb	r3, [r7, #15]
 80031a4:	e044      	b.n	8003230 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031e8:	7bfa      	ldrb	r2, [r7, #15]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003214:	7bfa      	ldrb	r2, [r7, #15]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	3301      	adds	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
 8003230:	7bfa      	ldrb	r2, [r7, #15]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	d3b5      	bcc.n	80031a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	687e      	ldr	r6, [r7, #4]
 8003242:	466d      	mov	r5, sp
 8003244:	f106 0410 	add.w	r4, r6, #16
 8003248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800324a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800324c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800324e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003250:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003254:	e885 0003 	stmia.w	r5, {r0, r1}
 8003258:	1d33      	adds	r3, r6, #4
 800325a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800325c:	6838      	ldr	r0, [r7, #0]
 800325e:	f003 f8c5 	bl	80063ec <USB_DevInit>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e00d      	b.n	8003290 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f004 fa14 	bl	80076b6 <USB_DevDisconnect>

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003298 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_PCD_Start+0x1c>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e020      	b.n	80032f6 <HAL_PCD_Start+0x5e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d109      	bne.n	80032d8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d005      	beq.n	80032d8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f003 f817 	bl	8006310 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f004 f9c4 	bl	8007674 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032fe:	b590      	push	{r4, r7, lr}
 8003300:	b08d      	sub	sp, #52	; 0x34
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f004 fa82 	bl	800781e <USB_GetMode>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 848a 	bne.w	8003c36 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f004 f9e6 	bl	80076f8 <USB_ReadInterrupts>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8480 	beq.w	8003c34 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f004 f9d3 	bl	80076f8 <USB_ReadInterrupts>
 8003352:	4603      	mov	r3, r0
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b02      	cmp	r3, #2
 800335a:	d107      	bne.n	800336c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f002 0202 	and.w	r2, r2, #2
 800336a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f004 f9c1 	bl	80076f8 <USB_ReadInterrupts>
 8003376:	4603      	mov	r3, r0
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b10      	cmp	r3, #16
 800337e:	d161      	bne.n	8003444 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0210 	bic.w	r2, r2, #16
 800338e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f003 020f 	and.w	r2, r3, #15
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	4413      	add	r3, r2
 80033ac:	3304      	adds	r3, #4
 80033ae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	0c5b      	lsrs	r3, r3, #17
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d124      	bne.n	8003406 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d035      	beq.n	8003434 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	6a38      	ldr	r0, [r7, #32]
 80033dc:	f003 fff8 	bl	80073d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	091b      	lsrs	r3, r3, #4
 80033e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ec:	441a      	add	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	6a1a      	ldr	r2, [r3, #32]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033fe:	441a      	add	r2, r3
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	621a      	str	r2, [r3, #32]
 8003404:	e016      	b.n	8003434 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	0c5b      	lsrs	r3, r3, #17
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	2b06      	cmp	r3, #6
 8003410:	d110      	bne.n	8003434 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003418:	2208      	movs	r2, #8
 800341a:	4619      	mov	r1, r3
 800341c:	6a38      	ldr	r0, [r7, #32]
 800341e:	f003 ffd7 	bl	80073d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	6a1a      	ldr	r2, [r3, #32]
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800342e:	441a      	add	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0210 	orr.w	r2, r2, #16
 8003442:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f004 f955 	bl	80076f8 <USB_ReadInterrupts>
 800344e:	4603      	mov	r3, r0
 8003450:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003454:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003458:	f040 80a7 	bne.w	80035aa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f004 f95a 	bl	800771e <USB_ReadDevAllOutEpInterrupt>
 800346a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800346c:	e099      	b.n	80035a2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 808e 	beq.w	8003596 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f004 f97e 	bl	8007786 <USB_ReadDevOutEPInterrupt>
 800348a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00c      	beq.n	80034b0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a2:	461a      	mov	r2, r3
 80034a4:	2301      	movs	r3, #1
 80034a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fec2 	bl	8004234 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c6:	461a      	mov	r2, r3
 80034c8:	2308      	movs	r3, #8
 80034ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 ff98 	bl	8004404 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ea:	461a      	mov	r2, r3
 80034ec:	2310      	movs	r3, #16
 80034ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d030      	beq.n	800355c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003502:	2b80      	cmp	r3, #128	; 0x80
 8003504:	d109      	bne.n	800351a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003514:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003518:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800351a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	4413      	add	r3, r2
 800352c:	3304      	adds	r3, #4
 800352e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	78db      	ldrb	r3, [r3, #3]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d108      	bne.n	800354a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2200      	movs	r2, #0
 800353c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	b2db      	uxtb	r3, r3
 8003542:	4619      	mov	r1, r3
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f006 fc91 	bl	8009e6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	4413      	add	r3, r2
 8003552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003556:	461a      	mov	r2, r3
 8003558:	2302      	movs	r3, #2
 800355a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003572:	461a      	mov	r2, r3
 8003574:	2320      	movs	r3, #32
 8003576:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358e:	461a      	mov	r2, r3
 8003590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003594:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	3301      	adds	r3, #1
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f47f af62 	bne.w	800346e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f004 f8a2 	bl	80076f8 <USB_ReadInterrupts>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035be:	f040 80db 	bne.w	8003778 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f004 f8c3 	bl	8007752 <USB_ReadDevAllInEpInterrupt>
 80035cc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80035d2:	e0cd      	b.n	8003770 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80c2 	beq.w	8003764 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f004 f8e9 	bl	80077c2 <USB_ReadDevInEPInterrupt>
 80035f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d057      	beq.n	80036ac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	2201      	movs	r2, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	43db      	mvns	r3, r3
 8003616:	69f9      	ldr	r1, [r7, #28]
 8003618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800361c:	4013      	ands	r3, r2
 800361e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362c:	461a      	mov	r2, r3
 800362e:	2301      	movs	r3, #1
 8003630:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d132      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363e:	4613      	mov	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	334c      	adds	r3, #76	; 0x4c
 800364a:	6819      	ldr	r1, [r3, #0]
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4403      	add	r3, r0
 800365a:	3348      	adds	r3, #72	; 0x48
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4419      	add	r1, r3
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4403      	add	r3, r0
 800366e:	334c      	adds	r3, #76	; 0x4c
 8003670:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	2b00      	cmp	r3, #0
 8003676:	d113      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x3a2>
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	3354      	adds	r3, #84	; 0x54
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d108      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003698:	461a      	mov	r2, r3
 800369a:	2101      	movs	r1, #1
 800369c:	f004 f8f0 	bl	8007880 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	4619      	mov	r1, r3
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f006 fb5b 	bl	8009d62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c2:	461a      	mov	r2, r3
 80036c4:	2308      	movs	r3, #8
 80036c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036de:	461a      	mov	r2, r3
 80036e0:	2310      	movs	r3, #16
 80036e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fa:	461a      	mov	r2, r3
 80036fc:	2340      	movs	r3, #64	; 0x40
 80036fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d023      	beq.n	8003752 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800370a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800370c:	6a38      	ldr	r0, [r7, #32]
 800370e:	f002 ffd1 	bl	80066b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	3338      	adds	r3, #56	; 0x38
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	3304      	adds	r3, #4
 8003724:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	78db      	ldrb	r3, [r3, #3]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d108      	bne.n	8003740 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2200      	movs	r2, #0
 8003732:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	b2db      	uxtb	r3, r3
 8003738:	4619      	mov	r1, r3
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f006 fba8 	bl	8009e90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374c:	461a      	mov	r2, r3
 800374e:	2302      	movs	r3, #2
 8003750:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800375c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fcdb 	bl	800411a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	3301      	adds	r3, #1
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	085b      	lsrs	r3, r3, #1
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	f47f af2e 	bne.w	80035d4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f003 ffbb 	bl	80076f8 <USB_ReadInterrupts>
 8003782:	4603      	mov	r3, r0
 8003784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800378c:	d122      	bne.n	80037d4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d108      	bne.n	80037be <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037b4:	2100      	movs	r1, #0
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fec2 	bl	8004540 <HAL_PCDEx_LPM_Callback>
 80037bc:	e002      	b.n	80037c4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f006 fb46 	bl	8009e50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80037d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f003 ff8d 	bl	80076f8 <USB_ReadInterrupts>
 80037de:	4603      	mov	r3, r0
 80037e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e8:	d112      	bne.n	8003810 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d102      	bne.n	8003800 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f006 fb02 	bl	8009e04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800380e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f003 ff6f 	bl	80076f8 <USB_ReadInterrupts>
 800381a:	4603      	mov	r3, r0
 800381c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003824:	f040 80b7 	bne.w	8003996 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2110      	movs	r1, #16
 8003842:	4618      	mov	r0, r3
 8003844:	f002 ff36 	bl	80066b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003848:	2300      	movs	r3, #0
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800384c:	e046      	b.n	80038dc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385a:	461a      	mov	r2, r3
 800385c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003860:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003872:	0151      	lsls	r1, r2, #5
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	440a      	add	r2, r1
 8003878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800387c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003880:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388e:	461a      	mov	r2, r3
 8003890:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003894:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038a6:	0151      	lsls	r1, r2, #5
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	440a      	add	r2, r1
 80038ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038c6:	0151      	lsls	r1, r2, #5
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	440a      	add	r2, r1
 80038cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	3301      	adds	r3, #1
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d3b3      	bcc.n	800384e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80038f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d016      	beq.n	8003930 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003912:	f043 030b 	orr.w	r3, r3, #11
 8003916:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003928:	f043 030b 	orr.w	r3, r3, #11
 800392c:	6453      	str	r3, [r2, #68]	; 0x44
 800392e:	e015      	b.n	800395c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800393e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003942:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003946:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003956:	f043 030b 	orr.w	r3, r3, #11
 800395a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800396a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800396e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003980:	461a      	mov	r2, r3
 8003982:	f003 ff7d 	bl	8007880 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003994:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f003 feac 	bl	80076f8 <USB_ReadInterrupts>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039aa:	d124      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f003 ff42 	bl	800783a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f002 fef7 	bl	80067ae <USB_GetDevSpeed>
 80039c0:	4603      	mov	r3, r0
 80039c2:	461a      	mov	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681c      	ldr	r4, [r3, #0]
 80039cc:	f001 fa28 	bl	8004e20 <HAL_RCC_GetHCLKFreq>
 80039d0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	4620      	mov	r0, r4
 80039dc:	f002 fbf6 	bl	80061cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f006 f9e6 	bl	8009db2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80039f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f003 fe7c 	bl	80076f8 <USB_ReadInterrupts>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d10a      	bne.n	8003a20 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f006 f9c3 	bl	8009d96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f002 0208 	and.w	r2, r2, #8
 8003a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f003 fe67 	bl	80076f8 <USB_ReadInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a30:	2b80      	cmp	r3, #128	; 0x80
 8003a32:	d122      	bne.n	8003a7a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a40:	2301      	movs	r3, #1
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
 8003a44:	e014      	b.n	8003a70 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d105      	bne.n	8003a6a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	4619      	mov	r1, r3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fb27 	bl	80040b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d3e5      	bcc.n	8003a46 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f003 fe3a 	bl	80076f8 <USB_ReadInterrupts>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a8e:	d13b      	bne.n	8003b08 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a90:	2301      	movs	r3, #1
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
 8003a94:	e02b      	b.n	8003aee <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aaa:	4613      	mov	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	3340      	adds	r3, #64	; 0x40
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d115      	bne.n	8003ae8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003abc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	da12      	bge.n	8003ae8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	333f      	adds	r3, #63	; 0x3f
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fae8 	bl	80040b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	3301      	adds	r3, #1
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d3ce      	bcc.n	8003a96 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f003 fdf3 	bl	80076f8 <USB_ReadInterrupts>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b1c:	d155      	bne.n	8003bca <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b1e:	2301      	movs	r3, #1
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
 8003b22:	e045      	b.n	8003bb0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d12e      	bne.n	8003baa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	da2b      	bge.n	8003baa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003b5e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d121      	bne.n	8003baa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10a      	bne.n	8003baa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ba6:	6053      	str	r3, [r2, #4]
            break;
 8003ba8:	e007      	b.n	8003bba <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	3301      	adds	r3, #1
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d3b4      	bcc.n	8003b24 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f003 fd92 	bl	80076f8 <USB_ReadInterrupts>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bde:	d10a      	bne.n	8003bf6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f006 f967 	bl	8009eb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f003 fd7c 	bl	80076f8 <USB_ReadInterrupts>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d115      	bne.n	8003c36 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f006 f957 	bl	8009ed0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6859      	ldr	r1, [r3, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	e000      	b.n	8003c36 <HAL_PCD_IRQHandler+0x938>
      return;
 8003c34:	bf00      	nop
    }
  }
}
 8003c36:	3734      	adds	r7, #52	; 0x34
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd90      	pop	{r4, r7, pc}

08003c3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_PCD_SetAddress+0x1a>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e013      	b.n	8003c7e <HAL_PCD_SetAddress+0x42>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f003 fcda 	bl	8007628 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	4608      	mov	r0, r1
 8003c90:	4611      	mov	r1, r2
 8003c92:	461a      	mov	r2, r3
 8003c94:	4603      	mov	r3, r0
 8003c96:	70fb      	strb	r3, [r7, #3]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	803b      	strh	r3, [r7, #0]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	da0f      	bge.n	8003ccc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cac:	78fb      	ldrb	r3, [r7, #3]
 8003cae:	f003 020f 	and.w	r2, r3, #15
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	3338      	adds	r3, #56	; 0x38
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	705a      	strb	r2, [r3, #1]
 8003cca:	e00f      	b.n	8003cec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ccc:	78fb      	ldrb	r3, [r7, #3]
 8003cce:	f003 020f 	and.w	r2, r3, #15
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003cf8:	883a      	ldrh	r2, [r7, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	78ba      	ldrb	r2, [r7, #2]
 8003d02:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	785b      	ldrb	r3, [r3, #1]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d004      	beq.n	8003d16 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d16:	78bb      	ldrb	r3, [r7, #2]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d102      	bne.n	8003d22 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_PCD_EP_Open+0xaa>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e00e      	b.n	8003d4e <HAL_PCD_EP_Open+0xc8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68f9      	ldr	r1, [r7, #12]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f002 fd5a 	bl	80067f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003d4c:	7afb      	ldrb	r3, [r7, #11]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	da0f      	bge.n	8003d8a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	f003 020f 	and.w	r2, r3, #15
 8003d70:	4613      	mov	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	3338      	adds	r3, #56	; 0x38
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3304      	adds	r3, #4
 8003d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	705a      	strb	r2, [r3, #1]
 8003d88:	e00f      	b.n	8003daa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d8a:	78fb      	ldrb	r3, [r7, #3]
 8003d8c:	f003 020f 	and.w	r2, r3, #15
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	4413      	add	r3, r2
 8003da0:	3304      	adds	r3, #4
 8003da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_PCD_EP_Close+0x6e>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e00e      	b.n	8003de2 <HAL_PCD_EP_Close+0x8c>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68f9      	ldr	r1, [r7, #12]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f002 fd98 	bl	8006908 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b086      	sub	sp, #24
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]
 8003df6:	460b      	mov	r3, r1
 8003df8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dfa:	7afb      	ldrb	r3, [r7, #11]
 8003dfc:	f003 020f 	and.w	r2, r3, #15
 8003e00:	4613      	mov	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	3304      	adds	r3, #4
 8003e12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2200      	movs	r2, #0
 8003e24:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e2c:	7afb      	ldrb	r3, [r7, #11]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d102      	bne.n	8003e46 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e46:	7afb      	ldrb	r3, [r7, #11]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d109      	bne.n	8003e64 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	6979      	ldr	r1, [r7, #20]
 8003e5e:	f003 f877 	bl	8006f50 <USB_EP0StartXfer>
 8003e62:	e008      	b.n	8003e76 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	6979      	ldr	r1, [r7, #20]
 8003e72:	f002 fe25 	bl	8006ac0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	f003 020f 	and.w	r2, r3, #15
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec0:	7afb      	ldrb	r3, [r7, #11]
 8003ec2:	f003 020f 	and.w	r2, r3, #15
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	3338      	adds	r3, #56	; 0x38
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2201      	movs	r2, #1
 8003eee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ef0:	7afb      	ldrb	r3, [r7, #11]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d102      	bne.n	8003f0a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f0a:	7afb      	ldrb	r3, [r7, #11]
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6818      	ldr	r0, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6979      	ldr	r1, [r7, #20]
 8003f22:	f003 f815 	bl	8006f50 <USB_EP0StartXfer>
 8003f26:	e008      	b.n	8003f3a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	6979      	ldr	r1, [r7, #20]
 8003f36:	f002 fdc3 	bl	8006ac0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	f003 020f 	and.w	r2, r3, #15
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d901      	bls.n	8003f62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e050      	b.n	8004004 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	da0f      	bge.n	8003f8a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	f003 020f 	and.w	r2, r3, #15
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	3338      	adds	r3, #56	; 0x38
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3304      	adds	r3, #4
 8003f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	705a      	strb	r2, [r3, #1]
 8003f88:	e00d      	b.n	8003fa6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_PCD_EP_SetStall+0x82>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e01e      	b.n	8004004 <HAL_PCD_EP_SetStall+0xc0>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68f9      	ldr	r1, [r7, #12]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f003 fa53 	bl	8007480 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	b2d9      	uxtb	r1, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f003 fc43 	bl	8007880 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	f003 020f 	and.w	r2, r3, #15
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	429a      	cmp	r2, r3
 8004024:	d901      	bls.n	800402a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e042      	b.n	80040b0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800402a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800402e:	2b00      	cmp	r3, #0
 8004030:	da0f      	bge.n	8004052 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	f003 020f 	and.w	r2, r3, #15
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	3338      	adds	r3, #56	; 0x38
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	4413      	add	r3, r2
 8004046:	3304      	adds	r3, #4
 8004048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	705a      	strb	r2, [r3, #1]
 8004050:	e00f      	b.n	8004072 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	f003 020f 	and.w	r2, r3, #15
 8004058:	4613      	mov	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	3304      	adds	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	b2da      	uxtb	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_PCD_EP_ClrStall+0x86>
 800408e:	2302      	movs	r3, #2
 8004090:	e00e      	b.n	80040b0 <HAL_PCD_EP_ClrStall+0xa4>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68f9      	ldr	r1, [r7, #12]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f003 fa5b 	bl	800755c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80040c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	da0c      	bge.n	80040e6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	f003 020f 	and.w	r2, r3, #15
 80040d2:	4613      	mov	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	3338      	adds	r3, #56	; 0x38
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	3304      	adds	r3, #4
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e00c      	b.n	8004100 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	f003 020f 	and.w	r2, r3, #15
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	4413      	add	r3, r2
 80040fc:	3304      	adds	r3, #4
 80040fe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68f9      	ldr	r1, [r7, #12]
 8004106:	4618      	mov	r0, r3
 8004108:	f003 f87a 	bl	8007200 <USB_EPStopXfer>
 800410c:	4603      	mov	r3, r0
 800410e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004110:	7afb      	ldrb	r3, [r7, #11]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b08a      	sub	sp, #40	; 0x28
 800411e:	af02      	add	r7, sp, #8
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	3338      	adds	r3, #56	; 0x38
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	4413      	add	r3, r2
 800413e:	3304      	adds	r3, #4
 8004140:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a1a      	ldr	r2, [r3, #32]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	429a      	cmp	r2, r3
 800414c:	d901      	bls.n	8004152 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e06c      	b.n	800422c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	429a      	cmp	r2, r3
 8004166:	d902      	bls.n	800416e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3303      	adds	r3, #3
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004176:	e02b      	b.n	80041d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	699a      	ldr	r2, [r3, #24]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	429a      	cmp	r2, r3
 800418c:	d902      	bls.n	8004194 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	3303      	adds	r3, #3
 8004198:	089b      	lsrs	r3, r3, #2
 800419a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6919      	ldr	r1, [r3, #16]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	4603      	mov	r3, r0
 80041b2:	6978      	ldr	r0, [r7, #20]
 80041b4:	f003 f8ce 	bl	8007354 <USB_WritePacket>

    ep->xfer_buff  += len;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	441a      	add	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a1a      	ldr	r2, [r3, #32]
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	441a      	add	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d809      	bhi.n	80041fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1a      	ldr	r2, [r3, #32]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d203      	bcs.n	80041fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1be      	bne.n	8004178 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	429a      	cmp	r2, r3
 8004204:	d811      	bhi.n	800422a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	2201      	movs	r2, #1
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	43db      	mvns	r3, r3
 8004220:	6939      	ldr	r1, [r7, #16]
 8004222:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004226:	4013      	ands	r3, r2
 8004228:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3720      	adds	r7, #32
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	333c      	adds	r3, #60	; 0x3c
 800424c:	3304      	adds	r3, #4
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d17b      	bne.n	8004362 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d015      	beq.n	80042a0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	4a61      	ldr	r2, [pc, #388]	; (80043fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	f240 80b9 	bls.w	80043f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80b3 	beq.w	80043f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004296:	461a      	mov	r2, r3
 8004298:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800429c:	6093      	str	r3, [r2, #8]
 800429e:	e0a7      	b.n	80043f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b6:	461a      	mov	r2, r3
 80042b8:	2320      	movs	r3, #32
 80042ba:	6093      	str	r3, [r2, #8]
 80042bc:	e098      	b.n	80043f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f040 8093 	bne.w	80043f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	4a4b      	ldr	r2, [pc, #300]	; (80043fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d90f      	bls.n	80042f2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e8:	461a      	mov	r2, r3
 80042ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ee:	6093      	str	r3, [r2, #8]
 80042f0:	e07e      	b.n	80043f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	4413      	add	r3, r2
 8004304:	3304      	adds	r3, #4
 8004306:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	69da      	ldr	r2, [r3, #28]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	0159      	lsls	r1, r3, #5
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	440b      	add	r3, r1
 8004314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431e:	1ad2      	subs	r2, r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d114      	bne.n	8004354 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800433c:	461a      	mov	r2, r3
 800433e:	2101      	movs	r1, #1
 8004340:	f003 fa9e 	bl	8007880 <USB_EP0_OutStart>
 8004344:	e006      	b.n	8004354 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	441a      	add	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	4619      	mov	r1, r3
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f005 fce6 	bl	8009d2c <HAL_PCD_DataOutStageCallback>
 8004360:	e046      	b.n	80043f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	4a26      	ldr	r2, [pc, #152]	; (8004400 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d124      	bne.n	80043b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00a      	beq.n	800438a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004380:	461a      	mov	r2, r3
 8004382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004386:	6093      	str	r3, [r2, #8]
 8004388:	e032      	b.n	80043f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a0:	461a      	mov	r2, r3
 80043a2:	2320      	movs	r3, #32
 80043a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	4619      	mov	r1, r3
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f005 fcbd 	bl	8009d2c <HAL_PCD_DataOutStageCallback>
 80043b2:	e01d      	b.n	80043f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d114      	bne.n	80043e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	4613      	mov	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d108      	bne.n	80043e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043dc:	461a      	mov	r2, r3
 80043de:	2100      	movs	r1, #0
 80043e0:	f003 fa4e 	bl	8007880 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f005 fc9e 	bl	8009d2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	4f54300a 	.word	0x4f54300a
 8004400:	4f54310a 	.word	0x4f54310a

08004404 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	333c      	adds	r3, #60	; 0x3c
 800441c:	3304      	adds	r3, #4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4a15      	ldr	r2, [pc, #84]	; (800448c <PCD_EP_OutSetupPacket_int+0x88>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d90e      	bls.n	8004458 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004440:	2b00      	cmp	r3, #0
 8004442:	d009      	beq.n	8004458 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004450:	461a      	mov	r2, r3
 8004452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004456:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f005 fc55 	bl	8009d08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a0a      	ldr	r2, [pc, #40]	; (800448c <PCD_EP_OutSetupPacket_int+0x88>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d90c      	bls.n	8004480 <PCD_EP_OutSetupPacket_int+0x7c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d108      	bne.n	8004480 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004478:	461a      	mov	r2, r3
 800447a:	2101      	movs	r1, #1
 800447c:	f003 fa00 	bl	8007880 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	4f54300a 	.word	0x4f54300a

08004490 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	70fb      	strb	r3, [r7, #3]
 800449c:	4613      	mov	r3, r2
 800449e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d107      	bne.n	80044be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044ae:	883b      	ldrh	r3, [r7, #0]
 80044b0:	0419      	lsls	r1, r3, #16
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	629a      	str	r2, [r3, #40]	; 0x28
 80044bc:	e028      	b.n	8004510 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	4413      	add	r3, r2
 80044ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044cc:	2300      	movs	r3, #0
 80044ce:	73fb      	strb	r3, [r7, #15]
 80044d0:	e00d      	b.n	80044ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	3340      	adds	r3, #64	; 0x40
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	4413      	add	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	3301      	adds	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
 80044ee:	7bfa      	ldrb	r2, [r7, #15]
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d3ec      	bcc.n	80044d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044f8:	883b      	ldrh	r3, [r7, #0]
 80044fa:	0418      	lsls	r0, r3, #16
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6819      	ldr	r1, [r3, #0]
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	3b01      	subs	r3, #1
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	4302      	orrs	r2, r0
 8004508:	3340      	adds	r3, #64	; 0x40
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	460b      	mov	r3, r1
 8004528:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	887a      	ldrh	r2, [r7, #2]
 8004530:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e267      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d075      	beq.n	8004662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004576:	4b88      	ldr	r3, [pc, #544]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	2b04      	cmp	r3, #4
 8004580:	d00c      	beq.n	800459c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004582:	4b85      	ldr	r3, [pc, #532]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800458a:	2b08      	cmp	r3, #8
 800458c:	d112      	bne.n	80045b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458e:	4b82      	ldr	r3, [pc, #520]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800459a:	d10b      	bne.n	80045b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459c:	4b7e      	ldr	r3, [pc, #504]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d05b      	beq.n	8004660 <HAL_RCC_OscConfig+0x108>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d157      	bne.n	8004660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e242      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045bc:	d106      	bne.n	80045cc <HAL_RCC_OscConfig+0x74>
 80045be:	4b76      	ldr	r3, [pc, #472]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a75      	ldr	r2, [pc, #468]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e01d      	b.n	8004608 <HAL_RCC_OscConfig+0xb0>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x98>
 80045d6:	4b70      	ldr	r3, [pc, #448]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a6f      	ldr	r2, [pc, #444]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	4b6d      	ldr	r3, [pc, #436]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a6c      	ldr	r2, [pc, #432]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	e00b      	b.n	8004608 <HAL_RCC_OscConfig+0xb0>
 80045f0:	4b69      	ldr	r3, [pc, #420]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a68      	ldr	r2, [pc, #416]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4b66      	ldr	r3, [pc, #408]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a65      	ldr	r2, [pc, #404]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d013      	beq.n	8004638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004610:	f7fd faf0 	bl	8001bf4 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004618:	f7fd faec 	bl	8001bf4 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	; 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e207      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462a:	4b5b      	ldr	r3, [pc, #364]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0xc0>
 8004636:	e014      	b.n	8004662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7fd fadc 	bl	8001bf4 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004640:	f7fd fad8 	bl	8001bf4 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b64      	cmp	r3, #100	; 0x64
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e1f3      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004652:	4b51      	ldr	r3, [pc, #324]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0xe8>
 800465e:	e000      	b.n	8004662 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d063      	beq.n	8004736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800466e:	4b4a      	ldr	r3, [pc, #296]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00b      	beq.n	8004692 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800467a:	4b47      	ldr	r3, [pc, #284]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004682:	2b08      	cmp	r3, #8
 8004684:	d11c      	bne.n	80046c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004686:	4b44      	ldr	r3, [pc, #272]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d116      	bne.n	80046c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004692:	4b41      	ldr	r3, [pc, #260]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <HAL_RCC_OscConfig+0x152>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d001      	beq.n	80046aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e1c7      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046aa:	4b3b      	ldr	r3, [pc, #236]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4937      	ldr	r1, [pc, #220]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046be:	e03a      	b.n	8004736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d020      	beq.n	800470a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c8:	4b34      	ldr	r3, [pc, #208]	; (800479c <HAL_RCC_OscConfig+0x244>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7fd fa91 	bl	8001bf4 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d6:	f7fd fa8d 	bl	8001bf4 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e1a8      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e8:	4b2b      	ldr	r3, [pc, #172]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f4:	4b28      	ldr	r3, [pc, #160]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	4925      	ldr	r1, [pc, #148]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 8004704:	4313      	orrs	r3, r2
 8004706:	600b      	str	r3, [r1, #0]
 8004708:	e015      	b.n	8004736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800470a:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_RCC_OscConfig+0x244>)
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fd fa70 	bl	8001bf4 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004718:	f7fd fa6c 	bl	8001bf4 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e187      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800472a:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d036      	beq.n	80047b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d016      	beq.n	8004778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800474a:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <HAL_RCC_OscConfig+0x248>)
 800474c:	2201      	movs	r2, #1
 800474e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fd fa50 	bl	8001bf4 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004758:	f7fd fa4c 	bl	8001bf4 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e167      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800476a:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_RCC_OscConfig+0x240>)
 800476c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x200>
 8004776:	e01b      	b.n	80047b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004778:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <HAL_RCC_OscConfig+0x248>)
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477e:	f7fd fa39 	bl	8001bf4 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004784:	e00e      	b.n	80047a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004786:	f7fd fa35 	bl	8001bf4 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d907      	bls.n	80047a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e150      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
 8004798:	40023800 	.word	0x40023800
 800479c:	42470000 	.word	0x42470000
 80047a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a4:	4b88      	ldr	r3, [pc, #544]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80047a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1ea      	bne.n	8004786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 8097 	beq.w	80048ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047be:	2300      	movs	r3, #0
 80047c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c2:	4b81      	ldr	r3, [pc, #516]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10f      	bne.n	80047ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	4b7d      	ldr	r3, [pc, #500]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	4a7c      	ldr	r2, [pc, #496]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80047d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047dc:	6413      	str	r3, [r2, #64]	; 0x40
 80047de:	4b7a      	ldr	r3, [pc, #488]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ea:	2301      	movs	r3, #1
 80047ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ee:	4b77      	ldr	r3, [pc, #476]	; (80049cc <HAL_RCC_OscConfig+0x474>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d118      	bne.n	800482c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047fa:	4b74      	ldr	r3, [pc, #464]	; (80049cc <HAL_RCC_OscConfig+0x474>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a73      	ldr	r2, [pc, #460]	; (80049cc <HAL_RCC_OscConfig+0x474>)
 8004800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004806:	f7fd f9f5 	bl	8001bf4 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480e:	f7fd f9f1 	bl	8001bf4 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e10c      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004820:	4b6a      	ldr	r3, [pc, #424]	; (80049cc <HAL_RCC_OscConfig+0x474>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d106      	bne.n	8004842 <HAL_RCC_OscConfig+0x2ea>
 8004834:	4b64      	ldr	r3, [pc, #400]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004838:	4a63      	ldr	r2, [pc, #396]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	6713      	str	r3, [r2, #112]	; 0x70
 8004840:	e01c      	b.n	800487c <HAL_RCC_OscConfig+0x324>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b05      	cmp	r3, #5
 8004848:	d10c      	bne.n	8004864 <HAL_RCC_OscConfig+0x30c>
 800484a:	4b5f      	ldr	r3, [pc, #380]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	4a5e      	ldr	r2, [pc, #376]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004850:	f043 0304 	orr.w	r3, r3, #4
 8004854:	6713      	str	r3, [r2, #112]	; 0x70
 8004856:	4b5c      	ldr	r3, [pc, #368]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4a5b      	ldr	r2, [pc, #364]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6713      	str	r3, [r2, #112]	; 0x70
 8004862:	e00b      	b.n	800487c <HAL_RCC_OscConfig+0x324>
 8004864:	4b58      	ldr	r3, [pc, #352]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004868:	4a57      	ldr	r2, [pc, #348]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800486a:	f023 0301 	bic.w	r3, r3, #1
 800486e:	6713      	str	r3, [r2, #112]	; 0x70
 8004870:	4b55      	ldr	r3, [pc, #340]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004874:	4a54      	ldr	r2, [pc, #336]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004876:	f023 0304 	bic.w	r3, r3, #4
 800487a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d015      	beq.n	80048b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004884:	f7fd f9b6 	bl	8001bf4 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800488c:	f7fd f9b2 	bl	8001bf4 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	; 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e0cb      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a2:	4b49      	ldr	r3, [pc, #292]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0ee      	beq.n	800488c <HAL_RCC_OscConfig+0x334>
 80048ae:	e014      	b.n	80048da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b0:	f7fd f9a0 	bl	8001bf4 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b8:	f7fd f99c 	bl	8001bf4 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e0b5      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ce:	4b3e      	ldr	r3, [pc, #248]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80048d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1ee      	bne.n	80048b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048da:	7dfb      	ldrb	r3, [r7, #23]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d105      	bne.n	80048ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e0:	4b39      	ldr	r3, [pc, #228]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	4a38      	ldr	r2, [pc, #224]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80048e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 80a1 	beq.w	8004a38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048f6:	4b34      	ldr	r3, [pc, #208]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 030c 	and.w	r3, r3, #12
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d05c      	beq.n	80049bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d141      	bne.n	800498e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490a:	4b31      	ldr	r3, [pc, #196]	; (80049d0 <HAL_RCC_OscConfig+0x478>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004910:	f7fd f970 	bl	8001bf4 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004918:	f7fd f96c 	bl	8001bf4 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e087      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492a:	4b27      	ldr	r3, [pc, #156]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69da      	ldr	r2, [r3, #28]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	019b      	lsls	r3, r3, #6
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	3b01      	subs	r3, #1
 8004950:	041b      	lsls	r3, r3, #16
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	061b      	lsls	r3, r3, #24
 800495a:	491b      	ldr	r1, [pc, #108]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 800495c:	4313      	orrs	r3, r2
 800495e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004960:	4b1b      	ldr	r3, [pc, #108]	; (80049d0 <HAL_RCC_OscConfig+0x478>)
 8004962:	2201      	movs	r2, #1
 8004964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004966:	f7fd f945 	bl	8001bf4 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496e:	f7fd f941 	bl	8001bf4 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e05c      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004980:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x416>
 800498c:	e054      	b.n	8004a38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800498e:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <HAL_RCC_OscConfig+0x478>)
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004994:	f7fd f92e 	bl	8001bf4 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800499c:	f7fd f92a 	bl	8001bf4 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e045      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_RCC_OscConfig+0x470>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x444>
 80049ba:	e03d      	b.n	8004a38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d107      	bne.n	80049d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e038      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
 80049c8:	40023800 	.word	0x40023800
 80049cc:	40007000 	.word	0x40007000
 80049d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049d4:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <HAL_RCC_OscConfig+0x4ec>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d028      	beq.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d121      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d11a      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a04:	4013      	ands	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d111      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d107      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40023800 	.word	0x40023800

08004a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0cc      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a5c:	4b68      	ldr	r3, [pc, #416]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d90c      	bls.n	8004a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6a:	4b65      	ldr	r3, [pc, #404]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a72:	4b63      	ldr	r3, [pc, #396]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0b8      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d020      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a9c:	4b59      	ldr	r3, [pc, #356]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	4a58      	ldr	r2, [pc, #352]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ab4:	4b53      	ldr	r3, [pc, #332]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	4a52      	ldr	r2, [pc, #328]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac0:	4b50      	ldr	r3, [pc, #320]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	494d      	ldr	r1, [pc, #308]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d044      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d107      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae6:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d119      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e07f      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d003      	beq.n	8004b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b06:	4b3f      	ldr	r3, [pc, #252]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e06f      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b16:	4b3b      	ldr	r3, [pc, #236]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e067      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b26:	4b37      	ldr	r3, [pc, #220]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f023 0203 	bic.w	r2, r3, #3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4934      	ldr	r1, [pc, #208]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b38:	f7fd f85c 	bl	8001bf4 <HAL_GetTick>
 8004b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3e:	e00a      	b.n	8004b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b40:	f7fd f858 	bl	8001bf4 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e04f      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b56:	4b2b      	ldr	r3, [pc, #172]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 020c 	and.w	r2, r3, #12
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d1eb      	bne.n	8004b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b68:	4b25      	ldr	r3, [pc, #148]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d20c      	bcs.n	8004b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b76:	4b22      	ldr	r3, [pc, #136]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7e:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e032      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b9c:	4b19      	ldr	r3, [pc, #100]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4916      	ldr	r1, [pc, #88]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bba:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	490e      	ldr	r1, [pc, #56]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bce:	f000 f821 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	091b      	lsrs	r3, r3, #4
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	490a      	ldr	r1, [pc, #40]	; (8004c08 <HAL_RCC_ClockConfig+0x1c0>)
 8004be0:	5ccb      	ldrb	r3, [r1, r3]
 8004be2:	fa22 f303 	lsr.w	r3, r2, r3
 8004be6:	4a09      	ldr	r2, [pc, #36]	; (8004c0c <HAL_RCC_ClockConfig+0x1c4>)
 8004be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fc ffbc 	bl	8001b6c <HAL_InitTick>

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40023c00 	.word	0x40023c00
 8004c04:	40023800 	.word	0x40023800
 8004c08:	0800a35c 	.word	0x0800a35c
 8004c0c:	20000000 	.word	0x20000000
 8004c10:	2000004c 	.word	0x2000004c

08004c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c18:	b094      	sub	sp, #80	; 0x50
 8004c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c20:	2300      	movs	r3, #0
 8004c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c24:	2300      	movs	r3, #0
 8004c26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c2c:	4b79      	ldr	r3, [pc, #484]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 030c 	and.w	r3, r3, #12
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d00d      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0x40>
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	f200 80e1 	bhi.w	8004e00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <HAL_RCC_GetSysClockFreq+0x34>
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d003      	beq.n	8004c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c46:	e0db      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c48:	4b73      	ldr	r3, [pc, #460]	; (8004e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c4c:	e0db      	b.n	8004e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c4e:	4b73      	ldr	r3, [pc, #460]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x208>)
 8004c50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c52:	e0d8      	b.n	8004e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c54:	4b6f      	ldr	r3, [pc, #444]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c5e:	4b6d      	ldr	r3, [pc, #436]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d063      	beq.n	8004d32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c6a:	4b6a      	ldr	r3, [pc, #424]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	099b      	lsrs	r3, r3, #6
 8004c70:	2200      	movs	r2, #0
 8004c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c7e:	2300      	movs	r3, #0
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
 8004c82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c86:	4622      	mov	r2, r4
 8004c88:	462b      	mov	r3, r5
 8004c8a:	f04f 0000 	mov.w	r0, #0
 8004c8e:	f04f 0100 	mov.w	r1, #0
 8004c92:	0159      	lsls	r1, r3, #5
 8004c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c98:	0150      	lsls	r0, r2, #5
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	1a51      	subs	r1, r2, r1
 8004ca2:	6139      	str	r1, [r7, #16]
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cb8:	4659      	mov	r1, fp
 8004cba:	018b      	lsls	r3, r1, #6
 8004cbc:	4651      	mov	r1, sl
 8004cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cc2:	4651      	mov	r1, sl
 8004cc4:	018a      	lsls	r2, r1, #6
 8004cc6:	4651      	mov	r1, sl
 8004cc8:	ebb2 0801 	subs.w	r8, r2, r1
 8004ccc:	4659      	mov	r1, fp
 8004cce:	eb63 0901 	sbc.w	r9, r3, r1
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ce6:	4690      	mov	r8, r2
 8004ce8:	4699      	mov	r9, r3
 8004cea:	4623      	mov	r3, r4
 8004cec:	eb18 0303 	adds.w	r3, r8, r3
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	462b      	mov	r3, r5
 8004cf4:	eb49 0303 	adc.w	r3, r9, r3
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d06:	4629      	mov	r1, r5
 8004d08:	024b      	lsls	r3, r1, #9
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d10:	4621      	mov	r1, r4
 8004d12:	024a      	lsls	r2, r1, #9
 8004d14:	4610      	mov	r0, r2
 8004d16:	4619      	mov	r1, r3
 8004d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d24:	f7fb fa62 	bl	80001ec <__aeabi_uldivmod>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d30:	e058      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d32:	4b38      	ldr	r3, [pc, #224]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	099b      	lsrs	r3, r3, #6
 8004d38:	2200      	movs	r2, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d42:	623b      	str	r3, [r7, #32]
 8004d44:	2300      	movs	r3, #0
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
 8004d48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	464b      	mov	r3, r9
 8004d50:	f04f 0000 	mov.w	r0, #0
 8004d54:	f04f 0100 	mov.w	r1, #0
 8004d58:	0159      	lsls	r1, r3, #5
 8004d5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d5e:	0150      	lsls	r0, r2, #5
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4641      	mov	r1, r8
 8004d66:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d84:	ebb2 040a 	subs.w	r4, r2, sl
 8004d88:	eb63 050b 	sbc.w	r5, r3, fp
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	00eb      	lsls	r3, r5, #3
 8004d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d9a:	00e2      	lsls	r2, r4, #3
 8004d9c:	4614      	mov	r4, r2
 8004d9e:	461d      	mov	r5, r3
 8004da0:	4643      	mov	r3, r8
 8004da2:	18e3      	adds	r3, r4, r3
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	464b      	mov	r3, r9
 8004da8:	eb45 0303 	adc.w	r3, r5, r3
 8004dac:	607b      	str	r3, [r7, #4]
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dba:	4629      	mov	r1, r5
 8004dbc:	028b      	lsls	r3, r1, #10
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	028a      	lsls	r2, r1, #10
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dce:	2200      	movs	r2, #0
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	61fa      	str	r2, [r7, #28]
 8004dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dd8:	f7fb fa08 	bl	80001ec <__aeabi_uldivmod>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4613      	mov	r3, r2
 8004de2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004de4:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	0c1b      	lsrs	r3, r3, #16
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	3301      	adds	r3, #1
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004df4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dfe:	e002      	b.n	8004e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3750      	adds	r7, #80	; 0x50
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e12:	bf00      	nop
 8004e14:	40023800 	.word	0x40023800
 8004e18:	00f42400 	.word	0x00f42400
 8004e1c:	007a1200 	.word	0x007a1200

08004e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e24:	4b03      	ldr	r3, [pc, #12]	; (8004e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e26:	681b      	ldr	r3, [r3, #0]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000000 	.word	0x20000000

08004e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10b      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d105      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d075      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e6c:	4b91      	ldr	r3, [pc, #580]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e72:	f7fc febf 	bl	8001bf4 <HAL_GetTick>
 8004e76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e78:	e008      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e7a:	f7fc febb 	bl	8001bf4 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e189      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e8c:	4b8a      	ldr	r3, [pc, #552]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f0      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d009      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	019a      	lsls	r2, r3, #6
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	071b      	lsls	r3, r3, #28
 8004eb0:	4981      	ldr	r1, [pc, #516]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01f      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ec4:	4b7c      	ldr	r3, [pc, #496]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eca:	0f1b      	lsrs	r3, r3, #28
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	019a      	lsls	r2, r3, #6
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	061b      	lsls	r3, r3, #24
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	071b      	lsls	r3, r3, #28
 8004ee4:	4974      	ldr	r1, [pc, #464]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004eec:	4b72      	ldr	r3, [pc, #456]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ef2:	f023 021f 	bic.w	r2, r3, #31
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	496e      	ldr	r1, [pc, #440]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00d      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	019a      	lsls	r2, r3, #6
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	061b      	lsls	r3, r3, #24
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	071b      	lsls	r3, r3, #28
 8004f24:	4964      	ldr	r1, [pc, #400]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f2c:	4b61      	ldr	r3, [pc, #388]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004f2e:	2201      	movs	r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f32:	f7fc fe5f 	bl	8001bf4 <HAL_GetTick>
 8004f36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f38:	e008      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f3a:	f7fc fe5b 	bl	8001bf4 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e129      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f4c:	4b5a      	ldr	r3, [pc, #360]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d105      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d079      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f70:	4b52      	ldr	r3, [pc, #328]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f76:	f7fc fe3d 	bl	8001bf4 <HAL_GetTick>
 8004f7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004f7e:	f7fc fe39 	bl	8001bf4 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e107      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f90:	4b49      	ldr	r3, [pc, #292]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9c:	d0ef      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d020      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004faa:	4b43      	ldr	r3, [pc, #268]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb0:	0f1b      	lsrs	r3, r3, #28
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	019a      	lsls	r2, r3, #6
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	061b      	lsls	r3, r3, #24
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	071b      	lsls	r3, r3, #28
 8004fca:	493b      	ldr	r1, [pc, #236]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004fd2:	4b39      	ldr	r3, [pc, #228]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	4934      	ldr	r1, [pc, #208]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01e      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ff8:	4b2f      	ldr	r3, [pc, #188]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffe:	0e1b      	lsrs	r3, r3, #24
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	019a      	lsls	r2, r3, #6
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	061b      	lsls	r3, r3, #24
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	071b      	lsls	r3, r3, #28
 8005018:	4927      	ldr	r1, [pc, #156]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005020:	4b25      	ldr	r3, [pc, #148]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005026:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	4922      	ldr	r1, [pc, #136]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005036:	4b21      	ldr	r3, [pc, #132]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005038:	2201      	movs	r2, #1
 800503a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800503c:	f7fc fdda 	bl	8001bf4 <HAL_GetTick>
 8005040:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005044:	f7fc fdd6 	bl	8001bf4 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e0a4      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005056:	4b18      	ldr	r3, [pc, #96]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800505e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005062:	d1ef      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 808b 	beq.w	8005188 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	4a0f      	ldr	r2, [pc, #60]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800507c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005080:	6413      	str	r3, [r2, #64]	; 0x40
 8005082:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800508e:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a0b      	ldr	r2, [pc, #44]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005098:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800509a:	f7fc fdab 	bl	8001bf4 <HAL_GetTick>
 800509e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050a0:	e010      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050a2:	f7fc fda7 	bl	8001bf4 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d909      	bls.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e075      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80050b4:	42470068 	.word	0x42470068
 80050b8:	40023800 	.word	0x40023800
 80050bc:	42470070 	.word	0x42470070
 80050c0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050c4:	4b38      	ldr	r3, [pc, #224]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0e8      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050d0:	4b36      	ldr	r3, [pc, #216]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d02f      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d028      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ee:	4b2f      	ldr	r3, [pc, #188]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050f8:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80050fa:	2201      	movs	r2, #1
 80050fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050fe:	4b2c      	ldr	r3, [pc, #176]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005104:	4a29      	ldr	r2, [pc, #164]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800510a:	4b28      	ldr	r3, [pc, #160]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b01      	cmp	r3, #1
 8005114:	d114      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005116:	f7fc fd6d 	bl	8001bf4 <HAL_GetTick>
 800511a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511c:	e00a      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511e:	f7fc fd69 	bl	8001bf4 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f241 3288 	movw	r2, #5000	; 0x1388
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e035      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005134:	4b1d      	ldr	r3, [pc, #116]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ee      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800514c:	d10d      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800514e:	4b17      	ldr	r3, [pc, #92]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800515e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005162:	4912      	ldr	r1, [pc, #72]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005164:	4313      	orrs	r3, r2
 8005166:	608b      	str	r3, [r1, #8]
 8005168:	e005      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800516a:	4b10      	ldr	r3, [pc, #64]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	4a0f      	ldr	r2, [pc, #60]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005170:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005174:	6093      	str	r3, [r2, #8]
 8005176:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005178:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005182:	490a      	ldr	r1, [pc, #40]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005184:	4313      	orrs	r3, r2
 8005186:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	2b00      	cmp	r3, #0
 8005192:	d004      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800519a:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800519c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40007000 	.word	0x40007000
 80051ac:	40023800 	.word	0x40023800
 80051b0:	42470e40 	.word	0x42470e40
 80051b4:	424711e0 	.word	0x424711e0

080051b8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e025      	b.n	8005218 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f81d 	bl	8005220 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3304      	adds	r3, #4
 80051f6:	4619      	mov	r1, r3
 80051f8:	4610      	mov	r0, r2
 80051fa:	f000 fe6b 	bl	8005ed4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	461a      	mov	r2, r3
 8005208:	6839      	ldr	r1, [r7, #0]
 800520a:	f000 fec0 	bl	8005f8e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005246:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005248:	7dfb      	ldrb	r3, [r7, #23]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d101      	bne.n	8005252 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800524e:	2302      	movs	r3, #2
 8005250:	e021      	b.n	8005296 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005252:	7dfb      	ldrb	r3, [r7, #23]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d002      	beq.n	800525e <HAL_SDRAM_SendCommand+0x2a>
 8005258:	7dfb      	ldrb	r3, [r7, #23]
 800525a:	2b05      	cmp	r3, #5
 800525c:	d118      	bne.n	8005290 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2202      	movs	r2, #2
 8005262:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	68b9      	ldr	r1, [r7, #8]
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fef6 	bl	8006060 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d104      	bne.n	8005286 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2205      	movs	r2, #5
 8005280:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005284:	e006      	b.n	8005294 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800528e:	e001      	b.n	8005294 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e000      	b.n	8005296 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d101      	bne.n	80052b8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80052b4:	2302      	movs	r3, #2
 80052b6:	e016      	b.n	80052e6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d10f      	bne.n	80052e4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 ff01 	bl	80060da <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	e000      	b.n	80052e6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e07b      	b.n	80053f8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	2b00      	cmp	r3, #0
 8005306:	d108      	bne.n	800531a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005310:	d009      	beq.n	8005326 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	61da      	str	r2, [r3, #28]
 8005318:	e005      	b.n	8005326 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d106      	bne.n	8005346 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f885 	bl	8005450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2202      	movs	r2, #2
 800534a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800535c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053aa:	ea42 0103 	orr.w	r1, r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	0c1b      	lsrs	r3, r3, #16
 80053c4:	f003 0104 	and.w	r1, r3, #4
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	f003 0210 	and.w	r2, r3, #16
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69da      	ldr	r2, [r3, #28]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e01a      	b.n	8005448 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2202      	movs	r2, #2
 8005416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005428:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f81a 	bl	8005464 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	4613      	mov	r3, r2
 8005486:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005492:	2b01      	cmp	r3, #1
 8005494:	d101      	bne.n	800549a <HAL_SPI_Transmit+0x22>
 8005496:	2302      	movs	r3, #2
 8005498:	e126      	b.n	80056e8 <HAL_SPI_Transmit+0x270>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054a2:	f7fc fba7 	bl	8001bf4 <HAL_GetTick>
 80054a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054a8:	88fb      	ldrh	r3, [r7, #6]
 80054aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d002      	beq.n	80054be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054b8:	2302      	movs	r3, #2
 80054ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054bc:	e10b      	b.n	80056d6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <HAL_SPI_Transmit+0x52>
 80054c4:	88fb      	ldrh	r3, [r7, #6]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d102      	bne.n	80054d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054ce:	e102      	b.n	80056d6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2203      	movs	r2, #3
 80054d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	88fa      	ldrh	r2, [r7, #6]
 80054e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	88fa      	ldrh	r2, [r7, #6]
 80054ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005516:	d10f      	bne.n	8005538 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005526:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005536:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b40      	cmp	r3, #64	; 0x40
 8005544:	d007      	beq.n	8005556 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005554:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800555e:	d14b      	bne.n	80055f8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_SPI_Transmit+0xf6>
 8005568:	8afb      	ldrh	r3, [r7, #22]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d13e      	bne.n	80055ec <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	881a      	ldrh	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557e:	1c9a      	adds	r2, r3, #2
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005592:	e02b      	b.n	80055ec <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d112      	bne.n	80055c8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a6:	881a      	ldrh	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b2:	1c9a      	adds	r2, r3, #2
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055bc:	b29b      	uxth	r3, r3
 80055be:	3b01      	subs	r3, #1
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80055c6:	e011      	b.n	80055ec <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055c8:	f7fc fb14 	bl	8001bf4 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d803      	bhi.n	80055e0 <HAL_SPI_Transmit+0x168>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d102      	bne.n	80055e6 <HAL_SPI_Transmit+0x16e>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d102      	bne.n	80055ec <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055ea:	e074      	b.n	80056d6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1ce      	bne.n	8005594 <HAL_SPI_Transmit+0x11c>
 80055f6:	e04c      	b.n	8005692 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <HAL_SPI_Transmit+0x18e>
 8005600:	8afb      	ldrh	r3, [r7, #22]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d140      	bne.n	8005688 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	330c      	adds	r3, #12
 8005610:	7812      	ldrb	r2, [r2, #0]
 8005612:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800562c:	e02c      	b.n	8005688 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b02      	cmp	r3, #2
 800563a:	d113      	bne.n	8005664 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	330c      	adds	r3, #12
 8005646:	7812      	ldrb	r2, [r2, #0]
 8005648:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	86da      	strh	r2, [r3, #54]	; 0x36
 8005662:	e011      	b.n	8005688 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005664:	f7fc fac6 	bl	8001bf4 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d803      	bhi.n	800567c <HAL_SPI_Transmit+0x204>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567a:	d102      	bne.n	8005682 <HAL_SPI_Transmit+0x20a>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d102      	bne.n	8005688 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005686:	e026      	b.n	80056d6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1cd      	bne.n	800562e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	6839      	ldr	r1, [r7, #0]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 fbda 	bl	8005e50 <SPI_EndRxTxTransaction>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2220      	movs	r2, #32
 80056a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10a      	bne.n	80056c6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056b0:	2300      	movs	r3, #0
 80056b2:	613b      	str	r3, [r7, #16]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	613b      	str	r3, [r7, #16]
 80056c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	77fb      	strb	r3, [r7, #31]
 80056d2:	e000      	b.n	80056d6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80056d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3720      	adds	r7, #32
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	4613      	mov	r3, r2
 80056fe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800570c:	d112      	bne.n	8005734 <HAL_SPI_Receive+0x44>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10e      	bne.n	8005734 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2204      	movs	r2, #4
 800571a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800571e:	88fa      	ldrh	r2, [r7, #6]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	4613      	mov	r3, r2
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f8f1 	bl	8005912 <HAL_SPI_TransmitReceive>
 8005730:	4603      	mov	r3, r0
 8005732:	e0ea      	b.n	800590a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_SPI_Receive+0x52>
 800573e:	2302      	movs	r3, #2
 8005740:	e0e3      	b.n	800590a <HAL_SPI_Receive+0x21a>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800574a:	f7fc fa53 	bl	8001bf4 <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	d002      	beq.n	8005762 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800575c:	2302      	movs	r3, #2
 800575e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005760:	e0ca      	b.n	80058f8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_SPI_Receive+0x7e>
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d102      	bne.n	8005774 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005772:	e0c1      	b.n	80058f8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2204      	movs	r2, #4
 8005778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	88fa      	ldrh	r2, [r7, #6]
 800578c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	88fa      	ldrh	r2, [r7, #6]
 8005792:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ba:	d10f      	bne.n	80057dc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057da:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b40      	cmp	r3, #64	; 0x40
 80057e8:	d007      	beq.n	80057fa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057f8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d162      	bne.n	80058c8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005802:	e02e      	b.n	8005862 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b01      	cmp	r3, #1
 8005810:	d115      	bne.n	800583e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f103 020c 	add.w	r2, r3, #12
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	7812      	ldrb	r2, [r2, #0]
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005832:	b29b      	uxth	r3, r3
 8005834:	3b01      	subs	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800583c:	e011      	b.n	8005862 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800583e:	f7fc f9d9 	bl	8001bf4 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d803      	bhi.n	8005856 <HAL_SPI_Receive+0x166>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005854:	d102      	bne.n	800585c <HAL_SPI_Receive+0x16c>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d102      	bne.n	8005862 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005860:	e04a      	b.n	80058f8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1cb      	bne.n	8005804 <HAL_SPI_Receive+0x114>
 800586c:	e031      	b.n	80058d2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b01      	cmp	r3, #1
 800587a:	d113      	bne.n	80058a4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005886:	b292      	uxth	r2, r2
 8005888:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	1c9a      	adds	r2, r3, #2
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058a2:	e011      	b.n	80058c8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058a4:	f7fc f9a6 	bl	8001bf4 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d803      	bhi.n	80058bc <HAL_SPI_Receive+0x1cc>
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	d102      	bne.n	80058c2 <HAL_SPI_Receive+0x1d2>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d102      	bne.n	80058c8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058c6:	e017      	b.n	80058f8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1cd      	bne.n	800586e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 fa54 	bl	8005d84 <SPI_EndRxTransaction>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2220      	movs	r2, #32
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	75fb      	strb	r3, [r7, #23]
 80058f4:	e000      	b.n	80058f8 <HAL_SPI_Receive+0x208>
  }

error :
 80058f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005908:	7dfb      	ldrb	r3, [r7, #23]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b08c      	sub	sp, #48	; 0x30
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	607a      	str	r2, [r7, #4]
 800591e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005920:	2301      	movs	r3, #1
 8005922:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x26>
 8005934:	2302      	movs	r3, #2
 8005936:	e18a      	b.n	8005c4e <HAL_SPI_TransmitReceive+0x33c>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005940:	f7fc f958 	bl	8001bf4 <HAL_GetTick>
 8005944:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800594c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005956:	887b      	ldrh	r3, [r7, #2]
 8005958:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800595a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800595e:	2b01      	cmp	r3, #1
 8005960:	d00f      	beq.n	8005982 <HAL_SPI_TransmitReceive+0x70>
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005968:	d107      	bne.n	800597a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d103      	bne.n	800597a <HAL_SPI_TransmitReceive+0x68>
 8005972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005976:	2b04      	cmp	r3, #4
 8005978:	d003      	beq.n	8005982 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800597a:	2302      	movs	r3, #2
 800597c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005980:	e15b      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <HAL_SPI_TransmitReceive+0x82>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_SPI_TransmitReceive+0x82>
 800598e:	887b      	ldrh	r3, [r7, #2]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d103      	bne.n	800599c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800599a:	e14e      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d003      	beq.n	80059b0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2205      	movs	r2, #5
 80059ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	887a      	ldrh	r2, [r7, #2]
 80059c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	887a      	ldrh	r2, [r7, #2]
 80059c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	887a      	ldrh	r2, [r7, #2]
 80059d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	887a      	ldrh	r2, [r7, #2]
 80059d8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f0:	2b40      	cmp	r3, #64	; 0x40
 80059f2:	d007      	beq.n	8005a04 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a0c:	d178      	bne.n	8005b00 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x10a>
 8005a16:	8b7b      	ldrh	r3, [r7, #26]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d166      	bne.n	8005aea <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	881a      	ldrh	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	1c9a      	adds	r2, r3, #2
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a40:	e053      	b.n	8005aea <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d11b      	bne.n	8005a88 <HAL_SPI_TransmitReceive+0x176>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d016      	beq.n	8005a88 <HAL_SPI_TransmitReceive+0x176>
 8005a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d113      	bne.n	8005a88 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	881a      	ldrh	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	1c9a      	adds	r2, r3, #2
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d119      	bne.n	8005aca <HAL_SPI_TransmitReceive+0x1b8>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d014      	beq.n	8005aca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	b292      	uxth	r2, r2
 8005aac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	1c9a      	adds	r2, r3, #2
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005aca:	f7fc f893 	bl	8001bf4 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d807      	bhi.n	8005aea <HAL_SPI_TransmitReceive+0x1d8>
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae0:	d003      	beq.n	8005aea <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ae8:	e0a7      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1a6      	bne.n	8005a42 <HAL_SPI_TransmitReceive+0x130>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1a1      	bne.n	8005a42 <HAL_SPI_TransmitReceive+0x130>
 8005afe:	e07c      	b.n	8005bfa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <HAL_SPI_TransmitReceive+0x1fc>
 8005b08:	8b7b      	ldrh	r3, [r7, #26]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d16b      	bne.n	8005be6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	330c      	adds	r3, #12
 8005b18:	7812      	ldrb	r2, [r2, #0]
 8005b1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b34:	e057      	b.n	8005be6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d11c      	bne.n	8005b7e <HAL_SPI_TransmitReceive+0x26c>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d017      	beq.n	8005b7e <HAL_SPI_TransmitReceive+0x26c>
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d114      	bne.n	8005b7e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	330c      	adds	r3, #12
 8005b5e:	7812      	ldrb	r2, [r2, #0]
 8005b60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d119      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x2ae>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d014      	beq.n	8005bc0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bc0:	f7fc f818 	bl	8001bf4 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d803      	bhi.n	8005bd8 <HAL_SPI_TransmitReceive+0x2c6>
 8005bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d102      	bne.n	8005bde <HAL_SPI_TransmitReceive+0x2cc>
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d103      	bne.n	8005be6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005be4:	e029      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1a2      	bne.n	8005b36 <HAL_SPI_TransmitReceive+0x224>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d19d      	bne.n	8005b36 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f926 	bl	8005e50 <SPI_EndRxTxTransaction>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d006      	beq.n	8005c18 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2220      	movs	r2, #32
 8005c14:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c16:	e010      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10b      	bne.n	8005c38 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	e000      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3730      	adds	r7, #48	; 0x30
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c64:	b2db      	uxtb	r3, r3
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
	...

08005c74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	603b      	str	r3, [r7, #0]
 8005c80:	4613      	mov	r3, r2
 8005c82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c84:	f7fb ffb6 	bl	8001bf4 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	1a9b      	subs	r3, r3, r2
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	4413      	add	r3, r2
 8005c92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c94:	f7fb ffae 	bl	8001bf4 <HAL_GetTick>
 8005c98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c9a:	4b39      	ldr	r3, [pc, #228]	; (8005d80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	015b      	lsls	r3, r3, #5
 8005ca0:	0d1b      	lsrs	r3, r3, #20
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	fb02 f303 	mul.w	r3, r2, r3
 8005ca8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005caa:	e054      	b.n	8005d56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb2:	d050      	beq.n	8005d56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cb4:	f7fb ff9e 	bl	8001bf4 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d902      	bls.n	8005cca <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d13d      	bne.n	8005d46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ce2:	d111      	bne.n	8005d08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cec:	d004      	beq.n	8005cf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf6:	d107      	bne.n	8005d08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d10:	d10f      	bne.n	8005d32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e017      	b.n	8005d76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	bf0c      	ite	eq
 8005d66:	2301      	moveq	r3, #1
 8005d68:	2300      	movne	r3, #0
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d19b      	bne.n	8005cac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3720      	adds	r7, #32
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	20000000 	.word	0x20000000

08005d84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d98:	d111      	bne.n	8005dbe <SPI_EndRxTransaction+0x3a>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da2:	d004      	beq.n	8005dae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dac:	d107      	bne.n	8005dbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dbc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dc6:	d12a      	bne.n	8005e1e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd0:	d012      	beq.n	8005df8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2180      	movs	r1, #128	; 0x80
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7ff ff49 	bl	8005c74 <SPI_WaitFlagStateUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d02d      	beq.n	8005e44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dec:	f043 0220 	orr.w	r2, r3, #32
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e026      	b.n	8005e46 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2101      	movs	r1, #1
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f7ff ff36 	bl	8005c74 <SPI_WaitFlagStateUntilTimeout>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d01a      	beq.n	8005e44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e12:	f043 0220 	orr.w	r2, r3, #32
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e013      	b.n	8005e46 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2200      	movs	r2, #0
 8005e26:	2101      	movs	r1, #1
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f7ff ff23 	bl	8005c74 <SPI_WaitFlagStateUntilTimeout>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d007      	beq.n	8005e44 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e38:	f043 0220 	orr.w	r2, r3, #32
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e000      	b.n	8005e46 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b088      	sub	sp, #32
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e5c:	4b1b      	ldr	r3, [pc, #108]	; (8005ecc <SPI_EndRxTxTransaction+0x7c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1b      	ldr	r2, [pc, #108]	; (8005ed0 <SPI_EndRxTxTransaction+0x80>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	0d5b      	lsrs	r3, r3, #21
 8005e68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e6c:	fb02 f303 	mul.w	r3, r2, r3
 8005e70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e7a:	d112      	bne.n	8005ea2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2200      	movs	r2, #0
 8005e84:	2180      	movs	r1, #128	; 0x80
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f7ff fef4 	bl	8005c74 <SPI_WaitFlagStateUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d016      	beq.n	8005ec0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e96:	f043 0220 	orr.w	r2, r3, #32
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e00f      	b.n	8005ec2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00a      	beq.n	8005ebe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb8:	2b80      	cmp	r3, #128	; 0x80
 8005eba:	d0f2      	beq.n	8005ea2 <SPI_EndRxTxTransaction+0x52>
 8005ebc:	e000      	b.n	8005ec0 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ebe:	bf00      	nop
  }

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000000 	.word	0x20000000
 8005ed0:	165e9f81 	.word	0x165e9f81

08005ed4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d123      	bne.n	8005f2e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005eee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	6851      	ldr	r1, [r2, #4]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	6892      	ldr	r2, [r2, #8]
 8005efa:	4311      	orrs	r1, r2
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	68d2      	ldr	r2, [r2, #12]
 8005f00:	4311      	orrs	r1, r2
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	6912      	ldr	r2, [r2, #16]
 8005f06:	4311      	orrs	r1, r2
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	6952      	ldr	r2, [r2, #20]
 8005f0c:	4311      	orrs	r1, r2
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	6992      	ldr	r2, [r2, #24]
 8005f12:	4311      	orrs	r1, r2
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	69d2      	ldr	r2, [r2, #28]
 8005f18:	4311      	orrs	r1, r2
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	6a12      	ldr	r2, [r2, #32]
 8005f1e:	4311      	orrs	r1, r2
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f24:	430a      	orrs	r2, r1
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	e028      	b.n	8005f80 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	69d9      	ldr	r1, [r3, #28]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	4319      	orrs	r1, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	430b      	orrs	r3, r1
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005f54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	6851      	ldr	r1, [r2, #4]
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	6892      	ldr	r2, [r2, #8]
 8005f60:	4311      	orrs	r1, r2
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	68d2      	ldr	r2, [r2, #12]
 8005f66:	4311      	orrs	r1, r2
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	6912      	ldr	r2, [r2, #16]
 8005f6c:	4311      	orrs	r1, r2
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	6952      	ldr	r2, [r2, #20]
 8005f72:	4311      	orrs	r1, r2
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	6992      	ldr	r2, [r2, #24]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b085      	sub	sp, #20
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d128      	bne.n	8005ff2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	1e59      	subs	r1, r3, #1
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	4319      	orrs	r1, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	4319      	orrs	r1, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	031b      	lsls	r3, r3, #12
 8005fca:	4319      	orrs	r1, r3
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	041b      	lsls	r3, r3, #16
 8005fd4:	4319      	orrs	r1, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	051b      	lsls	r3, r3, #20
 8005fde:	4319      	orrs	r1, r3
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	061b      	lsls	r3, r3, #24
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	431a      	orrs	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	609a      	str	r2, [r3, #8]
 8005ff0:	e02f      	b.n	8006052 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ffa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	68d2      	ldr	r2, [r2, #12]
 8006002:	3a01      	subs	r2, #1
 8006004:	0311      	lsls	r1, r2, #12
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	6952      	ldr	r2, [r2, #20]
 800600a:	3a01      	subs	r2, #1
 800600c:	0512      	lsls	r2, r2, #20
 800600e:	430a      	orrs	r2, r1
 8006010:	431a      	orrs	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	1e59      	subs	r1, r3, #1
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	3b01      	subs	r3, #1
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	4319      	orrs	r1, r3
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	3b01      	subs	r3, #1
 8006034:	021b      	lsls	r3, r3, #8
 8006036:	4319      	orrs	r1, r3
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	3b01      	subs	r3, #1
 800603e:	041b      	lsls	r3, r3, #16
 8006040:	4319      	orrs	r1, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	3b01      	subs	r3, #1
 8006048:	061b      	lsls	r3, r3, #24
 800604a:	430b      	orrs	r3, r1
 800604c:	431a      	orrs	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	0d9b      	lsrs	r3, r3, #22
 8006076:	059b      	lsls	r3, r3, #22
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	6811      	ldr	r1, [r2, #0]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	6852      	ldr	r2, [r2, #4]
 8006080:	4311      	orrs	r1, r2
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	6892      	ldr	r2, [r2, #8]
 8006086:	3a01      	subs	r2, #1
 8006088:	0152      	lsls	r2, r2, #5
 800608a:	4311      	orrs	r1, r2
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	68d2      	ldr	r2, [r2, #12]
 8006090:	0252      	lsls	r2, r2, #9
 8006092:	430a      	orrs	r2, r1
 8006094:	431a      	orrs	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800609a:	f7fb fdab 	bl	8001bf4 <HAL_GetTick>
 800609e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80060a0:	e010      	b.n	80060c4 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d00c      	beq.n	80060c4 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <FMC_SDRAM_SendCommand+0x60>
 80060b0:	f7fb fda0 	bl	8001bf4 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d201      	bcs.n	80060c4 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e006      	b.n	80060d2 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	f003 0320 	and.w	r3, r3, #32
 80060cc:	2b20      	cmp	r3, #32
 80060ce:	d0e8      	beq.n	80060a2 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80060ec:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	0052      	lsls	r2, r2, #1
 80060f4:	431a      	orrs	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006108:	b084      	sub	sp, #16
 800610a:	b580      	push	{r7, lr}
 800610c:	b084      	sub	sp, #16
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	f107 001c 	add.w	r0, r7, #28
 8006116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	2b01      	cmp	r3, #1
 800611e:	d122      	bne.n	8006166 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800614a:	2b01      	cmp	r3, #1
 800614c:	d105      	bne.n	800615a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f001 fbee 	bl	800793c <USB_CoreReset>
 8006160:	4603      	mov	r3, r0
 8006162:	73fb      	strb	r3, [r7, #15]
 8006164:	e01a      	b.n	800619c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 fbe2 	bl	800793c <USB_CoreReset>
 8006178:	4603      	mov	r3, r0
 800617a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800617c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	639a      	str	r2, [r3, #56]	; 0x38
 800618e:	e005      	b.n	800619c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d10b      	bne.n	80061ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f043 0206 	orr.w	r2, r3, #6
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f043 0220 	orr.w	r2, r3, #32
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061c6:	b004      	add	sp, #16
 80061c8:	4770      	bx	lr
	...

080061cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	4613      	mov	r3, r2
 80061d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80061da:	79fb      	ldrb	r3, [r7, #7]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d165      	bne.n	80062ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4a41      	ldr	r2, [pc, #260]	; (80062e8 <USB_SetTurnaroundTime+0x11c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d906      	bls.n	80061f6 <USB_SetTurnaroundTime+0x2a>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4a40      	ldr	r2, [pc, #256]	; (80062ec <USB_SetTurnaroundTime+0x120>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d202      	bcs.n	80061f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80061f0:	230f      	movs	r3, #15
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	e062      	b.n	80062bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	4a3c      	ldr	r2, [pc, #240]	; (80062ec <USB_SetTurnaroundTime+0x120>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d306      	bcc.n	800620c <USB_SetTurnaroundTime+0x40>
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	4a3b      	ldr	r2, [pc, #236]	; (80062f0 <USB_SetTurnaroundTime+0x124>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d202      	bcs.n	800620c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006206:	230e      	movs	r3, #14
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	e057      	b.n	80062bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4a38      	ldr	r2, [pc, #224]	; (80062f0 <USB_SetTurnaroundTime+0x124>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d306      	bcc.n	8006222 <USB_SetTurnaroundTime+0x56>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4a37      	ldr	r2, [pc, #220]	; (80062f4 <USB_SetTurnaroundTime+0x128>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d202      	bcs.n	8006222 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800621c:	230d      	movs	r3, #13
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	e04c      	b.n	80062bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	4a33      	ldr	r2, [pc, #204]	; (80062f4 <USB_SetTurnaroundTime+0x128>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d306      	bcc.n	8006238 <USB_SetTurnaroundTime+0x6c>
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	4a32      	ldr	r2, [pc, #200]	; (80062f8 <USB_SetTurnaroundTime+0x12c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d802      	bhi.n	8006238 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006232:	230c      	movs	r3, #12
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	e041      	b.n	80062bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4a2f      	ldr	r2, [pc, #188]	; (80062f8 <USB_SetTurnaroundTime+0x12c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d906      	bls.n	800624e <USB_SetTurnaroundTime+0x82>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4a2e      	ldr	r2, [pc, #184]	; (80062fc <USB_SetTurnaroundTime+0x130>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d802      	bhi.n	800624e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006248:	230b      	movs	r3, #11
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	e036      	b.n	80062bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	4a2a      	ldr	r2, [pc, #168]	; (80062fc <USB_SetTurnaroundTime+0x130>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d906      	bls.n	8006264 <USB_SetTurnaroundTime+0x98>
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	4a29      	ldr	r2, [pc, #164]	; (8006300 <USB_SetTurnaroundTime+0x134>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d802      	bhi.n	8006264 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800625e:	230a      	movs	r3, #10
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	e02b      	b.n	80062bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	4a26      	ldr	r2, [pc, #152]	; (8006300 <USB_SetTurnaroundTime+0x134>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d906      	bls.n	800627a <USB_SetTurnaroundTime+0xae>
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4a25      	ldr	r2, [pc, #148]	; (8006304 <USB_SetTurnaroundTime+0x138>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d202      	bcs.n	800627a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006274:	2309      	movs	r3, #9
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	e020      	b.n	80062bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	4a21      	ldr	r2, [pc, #132]	; (8006304 <USB_SetTurnaroundTime+0x138>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d306      	bcc.n	8006290 <USB_SetTurnaroundTime+0xc4>
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	4a20      	ldr	r2, [pc, #128]	; (8006308 <USB_SetTurnaroundTime+0x13c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d802      	bhi.n	8006290 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800628a:	2308      	movs	r3, #8
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	e015      	b.n	80062bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	4a1d      	ldr	r2, [pc, #116]	; (8006308 <USB_SetTurnaroundTime+0x13c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d906      	bls.n	80062a6 <USB_SetTurnaroundTime+0xda>
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4a1c      	ldr	r2, [pc, #112]	; (800630c <USB_SetTurnaroundTime+0x140>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d202      	bcs.n	80062a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80062a0:	2307      	movs	r3, #7
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	e00a      	b.n	80062bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80062a6:	2306      	movs	r3, #6
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	e007      	b.n	80062bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80062ac:	79fb      	ldrb	r3, [r7, #7]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80062b2:	2309      	movs	r3, #9
 80062b4:	617b      	str	r3, [r7, #20]
 80062b6:	e001      	b.n	80062bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80062b8:	2309      	movs	r3, #9
 80062ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	029b      	lsls	r3, r3, #10
 80062d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80062d4:	431a      	orrs	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	00d8acbf 	.word	0x00d8acbf
 80062ec:	00e4e1c0 	.word	0x00e4e1c0
 80062f0:	00f42400 	.word	0x00f42400
 80062f4:	01067380 	.word	0x01067380
 80062f8:	011a499f 	.word	0x011a499f
 80062fc:	01312cff 	.word	0x01312cff
 8006300:	014ca43f 	.word	0x014ca43f
 8006304:	016e3600 	.word	0x016e3600
 8006308:	01a6ab1f 	.word	0x01a6ab1f
 800630c:	01e84800 	.word	0x01e84800

08006310 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f043 0201 	orr.w	r2, r3, #1
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f023 0201 	bic.w	r2, r3, #1
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d115      	bne.n	80063a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006382:	2001      	movs	r0, #1
 8006384:	f7fb fc42 	bl	8001c0c <HAL_Delay>
      ms++;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f001 fa45 	bl	800781e <USB_GetMode>
 8006394:	4603      	mov	r3, r0
 8006396:	2b01      	cmp	r3, #1
 8006398:	d01e      	beq.n	80063d8 <USB_SetCurrentMode+0x84>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b31      	cmp	r3, #49	; 0x31
 800639e:	d9f0      	bls.n	8006382 <USB_SetCurrentMode+0x2e>
 80063a0:	e01a      	b.n	80063d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063a2:	78fb      	ldrb	r3, [r7, #3]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d115      	bne.n	80063d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063b4:	2001      	movs	r0, #1
 80063b6:	f7fb fc29 	bl	8001c0c <HAL_Delay>
      ms++;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3301      	adds	r3, #1
 80063be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 fa2c 	bl	800781e <USB_GetMode>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <USB_SetCurrentMode+0x84>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b31      	cmp	r3, #49	; 0x31
 80063d0:	d9f0      	bls.n	80063b4 <USB_SetCurrentMode+0x60>
 80063d2:	e001      	b.n	80063d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e005      	b.n	80063e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b32      	cmp	r3, #50	; 0x32
 80063dc:	d101      	bne.n	80063e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e000      	b.n	80063e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063ec:	b084      	sub	sp, #16
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b086      	sub	sp, #24
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006406:	2300      	movs	r3, #0
 8006408:	613b      	str	r3, [r7, #16]
 800640a:	e009      	b.n	8006420 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	3340      	adds	r3, #64	; 0x40
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	2200      	movs	r2, #0
 8006418:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	3301      	adds	r3, #1
 800641e:	613b      	str	r3, [r7, #16]
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	2b0e      	cmp	r3, #14
 8006424:	d9f2      	bls.n	800640c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006428:	2b00      	cmp	r3, #0
 800642a:	d11c      	bne.n	8006466 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800643a:	f043 0302 	orr.w	r3, r3, #2
 800643e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	639a      	str	r2, [r3, #56]	; 0x38
 8006464:	e00b      	b.n	800647e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006476:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006484:	461a      	mov	r2, r3
 8006486:	2300      	movs	r3, #0
 8006488:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006490:	4619      	mov	r1, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006498:	461a      	mov	r2, r3
 800649a:	680b      	ldr	r3, [r1, #0]
 800649c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d10c      	bne.n	80064be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d104      	bne.n	80064b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064aa:	2100      	movs	r1, #0
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f965 	bl	800677c <USB_SetDevSpeed>
 80064b2:	e008      	b.n	80064c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064b4:	2101      	movs	r1, #1
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f960 	bl	800677c <USB_SetDevSpeed>
 80064bc:	e003      	b.n	80064c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064be:	2103      	movs	r1, #3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f95b 	bl	800677c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064c6:	2110      	movs	r1, #16
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f8f3 	bl	80066b4 <USB_FlushTxFifo>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f91f 	bl	800671c <USB_FlushRxFifo>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ee:	461a      	mov	r2, r3
 80064f0:	2300      	movs	r3, #0
 80064f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fa:	461a      	mov	r2, r3
 80064fc:	2300      	movs	r3, #0
 80064fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006506:	461a      	mov	r2, r3
 8006508:	2300      	movs	r3, #0
 800650a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800650c:	2300      	movs	r3, #0
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	e043      	b.n	800659a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006528:	d118      	bne.n	800655c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653c:	461a      	mov	r2, r3
 800653e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006542:	6013      	str	r3, [r2, #0]
 8006544:	e013      	b.n	800656e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006552:	461a      	mov	r2, r3
 8006554:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	e008      	b.n	800656e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006568:	461a      	mov	r2, r3
 800656a:	2300      	movs	r3, #0
 800656c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657a:	461a      	mov	r2, r3
 800657c:	2300      	movs	r3, #0
 800657e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4413      	add	r3, r2
 8006588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658c:	461a      	mov	r2, r3
 800658e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006592:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	3301      	adds	r3, #1
 8006598:	613b      	str	r3, [r7, #16]
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d3b7      	bcc.n	8006512 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065a2:	2300      	movs	r3, #0
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	e043      	b.n	8006630 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065be:	d118      	bne.n	80065f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10a      	bne.n	80065dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d2:	461a      	mov	r2, r3
 80065d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	e013      	b.n	8006604 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e8:	461a      	mov	r2, r3
 80065ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	e008      	b.n	8006604 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fe:	461a      	mov	r2, r3
 8006600:	2300      	movs	r3, #0
 8006602:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006610:	461a      	mov	r2, r3
 8006612:	2300      	movs	r3, #0
 8006614:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006622:	461a      	mov	r2, r3
 8006624:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006628:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	3301      	adds	r3, #1
 800662e:	613b      	str	r3, [r7, #16]
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	429a      	cmp	r2, r3
 8006636:	d3b7      	bcc.n	80065a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006646:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800664a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006658:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	2b00      	cmp	r3, #0
 800665e:	d105      	bne.n	800666c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	f043 0210 	orr.w	r2, r3, #16
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699a      	ldr	r2, [r3, #24]
 8006670:	4b0f      	ldr	r3, [pc, #60]	; (80066b0 <USB_DevInit+0x2c4>)
 8006672:	4313      	orrs	r3, r2
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	f043 0208 	orr.w	r2, r3, #8
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800668a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800668c:	2b01      	cmp	r3, #1
 800668e:	d107      	bne.n	80066a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006698:	f043 0304 	orr.w	r3, r3, #4
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066ac:	b004      	add	sp, #16
 80066ae:	4770      	bx	lr
 80066b0:	803c3800 	.word	0x803c3800

080066b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3301      	adds	r3, #1
 80066c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4a13      	ldr	r2, [pc, #76]	; (8006718 <USB_FlushTxFifo+0x64>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d901      	bls.n	80066d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e01b      	b.n	800670c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	daf2      	bge.n	80066c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	019b      	lsls	r3, r3, #6
 80066e4:	f043 0220 	orr.w	r2, r3, #32
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4a08      	ldr	r2, [pc, #32]	; (8006718 <USB_FlushTxFifo+0x64>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d901      	bls.n	80066fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e006      	b.n	800670c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f003 0320 	and.w	r3, r3, #32
 8006706:	2b20      	cmp	r3, #32
 8006708:	d0f0      	beq.n	80066ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	00030d40 	.word	0x00030d40

0800671c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	3301      	adds	r3, #1
 800672c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4a11      	ldr	r2, [pc, #68]	; (8006778 <USB_FlushRxFifo+0x5c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d901      	bls.n	800673a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e018      	b.n	800676c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	daf2      	bge.n	8006728 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2210      	movs	r2, #16
 800674a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3301      	adds	r3, #1
 8006750:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4a08      	ldr	r2, [pc, #32]	; (8006778 <USB_FlushRxFifo+0x5c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d901      	bls.n	800675e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e006      	b.n	800676c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0310 	and.w	r3, r3, #16
 8006766:	2b10      	cmp	r3, #16
 8006768:	d0f0      	beq.n	800674c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	00030d40 	.word	0x00030d40

0800677c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800679c:	4313      	orrs	r3, r2
 800679e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b087      	sub	sp, #28
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 0306 	and.w	r3, r3, #6
 80067c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d102      	bne.n	80067d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80067ce:	2300      	movs	r3, #0
 80067d0:	75fb      	strb	r3, [r7, #23]
 80067d2:	e00a      	b.n	80067ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d002      	beq.n	80067e0 <USB_GetDevSpeed+0x32>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b06      	cmp	r3, #6
 80067de:	d102      	bne.n	80067e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80067e0:	2302      	movs	r3, #2
 80067e2:	75fb      	strb	r3, [r7, #23]
 80067e4:	e001      	b.n	80067ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80067e6:	230f      	movs	r3, #15
 80067e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	371c      	adds	r7, #28
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	785b      	ldrb	r3, [r3, #1]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d13a      	bne.n	800688a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681a:	69da      	ldr	r2, [r3, #28]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	2101      	movs	r1, #1
 8006826:	fa01 f303 	lsl.w	r3, r1, r3
 800682a:	b29b      	uxth	r3, r3
 800682c:	68f9      	ldr	r1, [r7, #12]
 800682e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006832:	4313      	orrs	r3, r2
 8006834:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d155      	bne.n	80068f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	791b      	ldrb	r3, [r3, #4]
 8006866:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006868:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	059b      	lsls	r3, r3, #22
 800686e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006870:	4313      	orrs	r3, r2
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	440a      	add	r2, r1
 800687a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800687e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	e036      	b.n	80068f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006890:	69da      	ldr	r2, [r3, #28]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	2101      	movs	r1, #1
 800689c:	fa01 f303 	lsl.w	r3, r1, r3
 80068a0:	041b      	lsls	r3, r3, #16
 80068a2:	68f9      	ldr	r1, [r7, #12]
 80068a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068a8:	4313      	orrs	r3, r2
 80068aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d11a      	bne.n	80068f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	791b      	ldrb	r3, [r3, #4]
 80068dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068de:	430b      	orrs	r3, r1
 80068e0:	4313      	orrs	r3, r2
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	0151      	lsls	r1, r2, #5
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	440a      	add	r2, r1
 80068ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
	...

08006908 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	785b      	ldrb	r3, [r3, #1]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d161      	bne.n	80069e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800693a:	d11f      	bne.n	800697c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	0151      	lsls	r1, r2, #5
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	440a      	add	r2, r1
 8006952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006956:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800695a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	0151      	lsls	r1, r2, #5
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	440a      	add	r2, r1
 8006972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006976:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800697a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	f003 030f 	and.w	r3, r3, #15
 800698c:	2101      	movs	r1, #1
 800698e:	fa01 f303 	lsl.w	r3, r1, r3
 8006992:	b29b      	uxth	r3, r3
 8006994:	43db      	mvns	r3, r3
 8006996:	68f9      	ldr	r1, [r7, #12]
 8006998:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800699c:	4013      	ands	r3, r2
 800699e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a6:	69da      	ldr	r2, [r3, #28]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	f003 030f 	and.w	r3, r3, #15
 80069b0:	2101      	movs	r1, #1
 80069b2:	fa01 f303 	lsl.w	r3, r1, r3
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	43db      	mvns	r3, r3
 80069ba:	68f9      	ldr	r1, [r7, #12]
 80069bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069c0:	4013      	ands	r3, r2
 80069c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	0159      	lsls	r1, r3, #5
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	440b      	add	r3, r1
 80069da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069de:	4619      	mov	r1, r3
 80069e0:	4b35      	ldr	r3, [pc, #212]	; (8006ab8 <USB_DeactivateEndpoint+0x1b0>)
 80069e2:	4013      	ands	r3, r2
 80069e4:	600b      	str	r3, [r1, #0]
 80069e6:	e060      	b.n	8006aaa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069fe:	d11f      	bne.n	8006a40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	0151      	lsls	r1, r2, #5
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	440a      	add	r2, r1
 8006a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	2101      	movs	r1, #1
 8006a52:	fa01 f303 	lsl.w	r3, r1, r3
 8006a56:	041b      	lsls	r3, r3, #16
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	68f9      	ldr	r1, [r7, #12]
 8006a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a60:	4013      	ands	r3, r2
 8006a62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a6a:	69da      	ldr	r2, [r3, #28]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	2101      	movs	r1, #1
 8006a76:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7a:	041b      	lsls	r3, r3, #16
 8006a7c:	43db      	mvns	r3, r3
 8006a7e:	68f9      	ldr	r1, [r7, #12]
 8006a80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a84:	4013      	ands	r3, r2
 8006a86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	0159      	lsls	r1, r3, #5
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	440b      	add	r3, r1
 8006a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4b05      	ldr	r3, [pc, #20]	; (8006abc <USB_DeactivateEndpoint+0x1b4>)
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	ec337800 	.word	0xec337800
 8006abc:	eff37800 	.word	0xeff37800

08006ac0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08a      	sub	sp, #40	; 0x28
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	4613      	mov	r3, r2
 8006acc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	785b      	ldrb	r3, [r3, #1]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	f040 815c 	bne.w	8006d9a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d132      	bne.n	8006b50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	0151      	lsls	r1, r2, #5
 8006afc:	69fa      	ldr	r2, [r7, #28]
 8006afe:	440a      	add	r2, r1
 8006b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	0151      	lsls	r1, r2, #5
 8006b20:	69fa      	ldr	r2, [r7, #28]
 8006b22:	440a      	add	r2, r1
 8006b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b48:	0cdb      	lsrs	r3, r3, #19
 8006b4a:	04db      	lsls	r3, r3, #19
 8006b4c:	6113      	str	r3, [r2, #16]
 8006b4e:	e074      	b.n	8006c3a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	0151      	lsls	r1, r2, #5
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	440a      	add	r2, r1
 8006b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b6a:	0cdb      	lsrs	r3, r3, #19
 8006b6c:	04db      	lsls	r3, r3, #19
 8006b6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	0151      	lsls	r1, r2, #5
 8006b82:	69fa      	ldr	r2, [r7, #28]
 8006b84:	440a      	add	r2, r1
 8006b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6999      	ldr	r1, [r3, #24]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	440b      	add	r3, r1
 8006bac:	1e59      	subs	r1, r3, #1
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bb6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006bb8:	4b9d      	ldr	r3, [pc, #628]	; (8006e30 <USB_EPStartXfer+0x370>)
 8006bba:	400b      	ands	r3, r1
 8006bbc:	69b9      	ldr	r1, [r7, #24]
 8006bbe:	0148      	lsls	r0, r1, #5
 8006bc0:	69f9      	ldr	r1, [r7, #28]
 8006bc2:	4401      	add	r1, r0
 8006bc4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd8:	691a      	ldr	r2, [r3, #16]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006be2:	69b9      	ldr	r1, [r7, #24]
 8006be4:	0148      	lsls	r0, r1, #5
 8006be6:	69f9      	ldr	r1, [r7, #28]
 8006be8:	4401      	add	r1, r0
 8006bea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	791b      	ldrb	r3, [r3, #4]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d11f      	bne.n	8006c3a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	0151      	lsls	r1, r2, #5
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	440a      	add	r2, r1
 8006c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c14:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c18:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	0151      	lsls	r1, r2, #5
 8006c2c:	69fa      	ldr	r2, [r7, #28]
 8006c2e:	440a      	add	r2, r1
 8006c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c38:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d14b      	bne.n	8006cd8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d009      	beq.n	8006c5c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	461a      	mov	r2, r3
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	791b      	ldrb	r3, [r3, #4]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d128      	bne.n	8006cb6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d110      	bne.n	8006c96 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	e00f      	b.n	8006cb6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	0151      	lsls	r1, r2, #5
 8006ca8:	69fa      	ldr	r2, [r7, #28]
 8006caa:	440a      	add	r2, r1
 8006cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cb4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	e133      	b.n	8006f40 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cf6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	791b      	ldrb	r3, [r3, #4]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d015      	beq.n	8006d2c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 811b 	beq.w	8006f40 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d20:	69f9      	ldr	r1, [r7, #28]
 8006d22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d26:	4313      	orrs	r3, r2
 8006d28:	634b      	str	r3, [r1, #52]	; 0x34
 8006d2a:	e109      	b.n	8006f40 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d110      	bne.n	8006d5e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	0151      	lsls	r1, r2, #5
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	440a      	add	r2, r1
 8006d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	e00f      	b.n	8006d7e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	0151      	lsls	r1, r2, #5
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	440a      	add	r2, r1
 8006d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d7c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	6919      	ldr	r1, [r3, #16]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	781a      	ldrb	r2, [r3, #0]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	b298      	uxth	r0, r3
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	4603      	mov	r3, r0
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 fade 	bl	8007354 <USB_WritePacket>
 8006d98:	e0d2      	b.n	8006f40 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db4:	0cdb      	lsrs	r3, r3, #19
 8006db6:	04db      	lsls	r3, r3, #19
 8006db8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	0151      	lsls	r1, r2, #5
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	440a      	add	r2, r1
 8006dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ddc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d126      	bne.n	8006e34 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df2:	691a      	ldr	r2, [r3, #16]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dfc:	69b9      	ldr	r1, [r7, #24]
 8006dfe:	0148      	lsls	r0, r1, #5
 8006e00:	69f9      	ldr	r1, [r7, #28]
 8006e02:	4401      	add	r1, r0
 8006e04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	0151      	lsls	r1, r2, #5
 8006e1e:	69fa      	ldr	r2, [r7, #28]
 8006e20:	440a      	add	r2, r1
 8006e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e2a:	6113      	str	r3, [r2, #16]
 8006e2c:	e03a      	b.n	8006ea4 <USB_EPStartXfer+0x3e4>
 8006e2e:	bf00      	nop
 8006e30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	699a      	ldr	r2, [r3, #24]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	1e5a      	subs	r2, r3, #1
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e48:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	8afa      	ldrh	r2, [r7, #22]
 8006e50:	fb03 f202 	mul.w	r2, r3, r2
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e64:	691a      	ldr	r2, [r3, #16]
 8006e66:	8afb      	ldrh	r3, [r7, #22]
 8006e68:	04d9      	lsls	r1, r3, #19
 8006e6a:	4b38      	ldr	r3, [pc, #224]	; (8006f4c <USB_EPStartXfer+0x48c>)
 8006e6c:	400b      	ands	r3, r1
 8006e6e:	69b9      	ldr	r1, [r7, #24]
 8006e70:	0148      	lsls	r0, r1, #5
 8006e72:	69f9      	ldr	r1, [r7, #28]
 8006e74:	4401      	add	r1, r0
 8006e76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8a:	691a      	ldr	r2, [r3, #16]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e94:	69b9      	ldr	r1, [r7, #24]
 8006e96:	0148      	lsls	r0, r1, #5
 8006e98:	69f9      	ldr	r1, [r7, #28]
 8006e9a:	4401      	add	r1, r0
 8006e9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d10d      	bne.n	8006ec6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d009      	beq.n	8006ec6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	6919      	ldr	r1, [r3, #16]
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec2:	460a      	mov	r2, r1
 8006ec4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	791b      	ldrb	r3, [r3, #4]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d128      	bne.n	8006f20 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d110      	bne.n	8006f00 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	0151      	lsls	r1, r2, #5
 8006ef0:	69fa      	ldr	r2, [r7, #28]
 8006ef2:	440a      	add	r2, r1
 8006ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	e00f      	b.n	8006f20 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	0151      	lsls	r1, r2, #5
 8006f12:	69fa      	ldr	r2, [r7, #28]
 8006f14:	440a      	add	r2, r1
 8006f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	69ba      	ldr	r2, [r7, #24]
 8006f30:	0151      	lsls	r1, r2, #5
 8006f32:	69fa      	ldr	r2, [r7, #28]
 8006f34:	440a      	add	r2, r1
 8006f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3720      	adds	r7, #32
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	1ff80000 	.word	0x1ff80000

08006f50 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	785b      	ldrb	r3, [r3, #1]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	f040 80ce 	bne.w	800710e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d132      	bne.n	8006fe0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	0151      	lsls	r1, r2, #5
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	440a      	add	r2, r1
 8006f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	0151      	lsls	r1, r2, #5
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	0151      	lsls	r1, r2, #5
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	440a      	add	r2, r1
 8006fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd8:	0cdb      	lsrs	r3, r3, #19
 8006fda:	04db      	lsls	r3, r3, #19
 8006fdc:	6113      	str	r3, [r2, #16]
 8006fde:	e04e      	b.n	800707e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	0151      	lsls	r1, r2, #5
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	440a      	add	r2, r1
 8006ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ffa:	0cdb      	lsrs	r3, r3, #19
 8006ffc:	04db      	lsls	r3, r3, #19
 8006ffe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	4413      	add	r3, r2
 8007008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	0151      	lsls	r1, r2, #5
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	440a      	add	r2, r1
 8007016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800701a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800701e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007022:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	699a      	ldr	r2, [r3, #24]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	429a      	cmp	r2, r3
 800702e:	d903      	bls.n	8007038 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	440a      	add	r2, r1
 800704e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007056:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007064:	691a      	ldr	r2, [r3, #16]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800706e:	6939      	ldr	r1, [r7, #16]
 8007070:	0148      	lsls	r0, r1, #5
 8007072:	6979      	ldr	r1, [r7, #20]
 8007074:	4401      	add	r1, r0
 8007076:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800707a:	4313      	orrs	r3, r2
 800707c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800707e:	79fb      	ldrb	r3, [r7, #7]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d11e      	bne.n	80070c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d009      	beq.n	80070a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007098:	461a      	mov	r2, r3
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	0151      	lsls	r1, r2, #5
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	440a      	add	r2, r1
 80070b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	e097      	b.n	80071f2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	0151      	lsls	r1, r2, #5
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	440a      	add	r2, r1
 80070d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 8083 	beq.w	80071f2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	2101      	movs	r1, #1
 80070fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007102:	6979      	ldr	r1, [r7, #20]
 8007104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007108:	4313      	orrs	r3, r2
 800710a:	634b      	str	r3, [r1, #52]	; 0x34
 800710c:	e071      	b.n	80071f2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	4413      	add	r3, r2
 8007116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	0151      	lsls	r1, r2, #5
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	440a      	add	r2, r1
 8007124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007128:	0cdb      	lsrs	r3, r3, #19
 800712a:	04db      	lsls	r3, r3, #19
 800712c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	0151      	lsls	r1, r2, #5
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	440a      	add	r2, r1
 8007144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007148:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800714c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007150:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	0151      	lsls	r1, r2, #5
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	440a      	add	r2, r1
 8007180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007188:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007196:	691a      	ldr	r2, [r3, #16]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071a0:	6939      	ldr	r1, [r7, #16]
 80071a2:	0148      	lsls	r0, r1, #5
 80071a4:	6979      	ldr	r1, [r7, #20]
 80071a6:	4401      	add	r1, r0
 80071a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071ac:	4313      	orrs	r3, r2
 80071ae:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d10d      	bne.n	80071d2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d009      	beq.n	80071d2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	6919      	ldr	r1, [r3, #16]
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ce:	460a      	mov	r2, r1
 80071d0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	0151      	lsls	r1, r2, #5
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	440a      	add	r2, r1
 80071e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	371c      	adds	r7, #28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d14a      	bne.n	80072b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007236:	f040 8086 	bne.w	8007346 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	7812      	ldrb	r2, [r2, #0]
 800724e:	0151      	lsls	r1, r2, #5
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	440a      	add	r2, r1
 8007254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007258:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800725c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	7812      	ldrb	r2, [r2, #0]
 8007272:	0151      	lsls	r1, r2, #5
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	440a      	add	r2, r1
 8007278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007280:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3301      	adds	r3, #1
 8007286:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f242 7210 	movw	r2, #10000	; 0x2710
 800728e:	4293      	cmp	r3, r2
 8007290:	d902      	bls.n	8007298 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	75fb      	strb	r3, [r7, #23]
          break;
 8007296:	e056      	b.n	8007346 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072b0:	d0e7      	beq.n	8007282 <USB_EPStopXfer+0x82>
 80072b2:	e048      	b.n	8007346 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072cc:	d13b      	bne.n	8007346 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	7812      	ldrb	r2, [r2, #0]
 80072e2:	0151      	lsls	r1, r2, #5
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	440a      	add	r2, r1
 80072e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	7812      	ldrb	r2, [r2, #0]
 8007306:	0151      	lsls	r1, r2, #5
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	440a      	add	r2, r1
 800730c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007310:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007314:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3301      	adds	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007322:	4293      	cmp	r3, r2
 8007324:	d902      	bls.n	800732c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	75fb      	strb	r3, [r7, #23]
          break;
 800732a:	e00c      	b.n	8007346 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007340:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007344:	d0e7      	beq.n	8007316 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007346:	7dfb      	ldrb	r3, [r7, #23]
}
 8007348:	4618      	mov	r0, r3
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007354:	b480      	push	{r7}
 8007356:	b089      	sub	sp, #36	; 0x24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	4611      	mov	r1, r2
 8007360:	461a      	mov	r2, r3
 8007362:	460b      	mov	r3, r1
 8007364:	71fb      	strb	r3, [r7, #7]
 8007366:	4613      	mov	r3, r2
 8007368:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007372:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007376:	2b00      	cmp	r3, #0
 8007378:	d123      	bne.n	80073c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800737a:	88bb      	ldrh	r3, [r7, #4]
 800737c:	3303      	adds	r3, #3
 800737e:	089b      	lsrs	r3, r3, #2
 8007380:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007382:	2300      	movs	r3, #0
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	e018      	b.n	80073ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007388:	79fb      	ldrb	r3, [r7, #7]
 800738a:	031a      	lsls	r2, r3, #12
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	4413      	add	r3, r2
 8007390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007394:	461a      	mov	r2, r3
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	3301      	adds	r3, #1
 80073a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	3301      	adds	r3, #1
 80073a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	3301      	adds	r3, #1
 80073ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	3301      	adds	r3, #1
 80073b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	3301      	adds	r3, #1
 80073b8:	61bb      	str	r3, [r7, #24]
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d3e2      	bcc.n	8007388 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3724      	adds	r7, #36	; 0x24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b08b      	sub	sp, #44	; 0x2c
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	4613      	mov	r3, r2
 80073dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80073e6:	88fb      	ldrh	r3, [r7, #6]
 80073e8:	089b      	lsrs	r3, r3, #2
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80073ee:	88fb      	ldrh	r3, [r7, #6]
 80073f0:	f003 0303 	and.w	r3, r3, #3
 80073f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80073f6:	2300      	movs	r3, #0
 80073f8:	623b      	str	r3, [r7, #32]
 80073fa:	e014      	b.n	8007426 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	601a      	str	r2, [r3, #0]
    pDest++;
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	3301      	adds	r3, #1
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	3301      	adds	r3, #1
 8007412:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	3301      	adds	r3, #1
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	3301      	adds	r3, #1
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	3301      	adds	r3, #1
 8007424:	623b      	str	r3, [r7, #32]
 8007426:	6a3a      	ldr	r2, [r7, #32]
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	429a      	cmp	r2, r3
 800742c:	d3e6      	bcc.n	80073fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800742e:	8bfb      	ldrh	r3, [r7, #30]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01e      	beq.n	8007472 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800743e:	461a      	mov	r2, r3
 8007440:	f107 0310 	add.w	r3, r7, #16
 8007444:	6812      	ldr	r2, [r2, #0]
 8007446:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	b2db      	uxtb	r3, r3
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	fa22 f303 	lsr.w	r3, r2, r3
 8007454:	b2da      	uxtb	r2, r3
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	701a      	strb	r2, [r3, #0]
      i++;
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	3301      	adds	r3, #1
 800745e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	3301      	adds	r3, #1
 8007464:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007466:	8bfb      	ldrh	r3, [r7, #30]
 8007468:	3b01      	subs	r3, #1
 800746a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800746c:	8bfb      	ldrh	r3, [r7, #30]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1ea      	bne.n	8007448 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007474:	4618      	mov	r0, r3
 8007476:	372c      	adds	r7, #44	; 0x2c
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	785b      	ldrb	r3, [r3, #1]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d12c      	bne.n	80074f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	db12      	blt.n	80074d4 <USB_EPSetStall+0x54>
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00f      	beq.n	80074d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	0151      	lsls	r1, r2, #5
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	440a      	add	r2, r1
 80074ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	0151      	lsls	r1, r2, #5
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	440a      	add	r2, r1
 80074ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	e02b      	b.n	800754e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	db12      	blt.n	800752e <USB_EPSetStall+0xae>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00f      	beq.n	800752e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4413      	add	r3, r2
 8007516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	0151      	lsls	r1, r2, #5
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	440a      	add	r2, r1
 8007524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007528:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800752c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4413      	add	r3, r2
 8007536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	0151      	lsls	r1, r2, #5
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	440a      	add	r2, r1
 8007544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007548:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800754c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	785b      	ldrb	r3, [r3, #1]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d128      	bne.n	80075ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	0151      	lsls	r1, r2, #5
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	440a      	add	r2, r1
 800758e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007592:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007596:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	791b      	ldrb	r3, [r3, #4]
 800759c:	2b03      	cmp	r3, #3
 800759e:	d003      	beq.n	80075a8 <USB_EPClearStall+0x4c>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	791b      	ldrb	r3, [r3, #4]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d138      	bne.n	800761a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	0151      	lsls	r1, r2, #5
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	440a      	add	r2, r1
 80075be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	e027      	b.n	800761a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	0151      	lsls	r1, r2, #5
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	440a      	add	r2, r1
 80075e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	791b      	ldrb	r3, [r3, #4]
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d003      	beq.n	80075fa <USB_EPClearStall+0x9e>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	791b      	ldrb	r3, [r3, #4]
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d10f      	bne.n	800761a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	4413      	add	r3, r2
 8007602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	0151      	lsls	r1, r2, #5
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	440a      	add	r2, r1
 8007610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007618:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	460b      	mov	r3, r1
 8007632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007646:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800764a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	78fb      	ldrb	r3, [r7, #3]
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800765c:	68f9      	ldr	r1, [r7, #12]
 800765e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007662:	4313      	orrs	r3, r2
 8007664:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800768e:	f023 0303 	bic.w	r3, r3, #3
 8007692:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076a2:	f023 0302 	bic.w	r3, r3, #2
 80076a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b085      	sub	sp, #20
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076d0:	f023 0303 	bic.w	r3, r3, #3
 80076d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076e4:	f043 0302 	orr.w	r3, r3, #2
 80076e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4013      	ands	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007710:	68fb      	ldr	r3, [r7, #12]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800771e:	b480      	push	{r7}
 8007720:	b085      	sub	sp, #20
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773a:	69db      	ldr	r3, [r3, #28]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	4013      	ands	r3, r2
 8007740:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	0c1b      	lsrs	r3, r3, #16
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	4013      	ands	r3, r2
 8007774:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	b29b      	uxth	r3, r3
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007786:	b480      	push	{r7}
 8007788:	b085      	sub	sp, #20
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007796:	78fb      	ldrb	r3, [r7, #3]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4413      	add	r3, r2
 800779e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	4013      	ands	r3, r2
 80077b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077b4:	68bb      	ldr	r3, [r7, #8]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b087      	sub	sp, #28
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	460b      	mov	r3, r1
 80077cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80077e6:	78fb      	ldrb	r3, [r7, #3]
 80077e8:	f003 030f 	and.w	r3, r3, #15
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	fa22 f303 	lsr.w	r3, r2, r3
 80077f2:	01db      	lsls	r3, r3, #7
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80077fc:	78fb      	ldrb	r3, [r7, #3]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	4413      	add	r3, r2
 8007804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	4013      	ands	r3, r2
 800780e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007810:	68bb      	ldr	r3, [r7, #8]
}
 8007812:	4618      	mov	r0, r3
 8007814:	371c      	adds	r7, #28
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f003 0301 	and.w	r3, r3, #1
}
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800783a:	b480      	push	{r7}
 800783c:	b085      	sub	sp, #20
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007854:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007858:	f023 0307 	bic.w	r3, r3, #7
 800785c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800786c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007870:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007880:	b480      	push	{r7}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	460b      	mov	r3, r1
 800788a:	607a      	str	r2, [r7, #4]
 800788c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	333c      	adds	r3, #60	; 0x3c
 8007896:	3304      	adds	r3, #4
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	4a26      	ldr	r2, [pc, #152]	; (8007938 <USB_EP0_OutStart+0xb8>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d90a      	bls.n	80078ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078b4:	d101      	bne.n	80078ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	e037      	b.n	800792a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c0:	461a      	mov	r2, r3
 80078c2:	2300      	movs	r3, #0
 80078c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e8:	f043 0318 	orr.w	r3, r3, #24
 80078ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007900:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007902:	7afb      	ldrb	r3, [r7, #11]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d10f      	bne.n	8007928 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790e:	461a      	mov	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007922:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007926:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	4f54300a 	.word	0x4f54300a

0800793c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3301      	adds	r3, #1
 800794c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	4a13      	ldr	r2, [pc, #76]	; (80079a0 <USB_CoreReset+0x64>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d901      	bls.n	800795a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e01b      	b.n	8007992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	daf2      	bge.n	8007948 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f043 0201 	orr.w	r2, r3, #1
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3301      	adds	r3, #1
 8007976:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4a09      	ldr	r2, [pc, #36]	; (80079a0 <USB_CoreReset+0x64>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d901      	bls.n	8007984 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e006      	b.n	8007992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b01      	cmp	r3, #1
 800798e:	d0f0      	beq.n	8007972 <USB_CoreReset+0x36>

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	00030d40 	.word	0x00030d40

080079a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80079b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80079b4:	f002 fc2a 	bl	800a20c <USBD_static_malloc>
 80079b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d109      	bne.n	80079d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	32b0      	adds	r2, #176	; 0xb0
 80079ca:	2100      	movs	r1, #0
 80079cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80079d0:	2302      	movs	r3, #2
 80079d2:	e0d4      	b.n	8007b7e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80079d4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80079d8:	2100      	movs	r1, #0
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f002 fc7e 	bl	800a2dc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	32b0      	adds	r2, #176	; 0xb0
 80079ea:	68f9      	ldr	r1, [r7, #12]
 80079ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	32b0      	adds	r2, #176	; 0xb0
 80079fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	7c1b      	ldrb	r3, [r3, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d138      	bne.n	8007a7e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a0c:	4b5e      	ldr	r3, [pc, #376]	; (8007b88 <USBD_CDC_Init+0x1e4>)
 8007a0e:	7819      	ldrb	r1, [r3, #0]
 8007a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a14:	2202      	movs	r2, #2
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f002 fad5 	bl	8009fc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a1c:	4b5a      	ldr	r3, [pc, #360]	; (8007b88 <USBD_CDC_Init+0x1e4>)
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	f003 020f 	and.w	r2, r3, #15
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	4613      	mov	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	440b      	add	r3, r1
 8007a30:	3324      	adds	r3, #36	; 0x24
 8007a32:	2201      	movs	r2, #1
 8007a34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a36:	4b55      	ldr	r3, [pc, #340]	; (8007b8c <USBD_CDC_Init+0x1e8>)
 8007a38:	7819      	ldrb	r1, [r3, #0]
 8007a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a3e:	2202      	movs	r2, #2
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f002 fac0 	bl	8009fc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a46:	4b51      	ldr	r3, [pc, #324]	; (8007b8c <USBD_CDC_Init+0x1e8>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	f003 020f 	and.w	r2, r3, #15
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	4613      	mov	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	440b      	add	r3, r1
 8007a5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a5e:	2201      	movs	r2, #1
 8007a60:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a62:	4b4b      	ldr	r3, [pc, #300]	; (8007b90 <USBD_CDC_Init+0x1ec>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	f003 020f 	and.w	r2, r3, #15
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	3326      	adds	r3, #38	; 0x26
 8007a78:	2210      	movs	r2, #16
 8007a7a:	801a      	strh	r2, [r3, #0]
 8007a7c:	e035      	b.n	8007aea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a7e:	4b42      	ldr	r3, [pc, #264]	; (8007b88 <USBD_CDC_Init+0x1e4>)
 8007a80:	7819      	ldrb	r1, [r3, #0]
 8007a82:	2340      	movs	r3, #64	; 0x40
 8007a84:	2202      	movs	r2, #2
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f002 fa9d 	bl	8009fc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a8c:	4b3e      	ldr	r3, [pc, #248]	; (8007b88 <USBD_CDC_Init+0x1e4>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	f003 020f 	and.w	r2, r3, #15
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	440b      	add	r3, r1
 8007aa0:	3324      	adds	r3, #36	; 0x24
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007aa6:	4b39      	ldr	r3, [pc, #228]	; (8007b8c <USBD_CDC_Init+0x1e8>)
 8007aa8:	7819      	ldrb	r1, [r3, #0]
 8007aaa:	2340      	movs	r3, #64	; 0x40
 8007aac:	2202      	movs	r2, #2
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f002 fa89 	bl	8009fc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007ab4:	4b35      	ldr	r3, [pc, #212]	; (8007b8c <USBD_CDC_Init+0x1e8>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	f003 020f 	and.w	r2, r3, #15
 8007abc:	6879      	ldr	r1, [r7, #4]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	440b      	add	r3, r1
 8007ac8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007acc:	2201      	movs	r2, #1
 8007ace:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007ad0:	4b2f      	ldr	r3, [pc, #188]	; (8007b90 <USBD_CDC_Init+0x1ec>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	f003 020f 	and.w	r2, r3, #15
 8007ad8:	6879      	ldr	r1, [r7, #4]
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	3326      	adds	r3, #38	; 0x26
 8007ae6:	2210      	movs	r2, #16
 8007ae8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007aea:	4b29      	ldr	r3, [pc, #164]	; (8007b90 <USBD_CDC_Init+0x1ec>)
 8007aec:	7819      	ldrb	r1, [r3, #0]
 8007aee:	2308      	movs	r3, #8
 8007af0:	2203      	movs	r2, #3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f002 fa67 	bl	8009fc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007af8:	4b25      	ldr	r3, [pc, #148]	; (8007b90 <USBD_CDC_Init+0x1ec>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	f003 020f 	and.w	r2, r3, #15
 8007b00:	6879      	ldr	r1, [r7, #4]
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	440b      	add	r3, r1
 8007b0c:	3324      	adds	r3, #36	; 0x24
 8007b0e:	2201      	movs	r2, #1
 8007b10:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	33b0      	adds	r3, #176	; 0xb0
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007b48:	2302      	movs	r3, #2
 8007b4a:	e018      	b.n	8007b7e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	7c1b      	ldrb	r3, [r3, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10a      	bne.n	8007b6a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b54:	4b0d      	ldr	r3, [pc, #52]	; (8007b8c <USBD_CDC_Init+0x1e8>)
 8007b56:	7819      	ldrb	r1, [r3, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f002 fb1e 	bl	800a1a4 <USBD_LL_PrepareReceive>
 8007b68:	e008      	b.n	8007b7c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b6a:	4b08      	ldr	r3, [pc, #32]	; (8007b8c <USBD_CDC_Init+0x1e8>)
 8007b6c:	7819      	ldrb	r1, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b74:	2340      	movs	r3, #64	; 0x40
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f002 fb14 	bl	800a1a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	200000db 	.word	0x200000db
 8007b8c:	200000dc 	.word	0x200000dc
 8007b90:	200000dd 	.word	0x200000dd

08007b94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007ba0:	4b3a      	ldr	r3, [pc, #232]	; (8007c8c <USBD_CDC_DeInit+0xf8>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f002 fa33 	bl	800a012 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007bac:	4b37      	ldr	r3, [pc, #220]	; (8007c8c <USBD_CDC_DeInit+0xf8>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	f003 020f 	and.w	r2, r3, #15
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	440b      	add	r3, r1
 8007bc0:	3324      	adds	r3, #36	; 0x24
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007bc6:	4b32      	ldr	r3, [pc, #200]	; (8007c90 <USBD_CDC_DeInit+0xfc>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f002 fa20 	bl	800a012 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007bd2:	4b2f      	ldr	r3, [pc, #188]	; (8007c90 <USBD_CDC_DeInit+0xfc>)
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	f003 020f 	and.w	r2, r3, #15
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bea:	2200      	movs	r2, #0
 8007bec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007bee:	4b29      	ldr	r3, [pc, #164]	; (8007c94 <USBD_CDC_DeInit+0x100>)
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f002 fa0c 	bl	800a012 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007bfa:	4b26      	ldr	r3, [pc, #152]	; (8007c94 <USBD_CDC_DeInit+0x100>)
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	f003 020f 	and.w	r2, r3, #15
 8007c02:	6879      	ldr	r1, [r7, #4]
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	440b      	add	r3, r1
 8007c0e:	3324      	adds	r3, #36	; 0x24
 8007c10:	2200      	movs	r2, #0
 8007c12:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007c14:	4b1f      	ldr	r3, [pc, #124]	; (8007c94 <USBD_CDC_DeInit+0x100>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	f003 020f 	and.w	r2, r3, #15
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	440b      	add	r3, r1
 8007c28:	3326      	adds	r3, #38	; 0x26
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	32b0      	adds	r2, #176	; 0xb0
 8007c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01f      	beq.n	8007c80 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	33b0      	adds	r3, #176	; 0xb0
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	32b0      	adds	r2, #176	; 0xb0
 8007c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f002 fae0 	bl	800a228 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	32b0      	adds	r2, #176	; 0xb0
 8007c72:	2100      	movs	r1, #0
 8007c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	200000db 	.word	0x200000db
 8007c90:	200000dc 	.word	0x200000dc
 8007c94:	200000dd 	.word	0x200000dd

08007c98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	32b0      	adds	r2, #176	; 0xb0
 8007cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e0bf      	b.n	8007e48 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d050      	beq.n	8007d76 <USBD_CDC_Setup+0xde>
 8007cd4:	2b20      	cmp	r3, #32
 8007cd6:	f040 80af 	bne.w	8007e38 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	88db      	ldrh	r3, [r3, #6]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d03a      	beq.n	8007d58 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	b25b      	sxtb	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	da1b      	bge.n	8007d24 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	33b0      	adds	r3, #176	; 0xb0
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007d02:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	88d2      	ldrh	r2, [r2, #6]
 8007d08:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	88db      	ldrh	r3, [r3, #6]
 8007d0e:	2b07      	cmp	r3, #7
 8007d10:	bf28      	it	cs
 8007d12:	2307      	movcs	r3, #7
 8007d14:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	89fa      	ldrh	r2, [r7, #14]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 fd43 	bl	80097a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007d22:	e090      	b.n	8007e46 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	785a      	ldrb	r2, [r3, #1]
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	88db      	ldrh	r3, [r3, #6]
 8007d32:	2b3f      	cmp	r3, #63	; 0x3f
 8007d34:	d803      	bhi.n	8007d3e <USBD_CDC_Setup+0xa6>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	88db      	ldrh	r3, [r3, #6]
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	e000      	b.n	8007d40 <USBD_CDC_Setup+0xa8>
 8007d3e:	2240      	movs	r2, #64	; 0x40
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007d46:	6939      	ldr	r1, [r7, #16]
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007d4e:	461a      	mov	r2, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 fd55 	bl	8009800 <USBD_CtlPrepareRx>
      break;
 8007d56:	e076      	b.n	8007e46 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	33b0      	adds	r3, #176	; 0xb0
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	7850      	ldrb	r0, [r2, #1]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	4798      	blx	r3
      break;
 8007d74:	e067      	b.n	8007e46 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	785b      	ldrb	r3, [r3, #1]
 8007d7a:	2b0b      	cmp	r3, #11
 8007d7c:	d851      	bhi.n	8007e22 <USBD_CDC_Setup+0x18a>
 8007d7e:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <USBD_CDC_Setup+0xec>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007db5 	.word	0x08007db5
 8007d88:	08007e31 	.word	0x08007e31
 8007d8c:	08007e23 	.word	0x08007e23
 8007d90:	08007e23 	.word	0x08007e23
 8007d94:	08007e23 	.word	0x08007e23
 8007d98:	08007e23 	.word	0x08007e23
 8007d9c:	08007e23 	.word	0x08007e23
 8007da0:	08007e23 	.word	0x08007e23
 8007da4:	08007e23 	.word	0x08007e23
 8007da8:	08007e23 	.word	0x08007e23
 8007dac:	08007ddf 	.word	0x08007ddf
 8007db0:	08007e09 	.word	0x08007e09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d107      	bne.n	8007dd0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007dc0:	f107 030a 	add.w	r3, r7, #10
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f001 fced 	bl	80097a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dce:	e032      	b.n	8007e36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 fc77 	bl	80096c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	75fb      	strb	r3, [r7, #23]
          break;
 8007ddc:	e02b      	b.n	8007e36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d107      	bne.n	8007dfa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007dea:	f107 030d 	add.w	r3, r7, #13
 8007dee:	2201      	movs	r2, #1
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 fcd8 	bl	80097a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007df8:	e01d      	b.n	8007e36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f001 fc62 	bl	80096c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e02:	2303      	movs	r3, #3
 8007e04:	75fb      	strb	r3, [r7, #23]
          break;
 8007e06:	e016      	b.n	8007e36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d00f      	beq.n	8007e34 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 fc55 	bl	80096c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e20:	e008      	b.n	8007e34 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 fc4e 	bl	80096c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e2e:	e002      	b.n	8007e36 <USBD_CDC_Setup+0x19e>
          break;
 8007e30:	bf00      	nop
 8007e32:	e008      	b.n	8007e46 <USBD_CDC_Setup+0x1ae>
          break;
 8007e34:	bf00      	nop
      }
      break;
 8007e36:	e006      	b.n	8007e46 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f001 fc43 	bl	80096c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007e40:	2303      	movs	r3, #3
 8007e42:	75fb      	strb	r3, [r7, #23]
      break;
 8007e44:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3718      	adds	r7, #24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	32b0      	adds	r2, #176	; 0xb0
 8007e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e065      	b.n	8007f46 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	32b0      	adds	r2, #176	; 0xb0
 8007e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e88:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007e8a:	78fb      	ldrb	r3, [r7, #3]
 8007e8c:	f003 020f 	and.w	r2, r3, #15
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	4613      	mov	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	440b      	add	r3, r1
 8007e9c:	3318      	adds	r3, #24
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d02f      	beq.n	8007f04 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	f003 020f 	and.w	r2, r3, #15
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	4613      	mov	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	440b      	add	r3, r1
 8007eb6:	3318      	adds	r3, #24
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	f003 010f 	and.w	r1, r3, #15
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	00db      	lsls	r3, r3, #3
 8007ec6:	440b      	add	r3, r1
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4403      	add	r3, r0
 8007ecc:	3348      	adds	r3, #72	; 0x48
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ed4:	fb01 f303 	mul.w	r3, r1, r3
 8007ed8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d112      	bne.n	8007f04 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007ede:	78fb      	ldrb	r3, [r7, #3]
 8007ee0:	f003 020f 	and.w	r2, r3, #15
 8007ee4:	6879      	ldr	r1, [r7, #4]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	440b      	add	r3, r1
 8007ef0:	3318      	adds	r3, #24
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ef6:	78f9      	ldrb	r1, [r7, #3]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	2200      	movs	r2, #0
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f002 f930 	bl	800a162 <USBD_LL_Transmit>
 8007f02:	e01f      	b.n	8007f44 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	33b0      	adds	r3, #176	; 0xb0
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d010      	beq.n	8007f44 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	33b0      	adds	r3, #176	; 0xb0
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007f40:	78fa      	ldrb	r2, [r7, #3]
 8007f42:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	32b0      	adds	r2, #176	; 0xb0
 8007f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	32b0      	adds	r2, #176	; 0xb0
 8007f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e01a      	b.n	8007fb6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f002 f92e 	bl	800a1e6 <USBD_LL_GetRxDataSize>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	33b0      	adds	r3, #176	; 0xb0
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b084      	sub	sp, #16
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	32b0      	adds	r2, #176	; 0xb0
 8007fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e025      	b.n	800802c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	33b0      	adds	r3, #176	; 0xb0
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d01a      	beq.n	800802a <USBD_CDC_EP0_RxReady+0x6c>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007ffa:	2bff      	cmp	r3, #255	; 0xff
 8007ffc:	d015      	beq.n	800802a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	33b0      	adds	r3, #176	; 0xb0
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008016:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800801e:	b292      	uxth	r2, r2
 8008020:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	22ff      	movs	r2, #255	; 0xff
 8008026:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800803c:	2182      	movs	r1, #130	; 0x82
 800803e:	4818      	ldr	r0, [pc, #96]	; (80080a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008040:	f000 fd09 	bl	8008a56 <USBD_GetEpDesc>
 8008044:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008046:	2101      	movs	r1, #1
 8008048:	4815      	ldr	r0, [pc, #84]	; (80080a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800804a:	f000 fd04 	bl	8008a56 <USBD_GetEpDesc>
 800804e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008050:	2181      	movs	r1, #129	; 0x81
 8008052:	4813      	ldr	r0, [pc, #76]	; (80080a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008054:	f000 fcff 	bl	8008a56 <USBD_GetEpDesc>
 8008058:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2210      	movs	r2, #16
 8008064:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d006      	beq.n	800807a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	2200      	movs	r2, #0
 8008070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008074:	711a      	strb	r2, [r3, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d006      	beq.n	800808e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008088:	711a      	strb	r2, [r3, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2243      	movs	r2, #67	; 0x43
 8008092:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008094:	4b02      	ldr	r3, [pc, #8]	; (80080a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008096:	4618      	mov	r0, r3
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	20000098 	.word	0x20000098

080080a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080ac:	2182      	movs	r1, #130	; 0x82
 80080ae:	4818      	ldr	r0, [pc, #96]	; (8008110 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80080b0:	f000 fcd1 	bl	8008a56 <USBD_GetEpDesc>
 80080b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080b6:	2101      	movs	r1, #1
 80080b8:	4815      	ldr	r0, [pc, #84]	; (8008110 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80080ba:	f000 fccc 	bl	8008a56 <USBD_GetEpDesc>
 80080be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80080c0:	2181      	movs	r1, #129	; 0x81
 80080c2:	4813      	ldr	r0, [pc, #76]	; (8008110 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80080c4:	f000 fcc7 	bl	8008a56 <USBD_GetEpDesc>
 80080c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	2210      	movs	r2, #16
 80080d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d006      	beq.n	80080ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	2200      	movs	r2, #0
 80080e0:	711a      	strb	r2, [r3, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f042 0202 	orr.w	r2, r2, #2
 80080e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d006      	beq.n	80080fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	711a      	strb	r2, [r3, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f042 0202 	orr.w	r2, r2, #2
 80080fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2243      	movs	r2, #67	; 0x43
 8008102:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008104:	4b02      	ldr	r3, [pc, #8]	; (8008110 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000098 	.word	0x20000098

08008114 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800811c:	2182      	movs	r1, #130	; 0x82
 800811e:	4818      	ldr	r0, [pc, #96]	; (8008180 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008120:	f000 fc99 	bl	8008a56 <USBD_GetEpDesc>
 8008124:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008126:	2101      	movs	r1, #1
 8008128:	4815      	ldr	r0, [pc, #84]	; (8008180 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800812a:	f000 fc94 	bl	8008a56 <USBD_GetEpDesc>
 800812e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008130:	2181      	movs	r1, #129	; 0x81
 8008132:	4813      	ldr	r0, [pc, #76]	; (8008180 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008134:	f000 fc8f 	bl	8008a56 <USBD_GetEpDesc>
 8008138:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2210      	movs	r2, #16
 8008144:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d006      	beq.n	800815a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	2200      	movs	r2, #0
 8008150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008154:	711a      	strb	r2, [r3, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d006      	beq.n	800816e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008168:	711a      	strb	r2, [r3, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2243      	movs	r2, #67	; 0x43
 8008172:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008174:	4b02      	ldr	r3, [pc, #8]	; (8008180 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20000098 	.word	0x20000098

08008184 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	220a      	movs	r2, #10
 8008190:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008192:	4b03      	ldr	r3, [pc, #12]	; (80081a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008194:	4618      	mov	r0, r3
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	20000054 	.word	0x20000054

080081a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e009      	b.n	80081cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	33b0      	adds	r3, #176	; 0xb0
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4413      	add	r3, r2
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80081d8:	b480      	push	{r7}
 80081da:	b087      	sub	sp, #28
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	32b0      	adds	r2, #176	; 0xb0
 80081ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e008      	b.n	8008210 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	371c      	adds	r7, #28
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	32b0      	adds	r2, #176	; 0xb0
 8008230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008234:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800823c:	2303      	movs	r3, #3
 800823e:	e004      	b.n	800824a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
	...

08008258 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	32b0      	adds	r2, #176	; 0xb0
 800826a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	32b0      	adds	r2, #176	; 0xb0
 800827a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008282:	2303      	movs	r3, #3
 8008284:	e018      	b.n	80082b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	7c1b      	ldrb	r3, [r3, #16]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10a      	bne.n	80082a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800828e:	4b0c      	ldr	r3, [pc, #48]	; (80082c0 <USBD_CDC_ReceivePacket+0x68>)
 8008290:	7819      	ldrb	r1, [r3, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f001 ff81 	bl	800a1a4 <USBD_LL_PrepareReceive>
 80082a2:	e008      	b.n	80082b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082a4:	4b06      	ldr	r3, [pc, #24]	; (80082c0 <USBD_CDC_ReceivePacket+0x68>)
 80082a6:	7819      	ldrb	r1, [r3, #0]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082ae:	2340      	movs	r3, #64	; 0x40
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 ff77 	bl	800a1a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	200000dc 	.word	0x200000dc

080082c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	4613      	mov	r3, r2
 80082d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80082d8:	2303      	movs	r3, #3
 80082da:	e01f      	b.n	800831c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	79fa      	ldrb	r2, [r7, #7]
 800830e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f001 fdeb 	bl	8009eec <USBD_LL_Init>
 8008316:	4603      	mov	r3, r0
 8008318:	75fb      	strb	r3, [r7, #23]

  return ret;
 800831a:	7dfb      	ldrb	r3, [r7, #23]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800832e:	2300      	movs	r3, #0
 8008330:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008338:	2303      	movs	r3, #3
 800833a:	e025      	b.n	8008388 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	32ae      	adds	r2, #174	; 0xae
 800834e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00f      	beq.n	8008378 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	32ae      	adds	r2, #174	; 0xae
 8008362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008368:	f107 020e 	add.w	r2, r7, #14
 800836c:	4610      	mov	r0, r2
 800836e:	4798      	blx	r3
 8008370:	4602      	mov	r2, r0
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 fdf9 	bl	8009f90 <USBD_LL_Start>
 800839e:	4603      	mov	r3, r0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	460b      	mov	r3, r1
 80083c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d009      	beq.n	80083ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	78fa      	ldrb	r2, [r7, #3]
 80083e2:	4611      	mov	r1, r2
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	4798      	blx	r3
 80083e8:	4603      	mov	r3, r0
 80083ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b084      	sub	sp, #16
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	460b      	mov	r3, r1
 8008400:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	78fa      	ldrb	r2, [r7, #3]
 8008410:	4611      	mov	r1, r2
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	4798      	blx	r3
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800841c:	2303      	movs	r3, #3
 800841e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008420:	7bfb      	ldrb	r3, [r7, #15]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	4618      	mov	r0, r3
 800843e:	f001 f908 	bl	8009652 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008450:	461a      	mov	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800845e:	f003 031f 	and.w	r3, r3, #31
 8008462:	2b02      	cmp	r3, #2
 8008464:	d01a      	beq.n	800849c <USBD_LL_SetupStage+0x72>
 8008466:	2b02      	cmp	r3, #2
 8008468:	d822      	bhi.n	80084b0 <USBD_LL_SetupStage+0x86>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <USBD_LL_SetupStage+0x4a>
 800846e:	2b01      	cmp	r3, #1
 8008470:	d00a      	beq.n	8008488 <USBD_LL_SetupStage+0x5e>
 8008472:	e01d      	b.n	80084b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fb5f 	bl	8008b40 <USBD_StdDevReq>
 8008482:	4603      	mov	r3, r0
 8008484:	73fb      	strb	r3, [r7, #15]
      break;
 8008486:	e020      	b.n	80084ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fbc7 	bl	8008c24 <USBD_StdItfReq>
 8008496:	4603      	mov	r3, r0
 8008498:	73fb      	strb	r3, [r7, #15]
      break;
 800849a:	e016      	b.n	80084ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fc29 	bl	8008cfc <USBD_StdEPReq>
 80084aa:	4603      	mov	r3, r0
 80084ac:	73fb      	strb	r3, [r7, #15]
      break;
 80084ae:	e00c      	b.n	80084ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f001 fdc6 	bl	800a050 <USBD_LL_StallEP>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]
      break;
 80084c8:	bf00      	nop
  }

  return ret;
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	460b      	mov	r3, r1
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80084e6:	7afb      	ldrb	r3, [r7, #11]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d16e      	bne.n	80085ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80084f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	f040 8098 	bne.w	8008630 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	429a      	cmp	r2, r3
 800850a:	d913      	bls.n	8008534 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	689a      	ldr	r2, [r3, #8]
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	1ad2      	subs	r2, r2, r3
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	4293      	cmp	r3, r2
 8008524:	bf28      	it	cs
 8008526:	4613      	movcs	r3, r2
 8008528:	461a      	mov	r2, r3
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f001 f984 	bl	800983a <USBD_CtlContinueRx>
 8008532:	e07d      	b.n	8008630 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800853a:	f003 031f 	and.w	r3, r3, #31
 800853e:	2b02      	cmp	r3, #2
 8008540:	d014      	beq.n	800856c <USBD_LL_DataOutStage+0x98>
 8008542:	2b02      	cmp	r3, #2
 8008544:	d81d      	bhi.n	8008582 <USBD_LL_DataOutStage+0xae>
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <USBD_LL_DataOutStage+0x7c>
 800854a:	2b01      	cmp	r3, #1
 800854c:	d003      	beq.n	8008556 <USBD_LL_DataOutStage+0x82>
 800854e:	e018      	b.n	8008582 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	75bb      	strb	r3, [r7, #22]
            break;
 8008554:	e018      	b.n	8008588 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800855c:	b2db      	uxtb	r3, r3
 800855e:	4619      	mov	r1, r3
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 fa5e 	bl	8008a22 <USBD_CoreFindIF>
 8008566:	4603      	mov	r3, r0
 8008568:	75bb      	strb	r3, [r7, #22]
            break;
 800856a:	e00d      	b.n	8008588 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008572:	b2db      	uxtb	r3, r3
 8008574:	4619      	mov	r1, r3
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 fa60 	bl	8008a3c <USBD_CoreFindEP>
 800857c:	4603      	mov	r3, r0
 800857e:	75bb      	strb	r3, [r7, #22]
            break;
 8008580:	e002      	b.n	8008588 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008582:	2300      	movs	r3, #0
 8008584:	75bb      	strb	r3, [r7, #22]
            break;
 8008586:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008588:	7dbb      	ldrb	r3, [r7, #22]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d119      	bne.n	80085c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b03      	cmp	r3, #3
 8008598:	d113      	bne.n	80085c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800859a:	7dba      	ldrb	r2, [r7, #22]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	32ae      	adds	r2, #174	; 0xae
 80085a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00b      	beq.n	80085c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80085aa:	7dba      	ldrb	r2, [r7, #22]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80085b2:	7dba      	ldrb	r2, [r7, #22]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	32ae      	adds	r2, #174	; 0xae
 80085b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f001 f94a 	bl	800985c <USBD_CtlSendStatus>
 80085c8:	e032      	b.n	8008630 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80085ca:	7afb      	ldrb	r3, [r7, #11]
 80085cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	4619      	mov	r1, r3
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 fa31 	bl	8008a3c <USBD_CoreFindEP>
 80085da:	4603      	mov	r3, r0
 80085dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085de:	7dbb      	ldrb	r3, [r7, #22]
 80085e0:	2bff      	cmp	r3, #255	; 0xff
 80085e2:	d025      	beq.n	8008630 <USBD_LL_DataOutStage+0x15c>
 80085e4:	7dbb      	ldrb	r3, [r7, #22]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d122      	bne.n	8008630 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d117      	bne.n	8008626 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80085f6:	7dba      	ldrb	r2, [r7, #22]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	32ae      	adds	r2, #174	; 0xae
 80085fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00f      	beq.n	8008626 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008606:	7dba      	ldrb	r2, [r7, #22]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800860e:	7dba      	ldrb	r2, [r7, #22]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	32ae      	adds	r2, #174	; 0xae
 8008614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	7afa      	ldrb	r2, [r7, #11]
 800861c:	4611      	mov	r1, r2
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	4798      	blx	r3
 8008622:	4603      	mov	r3, r0
 8008624:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008626:	7dfb      	ldrb	r3, [r7, #23]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800862c:	7dfb      	ldrb	r3, [r7, #23]
 800862e:	e000      	b.n	8008632 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b086      	sub	sp, #24
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	460b      	mov	r3, r1
 8008644:	607a      	str	r2, [r7, #4]
 8008646:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008648:	7afb      	ldrb	r3, [r7, #11]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d16f      	bne.n	800872e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3314      	adds	r3, #20
 8008652:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800865a:	2b02      	cmp	r3, #2
 800865c:	d15a      	bne.n	8008714 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	689a      	ldr	r2, [r3, #8]
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	429a      	cmp	r2, r3
 8008668:	d914      	bls.n	8008694 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	689a      	ldr	r2, [r3, #8]
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	1ad2      	subs	r2, r2, r3
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	461a      	mov	r2, r3
 800867e:	6879      	ldr	r1, [r7, #4]
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f001 f8ac 	bl	80097de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008686:	2300      	movs	r3, #0
 8008688:	2200      	movs	r2, #0
 800868a:	2100      	movs	r1, #0
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f001 fd89 	bl	800a1a4 <USBD_LL_PrepareReceive>
 8008692:	e03f      	b.n	8008714 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	68da      	ldr	r2, [r3, #12]
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	429a      	cmp	r2, r3
 800869e:	d11c      	bne.n	80086da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	685a      	ldr	r2, [r3, #4]
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d316      	bcc.n	80086da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d20f      	bcs.n	80086da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086ba:	2200      	movs	r2, #0
 80086bc:	2100      	movs	r1, #0
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f001 f88d 	bl	80097de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086cc:	2300      	movs	r3, #0
 80086ce:	2200      	movs	r2, #0
 80086d0:	2100      	movs	r1, #0
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f001 fd66 	bl	800a1a4 <USBD_LL_PrepareReceive>
 80086d8:	e01c      	b.n	8008714 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	d10f      	bne.n	8008706 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d009      	beq.n	8008706 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008706:	2180      	movs	r1, #128	; 0x80
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f001 fca1 	bl	800a050 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f001 f8b7 	bl	8009882 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d03a      	beq.n	8008794 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f7ff fe42 	bl	80083a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800872c:	e032      	b.n	8008794 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800872e:	7afb      	ldrb	r3, [r7, #11]
 8008730:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008734:	b2db      	uxtb	r3, r3
 8008736:	4619      	mov	r1, r3
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 f97f 	bl	8008a3c <USBD_CoreFindEP>
 800873e:	4603      	mov	r3, r0
 8008740:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	2bff      	cmp	r3, #255	; 0xff
 8008746:	d025      	beq.n	8008794 <USBD_LL_DataInStage+0x15a>
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d122      	bne.n	8008794 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b03      	cmp	r3, #3
 8008758:	d11c      	bne.n	8008794 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800875a:	7dfa      	ldrb	r2, [r7, #23]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	32ae      	adds	r2, #174	; 0xae
 8008760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d014      	beq.n	8008794 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800876a:	7dfa      	ldrb	r2, [r7, #23]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008772:	7dfa      	ldrb	r2, [r7, #23]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	32ae      	adds	r2, #174	; 0xae
 8008778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	7afa      	ldrb	r2, [r7, #11]
 8008780:	4611      	mov	r1, r2
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	4798      	blx	r3
 8008786:	4603      	mov	r3, r0
 8008788:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800878a:	7dbb      	ldrb	r3, [r7, #22]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008790:	7dbb      	ldrb	r3, [r7, #22]
 8008792:	e000      	b.n	8008796 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d014      	beq.n	8008804 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00e      	beq.n	8008804 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	6852      	ldr	r2, [r2, #4]
 80087f2:	b2d2      	uxtb	r2, r2
 80087f4:	4611      	mov	r1, r2
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	4798      	blx	r3
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008800:	2303      	movs	r3, #3
 8008802:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008804:	2340      	movs	r3, #64	; 0x40
 8008806:	2200      	movs	r2, #0
 8008808:	2100      	movs	r1, #0
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 fbdb 	bl	8009fc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2240      	movs	r2, #64	; 0x40
 800881c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008820:	2340      	movs	r3, #64	; 0x40
 8008822:	2200      	movs	r2, #0
 8008824:	2180      	movs	r1, #128	; 0x80
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f001 fbcd 	bl	8009fc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2240      	movs	r2, #64	; 0x40
 8008836:	621a      	str	r2, [r3, #32]

  return ret;
 8008838:	7bfb      	ldrb	r3, [r7, #15]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008842:	b480      	push	{r7}
 8008844:	b083      	sub	sp, #12
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	78fa      	ldrb	r2, [r7, #3]
 8008852:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008870:	b2da      	uxtb	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2204      	movs	r2, #4
 800887c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800888e:	b480      	push	{r7}
 8008890:	b083      	sub	sp, #12
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b04      	cmp	r3, #4
 80088a0:	d106      	bne.n	80088b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80088a8:	b2da      	uxtb	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d110      	bne.n	80088f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00b      	beq.n	80088f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d005      	beq.n	80088f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	460b      	mov	r3, r1
 8008908:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	32ae      	adds	r2, #174	; 0xae
 8008914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800891c:	2303      	movs	r3, #3
 800891e:	e01c      	b.n	800895a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b03      	cmp	r3, #3
 800892a:	d115      	bne.n	8008958 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	32ae      	adds	r2, #174	; 0xae
 8008936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800893a:	6a1b      	ldr	r3, [r3, #32]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00b      	beq.n	8008958 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	32ae      	adds	r2, #174	; 0xae
 800894a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	78fa      	ldrb	r2, [r7, #3]
 8008952:	4611      	mov	r1, r2
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b082      	sub	sp, #8
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	32ae      	adds	r2, #174	; 0xae
 8008978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008980:	2303      	movs	r3, #3
 8008982:	e01c      	b.n	80089be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b03      	cmp	r3, #3
 800898e:	d115      	bne.n	80089bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	32ae      	adds	r2, #174	; 0xae
 800899a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	32ae      	adds	r2, #174	; 0xae
 80089ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	78fa      	ldrb	r2, [r7, #3]
 80089b6:	4611      	mov	r1, r2
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b083      	sub	sp, #12
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00e      	beq.n	8008a18 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	6852      	ldr	r2, [r2, #4]
 8008a06:	b2d2      	uxtb	r2, r2
 8008a08:	4611      	mov	r1, r2
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	4798      	blx	r3
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008a14:	2303      	movs	r3, #3
 8008a16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b083      	sub	sp, #12
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a2e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a48:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b086      	sub	sp, #24
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	460b      	mov	r3, r1
 8008a60:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	885b      	ldrh	r3, [r3, #2]
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d920      	bls.n	8008ac0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008a86:	e013      	b.n	8008ab0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008a88:	f107 030a 	add.w	r3, r7, #10
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6978      	ldr	r0, [r7, #20]
 8008a90:	f000 f81b 	bl	8008aca <USBD_GetNextDesc>
 8008a94:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	785b      	ldrb	r3, [r3, #1]
 8008a9a:	2b05      	cmp	r3, #5
 8008a9c:	d108      	bne.n	8008ab0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	789b      	ldrb	r3, [r3, #2]
 8008aa6:	78fa      	ldrb	r2, [r7, #3]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d008      	beq.n	8008abe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008aac:	2300      	movs	r3, #0
 8008aae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	885b      	ldrh	r3, [r3, #2]
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	897b      	ldrh	r3, [r7, #10]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d8e5      	bhi.n	8008a88 <USBD_GetEpDesc+0x32>
 8008abc:	e000      	b.n	8008ac0 <USBD_GetEpDesc+0x6a>
          break;
 8008abe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008ac0:	693b      	ldr	r3, [r7, #16]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3718      	adds	r7, #24
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b085      	sub	sp, #20
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	881a      	ldrh	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	4413      	add	r3, r2
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4413      	add	r3, r2
 8008af4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008af6:	68fb      	ldr	r3, [r7, #12]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008b22:	8a3b      	ldrh	r3, [r7, #16]
 8008b24:	021b      	lsls	r3, r3, #8
 8008b26:	b21a      	sxth	r2, r3
 8008b28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	b21b      	sxth	r3, r3
 8008b30:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008b32:	89fb      	ldrh	r3, [r7, #14]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	371c      	adds	r7, #28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b56:	2b40      	cmp	r3, #64	; 0x40
 8008b58:	d005      	beq.n	8008b66 <USBD_StdDevReq+0x26>
 8008b5a:	2b40      	cmp	r3, #64	; 0x40
 8008b5c:	d857      	bhi.n	8008c0e <USBD_StdDevReq+0xce>
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00f      	beq.n	8008b82 <USBD_StdDevReq+0x42>
 8008b62:	2b20      	cmp	r3, #32
 8008b64:	d153      	bne.n	8008c0e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	32ae      	adds	r2, #174	; 0xae
 8008b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	4798      	blx	r3
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b80:	e04a      	b.n	8008c18 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	785b      	ldrb	r3, [r3, #1]
 8008b86:	2b09      	cmp	r3, #9
 8008b88:	d83b      	bhi.n	8008c02 <USBD_StdDevReq+0xc2>
 8008b8a:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <USBD_StdDevReq+0x50>)
 8008b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b90:	08008be5 	.word	0x08008be5
 8008b94:	08008bf9 	.word	0x08008bf9
 8008b98:	08008c03 	.word	0x08008c03
 8008b9c:	08008bef 	.word	0x08008bef
 8008ba0:	08008c03 	.word	0x08008c03
 8008ba4:	08008bc3 	.word	0x08008bc3
 8008ba8:	08008bb9 	.word	0x08008bb9
 8008bac:	08008c03 	.word	0x08008c03
 8008bb0:	08008bdb 	.word	0x08008bdb
 8008bb4:	08008bcd 	.word	0x08008bcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fa3c 	bl	8009038 <USBD_GetDescriptor>
          break;
 8008bc0:	e024      	b.n	8008c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fba1 	bl	800930c <USBD_SetAddress>
          break;
 8008bca:	e01f      	b.n	8008c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fbe0 	bl	8009394 <USBD_SetConfig>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	73fb      	strb	r3, [r7, #15]
          break;
 8008bd8:	e018      	b.n	8008c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fc83 	bl	80094e8 <USBD_GetConfig>
          break;
 8008be2:	e013      	b.n	8008c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fcb4 	bl	8009554 <USBD_GetStatus>
          break;
 8008bec:	e00e      	b.n	8008c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fce3 	bl	80095bc <USBD_SetFeature>
          break;
 8008bf6:	e009      	b.n	8008c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fd07 	bl	800960e <USBD_ClrFeature>
          break;
 8008c00:	e004      	b.n	8008c0c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fd5e 	bl	80096c6 <USBD_CtlError>
          break;
 8008c0a:	bf00      	nop
      }
      break;
 8008c0c:	e004      	b.n	8008c18 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 fd58 	bl	80096c6 <USBD_CtlError>
      break;
 8008c16:	bf00      	nop
  }

  return ret;
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop

08008c24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c3a:	2b40      	cmp	r3, #64	; 0x40
 8008c3c:	d005      	beq.n	8008c4a <USBD_StdItfReq+0x26>
 8008c3e:	2b40      	cmp	r3, #64	; 0x40
 8008c40:	d852      	bhi.n	8008ce8 <USBD_StdItfReq+0xc4>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <USBD_StdItfReq+0x26>
 8008c46:	2b20      	cmp	r3, #32
 8008c48:	d14e      	bne.n	8008ce8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	3b01      	subs	r3, #1
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d840      	bhi.n	8008cda <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	889b      	ldrh	r3, [r3, #4]
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d836      	bhi.n	8008cd0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	889b      	ldrh	r3, [r3, #4]
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff fed9 	bl	8008a22 <USBD_CoreFindIF>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
 8008c76:	2bff      	cmp	r3, #255	; 0xff
 8008c78:	d01d      	beq.n	8008cb6 <USBD_StdItfReq+0x92>
 8008c7a:	7bbb      	ldrb	r3, [r7, #14]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d11a      	bne.n	8008cb6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008c80:	7bba      	ldrb	r2, [r7, #14]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	32ae      	adds	r2, #174	; 0xae
 8008c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00f      	beq.n	8008cb0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008c90:	7bba      	ldrb	r2, [r7, #14]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c98:	7bba      	ldrb	r2, [r7, #14]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	32ae      	adds	r2, #174	; 0xae
 8008c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	4798      	blx	r3
 8008caa:	4603      	mov	r3, r0
 8008cac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008cae:	e004      	b.n	8008cba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008cb4:	e001      	b.n	8008cba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	88db      	ldrh	r3, [r3, #6]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d110      	bne.n	8008ce4 <USBD_StdItfReq+0xc0>
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10d      	bne.n	8008ce4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fdc7 	bl	800985c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008cce:	e009      	b.n	8008ce4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fcf7 	bl	80096c6 <USBD_CtlError>
          break;
 8008cd8:	e004      	b.n	8008ce4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fcf2 	bl	80096c6 <USBD_CtlError>
          break;
 8008ce2:	e000      	b.n	8008ce6 <USBD_StdItfReq+0xc2>
          break;
 8008ce4:	bf00      	nop
      }
      break;
 8008ce6:	e004      	b.n	8008cf2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fceb 	bl	80096c6 <USBD_CtlError>
      break;
 8008cf0:	bf00      	nop
  }

  return ret;
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	889b      	ldrh	r3, [r3, #4]
 8008d0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d18:	2b40      	cmp	r3, #64	; 0x40
 8008d1a:	d007      	beq.n	8008d2c <USBD_StdEPReq+0x30>
 8008d1c:	2b40      	cmp	r3, #64	; 0x40
 8008d1e:	f200 817f 	bhi.w	8009020 <USBD_StdEPReq+0x324>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d02a      	beq.n	8008d7c <USBD_StdEPReq+0x80>
 8008d26:	2b20      	cmp	r3, #32
 8008d28:	f040 817a 	bne.w	8009020 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7ff fe83 	bl	8008a3c <USBD_CoreFindEP>
 8008d36:	4603      	mov	r3, r0
 8008d38:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d3a:	7b7b      	ldrb	r3, [r7, #13]
 8008d3c:	2bff      	cmp	r3, #255	; 0xff
 8008d3e:	f000 8174 	beq.w	800902a <USBD_StdEPReq+0x32e>
 8008d42:	7b7b      	ldrb	r3, [r7, #13]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f040 8170 	bne.w	800902a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008d4a:	7b7a      	ldrb	r2, [r7, #13]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008d52:	7b7a      	ldrb	r2, [r7, #13]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	32ae      	adds	r2, #174	; 0xae
 8008d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 8163 	beq.w	800902a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008d64:	7b7a      	ldrb	r2, [r7, #13]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	32ae      	adds	r2, #174	; 0xae
 8008d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	4798      	blx	r3
 8008d76:	4603      	mov	r3, r0
 8008d78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008d7a:	e156      	b.n	800902a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	785b      	ldrb	r3, [r3, #1]
 8008d80:	2b03      	cmp	r3, #3
 8008d82:	d008      	beq.n	8008d96 <USBD_StdEPReq+0x9a>
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	f300 8145 	bgt.w	8009014 <USBD_StdEPReq+0x318>
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 809b 	beq.w	8008ec6 <USBD_StdEPReq+0x1ca>
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d03c      	beq.n	8008e0e <USBD_StdEPReq+0x112>
 8008d94:	e13e      	b.n	8009014 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d002      	beq.n	8008da8 <USBD_StdEPReq+0xac>
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d016      	beq.n	8008dd4 <USBD_StdEPReq+0xd8>
 8008da6:	e02c      	b.n	8008e02 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00d      	beq.n	8008dca <USBD_StdEPReq+0xce>
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	2b80      	cmp	r3, #128	; 0x80
 8008db2:	d00a      	beq.n	8008dca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 f949 	bl	800a050 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008dbe:	2180      	movs	r1, #128	; 0x80
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f001 f945 	bl	800a050 <USBD_LL_StallEP>
 8008dc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008dc8:	e020      	b.n	8008e0c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fc7a 	bl	80096c6 <USBD_CtlError>
              break;
 8008dd2:	e01b      	b.n	8008e0c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	885b      	ldrh	r3, [r3, #2]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10e      	bne.n	8008dfa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ddc:	7bbb      	ldrb	r3, [r7, #14]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00b      	beq.n	8008dfa <USBD_StdEPReq+0xfe>
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
 8008de4:	2b80      	cmp	r3, #128	; 0x80
 8008de6:	d008      	beq.n	8008dfa <USBD_StdEPReq+0xfe>
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	88db      	ldrh	r3, [r3, #6]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d104      	bne.n	8008dfa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	4619      	mov	r1, r3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f001 f92b 	bl	800a050 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fd2e 	bl	800985c <USBD_CtlSendStatus>

              break;
 8008e00:	e004      	b.n	8008e0c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fc5e 	bl	80096c6 <USBD_CtlError>
              break;
 8008e0a:	bf00      	nop
          }
          break;
 8008e0c:	e107      	b.n	800901e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d002      	beq.n	8008e20 <USBD_StdEPReq+0x124>
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d016      	beq.n	8008e4c <USBD_StdEPReq+0x150>
 8008e1e:	e04b      	b.n	8008eb8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e20:	7bbb      	ldrb	r3, [r7, #14]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00d      	beq.n	8008e42 <USBD_StdEPReq+0x146>
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
 8008e28:	2b80      	cmp	r3, #128	; 0x80
 8008e2a:	d00a      	beq.n	8008e42 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f001 f90d 	bl	800a050 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e36:	2180      	movs	r1, #128	; 0x80
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f001 f909 	bl	800a050 <USBD_LL_StallEP>
 8008e3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e40:	e040      	b.n	8008ec4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fc3e 	bl	80096c6 <USBD_CtlError>
              break;
 8008e4a:	e03b      	b.n	8008ec4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	885b      	ldrh	r3, [r3, #2]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d136      	bne.n	8008ec2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d004      	beq.n	8008e68 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e5e:	7bbb      	ldrb	r3, [r7, #14]
 8008e60:	4619      	mov	r1, r3
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f001 f913 	bl	800a08e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fcf7 	bl	800985c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7ff fde2 	bl	8008a3c <USBD_CoreFindEP>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e7c:	7b7b      	ldrb	r3, [r7, #13]
 8008e7e:	2bff      	cmp	r3, #255	; 0xff
 8008e80:	d01f      	beq.n	8008ec2 <USBD_StdEPReq+0x1c6>
 8008e82:	7b7b      	ldrb	r3, [r7, #13]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d11c      	bne.n	8008ec2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008e88:	7b7a      	ldrb	r2, [r7, #13]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008e90:	7b7a      	ldrb	r2, [r7, #13]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	32ae      	adds	r2, #174	; 0xae
 8008e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d010      	beq.n	8008ec2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ea0:	7b7a      	ldrb	r2, [r7, #13]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	32ae      	adds	r2, #174	; 0xae
 8008ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	4798      	blx	r3
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008eb6:	e004      	b.n	8008ec2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fc03 	bl	80096c6 <USBD_CtlError>
              break;
 8008ec0:	e000      	b.n	8008ec4 <USBD_StdEPReq+0x1c8>
              break;
 8008ec2:	bf00      	nop
          }
          break;
 8008ec4:	e0ab      	b.n	800901e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d002      	beq.n	8008ed8 <USBD_StdEPReq+0x1dc>
 8008ed2:	2b03      	cmp	r3, #3
 8008ed4:	d032      	beq.n	8008f3c <USBD_StdEPReq+0x240>
 8008ed6:	e097      	b.n	8009008 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d007      	beq.n	8008eee <USBD_StdEPReq+0x1f2>
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
 8008ee0:	2b80      	cmp	r3, #128	; 0x80
 8008ee2:	d004      	beq.n	8008eee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fbed 	bl	80096c6 <USBD_CtlError>
                break;
 8008eec:	e091      	b.n	8009012 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	da0b      	bge.n	8008f0e <USBD_StdEPReq+0x212>
 8008ef6:	7bbb      	ldrb	r3, [r7, #14]
 8008ef8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008efc:	4613      	mov	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	4413      	add	r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	3310      	adds	r3, #16
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	4413      	add	r3, r2
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	e00b      	b.n	8008f26 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f0e:	7bbb      	ldrb	r3, [r7, #14]
 8008f10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f14:	4613      	mov	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	4413      	add	r3, r2
 8008f24:	3304      	adds	r3, #4
 8008f26:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2202      	movs	r2, #2
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fc37 	bl	80097a8 <USBD_CtlSendData>
              break;
 8008f3a:	e06a      	b.n	8009012 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	da11      	bge.n	8008f68 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
 8008f46:	f003 020f 	and.w	r2, r3, #15
 8008f4a:	6879      	ldr	r1, [r7, #4]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4413      	add	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	440b      	add	r3, r1
 8008f56:	3324      	adds	r3, #36	; 0x24
 8008f58:	881b      	ldrh	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d117      	bne.n	8008f8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fbb0 	bl	80096c6 <USBD_CtlError>
                  break;
 8008f66:	e054      	b.n	8009012 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f68:	7bbb      	ldrb	r3, [r7, #14]
 8008f6a:	f003 020f 	and.w	r2, r3, #15
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	4613      	mov	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4413      	add	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	440b      	add	r3, r1
 8008f7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f7e:	881b      	ldrh	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d104      	bne.n	8008f8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fb9d 	bl	80096c6 <USBD_CtlError>
                  break;
 8008f8c:	e041      	b.n	8009012 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	da0b      	bge.n	8008fae <USBD_StdEPReq+0x2b2>
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
 8008f98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	3310      	adds	r3, #16
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	4413      	add	r3, r2
 8008faa:	3304      	adds	r3, #4
 8008fac:	e00b      	b.n	8008fc6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fae:	7bbb      	ldrb	r3, [r7, #14]
 8008fb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d002      	beq.n	8008fd4 <USBD_StdEPReq+0x2d8>
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
 8008fd0:	2b80      	cmp	r3, #128	; 0x80
 8008fd2:	d103      	bne.n	8008fdc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	e00e      	b.n	8008ffa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f001 f873 	bl	800a0cc <USBD_LL_IsStallEP>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d003      	beq.n	8008ff4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	601a      	str	r2, [r3, #0]
 8008ff2:	e002      	b.n	8008ffa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fbd1 	bl	80097a8 <USBD_CtlSendData>
              break;
 8009006:	e004      	b.n	8009012 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009008:	6839      	ldr	r1, [r7, #0]
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fb5b 	bl	80096c6 <USBD_CtlError>
              break;
 8009010:	bf00      	nop
          }
          break;
 8009012:	e004      	b.n	800901e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009014:	6839      	ldr	r1, [r7, #0]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fb55 	bl	80096c6 <USBD_CtlError>
          break;
 800901c:	bf00      	nop
      }
      break;
 800901e:	e005      	b.n	800902c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fb4f 	bl	80096c6 <USBD_CtlError>
      break;
 8009028:	e000      	b.n	800902c <USBD_StdEPReq+0x330>
      break;
 800902a:	bf00      	nop
  }

  return ret;
 800902c:	7bfb      	ldrb	r3, [r7, #15]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009042:	2300      	movs	r3, #0
 8009044:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009046:	2300      	movs	r3, #0
 8009048:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800904a:	2300      	movs	r3, #0
 800904c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	885b      	ldrh	r3, [r3, #2]
 8009052:	0a1b      	lsrs	r3, r3, #8
 8009054:	b29b      	uxth	r3, r3
 8009056:	3b01      	subs	r3, #1
 8009058:	2b06      	cmp	r3, #6
 800905a:	f200 8128 	bhi.w	80092ae <USBD_GetDescriptor+0x276>
 800905e:	a201      	add	r2, pc, #4	; (adr r2, 8009064 <USBD_GetDescriptor+0x2c>)
 8009060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009064:	08009081 	.word	0x08009081
 8009068:	08009099 	.word	0x08009099
 800906c:	080090d9 	.word	0x080090d9
 8009070:	080092af 	.word	0x080092af
 8009074:	080092af 	.word	0x080092af
 8009078:	0800924f 	.word	0x0800924f
 800907c:	0800927b 	.word	0x0800927b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	7c12      	ldrb	r2, [r2, #16]
 800908c:	f107 0108 	add.w	r1, r7, #8
 8009090:	4610      	mov	r0, r2
 8009092:	4798      	blx	r3
 8009094:	60f8      	str	r0, [r7, #12]
      break;
 8009096:	e112      	b.n	80092be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	7c1b      	ldrb	r3, [r3, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10d      	bne.n	80090bc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a8:	f107 0208 	add.w	r2, r7, #8
 80090ac:	4610      	mov	r0, r2
 80090ae:	4798      	blx	r3
 80090b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	3301      	adds	r3, #1
 80090b6:	2202      	movs	r2, #2
 80090b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80090ba:	e100      	b.n	80092be <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c4:	f107 0208 	add.w	r2, r7, #8
 80090c8:	4610      	mov	r0, r2
 80090ca:	4798      	blx	r3
 80090cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3301      	adds	r3, #1
 80090d2:	2202      	movs	r2, #2
 80090d4:	701a      	strb	r2, [r3, #0]
      break;
 80090d6:	e0f2      	b.n	80092be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	885b      	ldrh	r3, [r3, #2]
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b05      	cmp	r3, #5
 80090e0:	f200 80ac 	bhi.w	800923c <USBD_GetDescriptor+0x204>
 80090e4:	a201      	add	r2, pc, #4	; (adr r2, 80090ec <USBD_GetDescriptor+0xb4>)
 80090e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ea:	bf00      	nop
 80090ec:	08009105 	.word	0x08009105
 80090f0:	08009139 	.word	0x08009139
 80090f4:	0800916d 	.word	0x0800916d
 80090f8:	080091a1 	.word	0x080091a1
 80090fc:	080091d5 	.word	0x080091d5
 8009100:	08009209 	.word	0x08009209
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00b      	beq.n	8009128 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	7c12      	ldrb	r2, [r2, #16]
 800911c:	f107 0108 	add.w	r1, r7, #8
 8009120:	4610      	mov	r0, r2
 8009122:	4798      	blx	r3
 8009124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009126:	e091      	b.n	800924c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 facb 	bl	80096c6 <USBD_CtlError>
            err++;
 8009130:	7afb      	ldrb	r3, [r7, #11]
 8009132:	3301      	adds	r3, #1
 8009134:	72fb      	strb	r3, [r7, #11]
          break;
 8009136:	e089      	b.n	800924c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00b      	beq.n	800915c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	7c12      	ldrb	r2, [r2, #16]
 8009150:	f107 0108 	add.w	r1, r7, #8
 8009154:	4610      	mov	r0, r2
 8009156:	4798      	blx	r3
 8009158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800915a:	e077      	b.n	800924c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fab1 	bl	80096c6 <USBD_CtlError>
            err++;
 8009164:	7afb      	ldrb	r3, [r7, #11]
 8009166:	3301      	adds	r3, #1
 8009168:	72fb      	strb	r3, [r7, #11]
          break;
 800916a:	e06f      	b.n	800924c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00b      	beq.n	8009190 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	7c12      	ldrb	r2, [r2, #16]
 8009184:	f107 0108 	add.w	r1, r7, #8
 8009188:	4610      	mov	r0, r2
 800918a:	4798      	blx	r3
 800918c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800918e:	e05d      	b.n	800924c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fa97 	bl	80096c6 <USBD_CtlError>
            err++;
 8009198:	7afb      	ldrb	r3, [r7, #11]
 800919a:	3301      	adds	r3, #1
 800919c:	72fb      	strb	r3, [r7, #11]
          break;
 800919e:	e055      	b.n	800924c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00b      	beq.n	80091c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	7c12      	ldrb	r2, [r2, #16]
 80091b8:	f107 0108 	add.w	r1, r7, #8
 80091bc:	4610      	mov	r0, r2
 80091be:	4798      	blx	r3
 80091c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091c2:	e043      	b.n	800924c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fa7d 	bl	80096c6 <USBD_CtlError>
            err++;
 80091cc:	7afb      	ldrb	r3, [r7, #11]
 80091ce:	3301      	adds	r3, #1
 80091d0:	72fb      	strb	r3, [r7, #11]
          break;
 80091d2:	e03b      	b.n	800924c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00b      	beq.n	80091f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091e6:	695b      	ldr	r3, [r3, #20]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	7c12      	ldrb	r2, [r2, #16]
 80091ec:	f107 0108 	add.w	r1, r7, #8
 80091f0:	4610      	mov	r0, r2
 80091f2:	4798      	blx	r3
 80091f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091f6:	e029      	b.n	800924c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fa63 	bl	80096c6 <USBD_CtlError>
            err++;
 8009200:	7afb      	ldrb	r3, [r7, #11]
 8009202:	3301      	adds	r3, #1
 8009204:	72fb      	strb	r3, [r7, #11]
          break;
 8009206:	e021      	b.n	800924c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00b      	beq.n	800922c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	7c12      	ldrb	r2, [r2, #16]
 8009220:	f107 0108 	add.w	r1, r7, #8
 8009224:	4610      	mov	r0, r2
 8009226:	4798      	blx	r3
 8009228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800922a:	e00f      	b.n	800924c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800922c:	6839      	ldr	r1, [r7, #0]
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fa49 	bl	80096c6 <USBD_CtlError>
            err++;
 8009234:	7afb      	ldrb	r3, [r7, #11]
 8009236:	3301      	adds	r3, #1
 8009238:	72fb      	strb	r3, [r7, #11]
          break;
 800923a:	e007      	b.n	800924c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fa41 	bl	80096c6 <USBD_CtlError>
          err++;
 8009244:	7afb      	ldrb	r3, [r7, #11]
 8009246:	3301      	adds	r3, #1
 8009248:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800924a:	bf00      	nop
      }
      break;
 800924c:	e037      	b.n	80092be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	7c1b      	ldrb	r3, [r3, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d109      	bne.n	800926a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800925e:	f107 0208 	add.w	r2, r7, #8
 8009262:	4610      	mov	r0, r2
 8009264:	4798      	blx	r3
 8009266:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009268:	e029      	b.n	80092be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800926a:	6839      	ldr	r1, [r7, #0]
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fa2a 	bl	80096c6 <USBD_CtlError>
        err++;
 8009272:	7afb      	ldrb	r3, [r7, #11]
 8009274:	3301      	adds	r3, #1
 8009276:	72fb      	strb	r3, [r7, #11]
      break;
 8009278:	e021      	b.n	80092be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	7c1b      	ldrb	r3, [r3, #16]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10d      	bne.n	800929e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928a:	f107 0208 	add.w	r2, r7, #8
 800928e:	4610      	mov	r0, r2
 8009290:	4798      	blx	r3
 8009292:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	3301      	adds	r3, #1
 8009298:	2207      	movs	r2, #7
 800929a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800929c:	e00f      	b.n	80092be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fa10 	bl	80096c6 <USBD_CtlError>
        err++;
 80092a6:	7afb      	ldrb	r3, [r7, #11]
 80092a8:	3301      	adds	r3, #1
 80092aa:	72fb      	strb	r3, [r7, #11]
      break;
 80092ac:	e007      	b.n	80092be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fa08 	bl	80096c6 <USBD_CtlError>
      err++;
 80092b6:	7afb      	ldrb	r3, [r7, #11]
 80092b8:	3301      	adds	r3, #1
 80092ba:	72fb      	strb	r3, [r7, #11]
      break;
 80092bc:	bf00      	nop
  }

  if (err != 0U)
 80092be:	7afb      	ldrb	r3, [r7, #11]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d11e      	bne.n	8009302 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	88db      	ldrh	r3, [r3, #6]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d016      	beq.n	80092fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80092cc:	893b      	ldrh	r3, [r7, #8]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00e      	beq.n	80092f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	88da      	ldrh	r2, [r3, #6]
 80092d6:	893b      	ldrh	r3, [r7, #8]
 80092d8:	4293      	cmp	r3, r2
 80092da:	bf28      	it	cs
 80092dc:	4613      	movcs	r3, r2
 80092de:	b29b      	uxth	r3, r3
 80092e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80092e2:	893b      	ldrh	r3, [r7, #8]
 80092e4:	461a      	mov	r2, r3
 80092e6:	68f9      	ldr	r1, [r7, #12]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fa5d 	bl	80097a8 <USBD_CtlSendData>
 80092ee:	e009      	b.n	8009304 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f9e7 	bl	80096c6 <USBD_CtlError>
 80092f8:	e004      	b.n	8009304 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 faae 	bl	800985c <USBD_CtlSendStatus>
 8009300:	e000      	b.n	8009304 <USBD_GetDescriptor+0x2cc>
    return;
 8009302:	bf00      	nop
  }
}
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop

0800930c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	889b      	ldrh	r3, [r3, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d131      	bne.n	8009382 <USBD_SetAddress+0x76>
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	88db      	ldrh	r3, [r3, #6]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d12d      	bne.n	8009382 <USBD_SetAddress+0x76>
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	885b      	ldrh	r3, [r3, #2]
 800932a:	2b7f      	cmp	r3, #127	; 0x7f
 800932c:	d829      	bhi.n	8009382 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	885b      	ldrh	r3, [r3, #2]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009338:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b03      	cmp	r3, #3
 8009344:	d104      	bne.n	8009350 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009346:	6839      	ldr	r1, [r7, #0]
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f9bc 	bl	80096c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800934e:	e01d      	b.n	800938c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	7bfa      	ldrb	r2, [r7, #15]
 8009354:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009358:	7bfb      	ldrb	r3, [r7, #15]
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fee1 	bl	800a124 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fa7a 	bl	800985c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009368:	7bfb      	ldrb	r3, [r7, #15]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d004      	beq.n	8009378 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2202      	movs	r2, #2
 8009372:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009376:	e009      	b.n	800938c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009380:	e004      	b.n	800938c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f99e 	bl	80096c6 <USBD_CtlError>
  }
}
 800938a:	bf00      	nop
 800938c:	bf00      	nop
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	885b      	ldrh	r3, [r3, #2]
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	4b4e      	ldr	r3, [pc, #312]	; (80094e4 <USBD_SetConfig+0x150>)
 80093aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80093ac:	4b4d      	ldr	r3, [pc, #308]	; (80094e4 <USBD_SetConfig+0x150>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d905      	bls.n	80093c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f985 	bl	80096c6 <USBD_CtlError>
    return USBD_FAIL;
 80093bc:	2303      	movs	r3, #3
 80093be:	e08c      	b.n	80094da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d002      	beq.n	80093d2 <USBD_SetConfig+0x3e>
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	d029      	beq.n	8009424 <USBD_SetConfig+0x90>
 80093d0:	e075      	b.n	80094be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80093d2:	4b44      	ldr	r3, [pc, #272]	; (80094e4 <USBD_SetConfig+0x150>)
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d020      	beq.n	800941c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80093da:	4b42      	ldr	r3, [pc, #264]	; (80094e4 <USBD_SetConfig+0x150>)
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80093e4:	4b3f      	ldr	r3, [pc, #252]	; (80094e4 <USBD_SetConfig+0x150>)
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7fe ffe7 	bl	80083be <USBD_SetClassConfig>
 80093f0:	4603      	mov	r3, r0
 80093f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d008      	beq.n	800940c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f962 	bl	80096c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2202      	movs	r2, #2
 8009406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800940a:	e065      	b.n	80094d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fa25 	bl	800985c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2203      	movs	r2, #3
 8009416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800941a:	e05d      	b.n	80094d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fa1d 	bl	800985c <USBD_CtlSendStatus>
      break;
 8009422:	e059      	b.n	80094d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009424:	4b2f      	ldr	r3, [pc, #188]	; (80094e4 <USBD_SetConfig+0x150>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d112      	bne.n	8009452 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2202      	movs	r2, #2
 8009430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009434:	4b2b      	ldr	r3, [pc, #172]	; (80094e4 <USBD_SetConfig+0x150>)
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	461a      	mov	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800943e:	4b29      	ldr	r3, [pc, #164]	; (80094e4 <USBD_SetConfig+0x150>)
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7fe ffd6 	bl	80083f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fa06 	bl	800985c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009450:	e042      	b.n	80094d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009452:	4b24      	ldr	r3, [pc, #144]	; (80094e4 <USBD_SetConfig+0x150>)
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	461a      	mov	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	429a      	cmp	r2, r3
 800945e:	d02a      	beq.n	80094b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	b2db      	uxtb	r3, r3
 8009466:	4619      	mov	r1, r3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f7fe ffc4 	bl	80083f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800946e:	4b1d      	ldr	r3, [pc, #116]	; (80094e4 <USBD_SetConfig+0x150>)
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009478:	4b1a      	ldr	r3, [pc, #104]	; (80094e4 <USBD_SetConfig+0x150>)
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	4619      	mov	r1, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f7fe ff9d 	bl	80083be <USBD_SetClassConfig>
 8009484:	4603      	mov	r3, r0
 8009486:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00f      	beq.n	80094ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f918 	bl	80096c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	b2db      	uxtb	r3, r3
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7fe ffa9 	bl	80083f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2202      	movs	r2, #2
 80094a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80094ac:	e014      	b.n	80094d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f9d4 	bl	800985c <USBD_CtlSendStatus>
      break;
 80094b4:	e010      	b.n	80094d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f9d0 	bl	800985c <USBD_CtlSendStatus>
      break;
 80094bc:	e00c      	b.n	80094d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f900 	bl	80096c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094c6:	4b07      	ldr	r3, [pc, #28]	; (80094e4 <USBD_SetConfig+0x150>)
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7fe ff92 	bl	80083f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80094d2:	2303      	movs	r3, #3
 80094d4:	73fb      	strb	r3, [r7, #15]
      break;
 80094d6:	bf00      	nop
  }

  return ret;
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	200003b8 	.word	0x200003b8

080094e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	88db      	ldrh	r3, [r3, #6]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d004      	beq.n	8009504 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f8e2 	bl	80096c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009502:	e023      	b.n	800954c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800950a:	b2db      	uxtb	r3, r3
 800950c:	2b02      	cmp	r3, #2
 800950e:	dc02      	bgt.n	8009516 <USBD_GetConfig+0x2e>
 8009510:	2b00      	cmp	r3, #0
 8009512:	dc03      	bgt.n	800951c <USBD_GetConfig+0x34>
 8009514:	e015      	b.n	8009542 <USBD_GetConfig+0x5a>
 8009516:	2b03      	cmp	r3, #3
 8009518:	d00b      	beq.n	8009532 <USBD_GetConfig+0x4a>
 800951a:	e012      	b.n	8009542 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	3308      	adds	r3, #8
 8009526:	2201      	movs	r2, #1
 8009528:	4619      	mov	r1, r3
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f93c 	bl	80097a8 <USBD_CtlSendData>
        break;
 8009530:	e00c      	b.n	800954c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	3304      	adds	r3, #4
 8009536:	2201      	movs	r2, #1
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f934 	bl	80097a8 <USBD_CtlSendData>
        break;
 8009540:	e004      	b.n	800954c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 f8be 	bl	80096c6 <USBD_CtlError>
        break;
 800954a:	bf00      	nop
}
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009564:	b2db      	uxtb	r3, r3
 8009566:	3b01      	subs	r3, #1
 8009568:	2b02      	cmp	r3, #2
 800956a:	d81e      	bhi.n	80095aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	88db      	ldrh	r3, [r3, #6]
 8009570:	2b02      	cmp	r3, #2
 8009572:	d004      	beq.n	800957e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f8a5 	bl	80096c6 <USBD_CtlError>
        break;
 800957c:	e01a      	b.n	80095b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2201      	movs	r2, #1
 8009582:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800958a:	2b00      	cmp	r3, #0
 800958c:	d005      	beq.n	800959a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	f043 0202 	orr.w	r2, r3, #2
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	330c      	adds	r3, #12
 800959e:	2202      	movs	r2, #2
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f900 	bl	80097a8 <USBD_CtlSendData>
      break;
 80095a8:	e004      	b.n	80095b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f88a 	bl	80096c6 <USBD_CtlError>
      break;
 80095b2:	bf00      	nop
  }
}
 80095b4:	bf00      	nop
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	885b      	ldrh	r3, [r3, #2]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d107      	bne.n	80095de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f940 	bl	800985c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80095dc:	e013      	b.n	8009606 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	885b      	ldrh	r3, [r3, #2]
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d10b      	bne.n	80095fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	889b      	ldrh	r3, [r3, #4]
 80095ea:	0a1b      	lsrs	r3, r3, #8
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	b2da      	uxtb	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f930 	bl	800985c <USBD_CtlSendStatus>
}
 80095fc:	e003      	b.n	8009606 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f860 	bl	80096c6 <USBD_CtlError>
}
 8009606:	bf00      	nop
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800961e:	b2db      	uxtb	r3, r3
 8009620:	3b01      	subs	r3, #1
 8009622:	2b02      	cmp	r3, #2
 8009624:	d80b      	bhi.n	800963e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	885b      	ldrh	r3, [r3, #2]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d10c      	bne.n	8009648 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f910 	bl	800985c <USBD_CtlSendStatus>
      }
      break;
 800963c:	e004      	b.n	8009648 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f840 	bl	80096c6 <USBD_CtlError>
      break;
 8009646:	e000      	b.n	800964a <USBD_ClrFeature+0x3c>
      break;
 8009648:	bf00      	nop
  }
}
 800964a:	bf00      	nop
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b084      	sub	sp, #16
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	781a      	ldrb	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	3301      	adds	r3, #1
 800966c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	781a      	ldrb	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	3301      	adds	r3, #1
 800967a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f7ff fa41 	bl	8008b04 <SWAPBYTE>
 8009682:	4603      	mov	r3, r0
 8009684:	461a      	mov	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3301      	adds	r3, #1
 800968e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	3301      	adds	r3, #1
 8009694:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f7ff fa34 	bl	8008b04 <SWAPBYTE>
 800969c:	4603      	mov	r3, r0
 800969e:	461a      	mov	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	3301      	adds	r3, #1
 80096a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3301      	adds	r3, #1
 80096ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f7ff fa27 	bl	8008b04 <SWAPBYTE>
 80096b6:	4603      	mov	r3, r0
 80096b8:	461a      	mov	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	80da      	strh	r2, [r3, #6]
}
 80096be:	bf00      	nop
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b082      	sub	sp, #8
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80096d0:	2180      	movs	r1, #128	; 0x80
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fcbc 	bl	800a050 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80096d8:	2100      	movs	r1, #0
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fcb8 	bl	800a050 <USBD_LL_StallEP>
}
 80096e0:	bf00      	nop
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80096f4:	2300      	movs	r3, #0
 80096f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d036      	beq.n	800976c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009702:	6938      	ldr	r0, [r7, #16]
 8009704:	f000 f836 	bl	8009774 <USBD_GetLen>
 8009708:	4603      	mov	r3, r0
 800970a:	3301      	adds	r3, #1
 800970c:	b29b      	uxth	r3, r3
 800970e:	005b      	lsls	r3, r3, #1
 8009710:	b29a      	uxth	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009716:	7dfb      	ldrb	r3, [r7, #23]
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	4413      	add	r3, r2
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	7812      	ldrb	r2, [r2, #0]
 8009720:	701a      	strb	r2, [r3, #0]
  idx++;
 8009722:	7dfb      	ldrb	r3, [r7, #23]
 8009724:	3301      	adds	r3, #1
 8009726:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009728:	7dfb      	ldrb	r3, [r7, #23]
 800972a:	68ba      	ldr	r2, [r7, #8]
 800972c:	4413      	add	r3, r2
 800972e:	2203      	movs	r2, #3
 8009730:	701a      	strb	r2, [r3, #0]
  idx++;
 8009732:	7dfb      	ldrb	r3, [r7, #23]
 8009734:	3301      	adds	r3, #1
 8009736:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009738:	e013      	b.n	8009762 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	4413      	add	r3, r2
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	7812      	ldrb	r2, [r2, #0]
 8009744:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	3301      	adds	r3, #1
 800974a:	613b      	str	r3, [r7, #16]
    idx++;
 800974c:	7dfb      	ldrb	r3, [r7, #23]
 800974e:	3301      	adds	r3, #1
 8009750:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009752:	7dfb      	ldrb	r3, [r7, #23]
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	4413      	add	r3, r2
 8009758:	2200      	movs	r2, #0
 800975a:	701a      	strb	r2, [r3, #0]
    idx++;
 800975c:	7dfb      	ldrb	r3, [r7, #23]
 800975e:	3301      	adds	r3, #1
 8009760:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1e7      	bne.n	800973a <USBD_GetString+0x52>
 800976a:	e000      	b.n	800976e <USBD_GetString+0x86>
    return;
 800976c:	bf00      	nop
  }
}
 800976e:	3718      	adds	r7, #24
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800977c:	2300      	movs	r3, #0
 800977e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009784:	e005      	b.n	8009792 <USBD_GetLen+0x1e>
  {
    len++;
 8009786:	7bfb      	ldrb	r3, [r7, #15]
 8009788:	3301      	adds	r3, #1
 800978a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	3301      	adds	r3, #1
 8009790:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1f5      	bne.n	8009786 <USBD_GetLen+0x12>
  }

  return len;
 800979a:	7bfb      	ldrb	r3, [r7, #15]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2202      	movs	r2, #2
 80097b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	2100      	movs	r1, #0
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f000 fcc7 	bl	800a162 <USBD_LL_Transmit>

  return USBD_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	60f8      	str	r0, [r7, #12]
 80097e6:	60b9      	str	r1, [r7, #8]
 80097e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	2100      	movs	r1, #0
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f000 fcb6 	bl	800a162 <USBD_LL_Transmit>

  return USBD_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2203      	movs	r2, #3
 8009810:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	2100      	movs	r1, #0
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 fcba 	bl	800a1a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b084      	sub	sp, #16
 800983e:	af00      	add	r7, sp, #0
 8009840:	60f8      	str	r0, [r7, #12]
 8009842:	60b9      	str	r1, [r7, #8]
 8009844:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	2100      	movs	r1, #0
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f000 fca9 	bl	800a1a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2204      	movs	r2, #4
 8009868:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800986c:	2300      	movs	r3, #0
 800986e:	2200      	movs	r2, #0
 8009870:	2100      	movs	r1, #0
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fc75 	bl	800a162 <USBD_LL_Transmit>

  return USBD_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b082      	sub	sp, #8
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2205      	movs	r2, #5
 800988e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009892:	2300      	movs	r3, #0
 8009894:	2200      	movs	r2, #0
 8009896:	2100      	movs	r1, #0
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fc83 	bl	800a1a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80098ac:	2201      	movs	r2, #1
 80098ae:	4912      	ldr	r1, [pc, #72]	; (80098f8 <MX_USB_DEVICE_Init+0x50>)
 80098b0:	4812      	ldr	r0, [pc, #72]	; (80098fc <MX_USB_DEVICE_Init+0x54>)
 80098b2:	f7fe fd07 	bl	80082c4 <USBD_Init>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80098bc:	f7f6 feda 	bl	8000674 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80098c0:	490f      	ldr	r1, [pc, #60]	; (8009900 <MX_USB_DEVICE_Init+0x58>)
 80098c2:	480e      	ldr	r0, [pc, #56]	; (80098fc <MX_USB_DEVICE_Init+0x54>)
 80098c4:	f7fe fd2e 	bl	8008324 <USBD_RegisterClass>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d001      	beq.n	80098d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80098ce:	f7f6 fed1 	bl	8000674 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80098d2:	490c      	ldr	r1, [pc, #48]	; (8009904 <MX_USB_DEVICE_Init+0x5c>)
 80098d4:	4809      	ldr	r0, [pc, #36]	; (80098fc <MX_USB_DEVICE_Init+0x54>)
 80098d6:	f7fe fc65 	bl	80081a4 <USBD_CDC_RegisterInterface>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d001      	beq.n	80098e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80098e0:	f7f6 fec8 	bl	8000674 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80098e4:	4805      	ldr	r0, [pc, #20]	; (80098fc <MX_USB_DEVICE_Init+0x54>)
 80098e6:	f7fe fd53 	bl	8008390 <USBD_Start>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80098f0:	f7f6 fec0 	bl	8000674 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80098f4:	bf00      	nop
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	200000f4 	.word	0x200000f4
 80098fc:	200003bc 	.word	0x200003bc
 8009900:	20000060 	.word	0x20000060
 8009904:	200000e0 	.word	0x200000e0

08009908 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800990c:	2200      	movs	r2, #0
 800990e:	4905      	ldr	r1, [pc, #20]	; (8009924 <CDC_Init_HS+0x1c>)
 8009910:	4805      	ldr	r0, [pc, #20]	; (8009928 <CDC_Init_HS+0x20>)
 8009912:	f7fe fc61 	bl	80081d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8009916:	4905      	ldr	r1, [pc, #20]	; (800992c <CDC_Init_HS+0x24>)
 8009918:	4803      	ldr	r0, [pc, #12]	; (8009928 <CDC_Init_HS+0x20>)
 800991a:	f7fe fc7f 	bl	800821c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800991e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009920:	4618      	mov	r0, r3
 8009922:	bd80      	pop	{r7, pc}
 8009924:	20000e98 	.word	0x20000e98
 8009928:	200003bc 	.word	0x200003bc
 800992c:	20000698 	.word	0x20000698

08009930 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8009930:	b480      	push	{r7}
 8009932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8009934:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8009936:	4618      	mov	r0, r3
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	4603      	mov	r3, r0
 8009948:	6039      	str	r1, [r7, #0]
 800994a:	71fb      	strb	r3, [r7, #7]
 800994c:	4613      	mov	r3, r2
 800994e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	2b23      	cmp	r3, #35	; 0x23
 8009954:	d84a      	bhi.n	80099ec <CDC_Control_HS+0xac>
 8009956:	a201      	add	r2, pc, #4	; (adr r2, 800995c <CDC_Control_HS+0x1c>)
 8009958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995c:	080099ed 	.word	0x080099ed
 8009960:	080099ed 	.word	0x080099ed
 8009964:	080099ed 	.word	0x080099ed
 8009968:	080099ed 	.word	0x080099ed
 800996c:	080099ed 	.word	0x080099ed
 8009970:	080099ed 	.word	0x080099ed
 8009974:	080099ed 	.word	0x080099ed
 8009978:	080099ed 	.word	0x080099ed
 800997c:	080099ed 	.word	0x080099ed
 8009980:	080099ed 	.word	0x080099ed
 8009984:	080099ed 	.word	0x080099ed
 8009988:	080099ed 	.word	0x080099ed
 800998c:	080099ed 	.word	0x080099ed
 8009990:	080099ed 	.word	0x080099ed
 8009994:	080099ed 	.word	0x080099ed
 8009998:	080099ed 	.word	0x080099ed
 800999c:	080099ed 	.word	0x080099ed
 80099a0:	080099ed 	.word	0x080099ed
 80099a4:	080099ed 	.word	0x080099ed
 80099a8:	080099ed 	.word	0x080099ed
 80099ac:	080099ed 	.word	0x080099ed
 80099b0:	080099ed 	.word	0x080099ed
 80099b4:	080099ed 	.word	0x080099ed
 80099b8:	080099ed 	.word	0x080099ed
 80099bc:	080099ed 	.word	0x080099ed
 80099c0:	080099ed 	.word	0x080099ed
 80099c4:	080099ed 	.word	0x080099ed
 80099c8:	080099ed 	.word	0x080099ed
 80099cc:	080099ed 	.word	0x080099ed
 80099d0:	080099ed 	.word	0x080099ed
 80099d4:	080099ed 	.word	0x080099ed
 80099d8:	080099ed 	.word	0x080099ed
 80099dc:	080099ed 	.word	0x080099ed
 80099e0:	080099ed 	.word	0x080099ed
 80099e4:	080099ed 	.word	0x080099ed
 80099e8:	080099ed 	.word	0x080099ed
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80099ec:	bf00      	nop
  }

  return (USBD_OK);
 80099ee:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8009a06:	6879      	ldr	r1, [r7, #4]
 8009a08:	4805      	ldr	r0, [pc, #20]	; (8009a20 <CDC_Receive_HS+0x24>)
 8009a0a:	f7fe fc07 	bl	800821c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8009a0e:	4804      	ldr	r0, [pc, #16]	; (8009a20 <CDC_Receive_HS+0x24>)
 8009a10:	f7fe fc22 	bl	8008258 <USBD_CDC_ReceivePacket>
//  CDC_Transmit_HS(Buf, *Len);
  return (USBD_OK);
 8009a14:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	200003bc 	.word	0x200003bc

08009a24 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b087      	sub	sp, #28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8009a36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	371c      	adds	r7, #28
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
	...

08009a48 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	6039      	str	r1, [r7, #0]
 8009a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2212      	movs	r2, #18
 8009a58:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009a5a:	4b03      	ldr	r3, [pc, #12]	; (8009a68 <USBD_HS_DeviceDescriptor+0x20>)
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	20000110 	.word	0x20000110

08009a6c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	6039      	str	r1, [r7, #0]
 8009a76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	2204      	movs	r2, #4
 8009a7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a7e:	4b03      	ldr	r3, [pc, #12]	; (8009a8c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	20000124 	.word	0x20000124

08009a90 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	4603      	mov	r3, r0
 8009a98:	6039      	str	r1, [r7, #0]
 8009a9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a9c:	79fb      	ldrb	r3, [r7, #7]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d105      	bne.n	8009aae <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009aa2:	683a      	ldr	r2, [r7, #0]
 8009aa4:	4907      	ldr	r1, [pc, #28]	; (8009ac4 <USBD_HS_ProductStrDescriptor+0x34>)
 8009aa6:	4808      	ldr	r0, [pc, #32]	; (8009ac8 <USBD_HS_ProductStrDescriptor+0x38>)
 8009aa8:	f7ff fe1e 	bl	80096e8 <USBD_GetString>
 8009aac:	e004      	b.n	8009ab8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	4904      	ldr	r1, [pc, #16]	; (8009ac4 <USBD_HS_ProductStrDescriptor+0x34>)
 8009ab2:	4805      	ldr	r0, [pc, #20]	; (8009ac8 <USBD_HS_ProductStrDescriptor+0x38>)
 8009ab4:	f7ff fe18 	bl	80096e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ab8:	4b02      	ldr	r3, [pc, #8]	; (8009ac4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	20001698 	.word	0x20001698
 8009ac8:	0800a314 	.word	0x0800a314

08009acc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	6039      	str	r1, [r7, #0]
 8009ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	4904      	ldr	r1, [pc, #16]	; (8009aec <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009adc:	4804      	ldr	r0, [pc, #16]	; (8009af0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009ade:	f7ff fe03 	bl	80096e8 <USBD_GetString>
  return USBD_StrDesc;
 8009ae2:	4b02      	ldr	r3, [pc, #8]	; (8009aec <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	20001698 	.word	0x20001698
 8009af0:	0800a32c 	.word	0x0800a32c

08009af4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	6039      	str	r1, [r7, #0]
 8009afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	221a      	movs	r2, #26
 8009b04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b06:	f000 f843 	bl	8009b90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009b0a:	4b02      	ldr	r3, [pc, #8]	; (8009b14 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	20000128 	.word	0x20000128

08009b18 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	4603      	mov	r3, r0
 8009b20:	6039      	str	r1, [r7, #0]
 8009b22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b24:	79fb      	ldrb	r3, [r7, #7]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d105      	bne.n	8009b36 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	4907      	ldr	r1, [pc, #28]	; (8009b4c <USBD_HS_ConfigStrDescriptor+0x34>)
 8009b2e:	4808      	ldr	r0, [pc, #32]	; (8009b50 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009b30:	f7ff fdda 	bl	80096e8 <USBD_GetString>
 8009b34:	e004      	b.n	8009b40 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	4904      	ldr	r1, [pc, #16]	; (8009b4c <USBD_HS_ConfigStrDescriptor+0x34>)
 8009b3a:	4805      	ldr	r0, [pc, #20]	; (8009b50 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009b3c:	f7ff fdd4 	bl	80096e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b40:	4b02      	ldr	r3, [pc, #8]	; (8009b4c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	20001698 	.word	0x20001698
 8009b50:	0800a340 	.word	0x0800a340

08009b54 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	6039      	str	r1, [r7, #0]
 8009b5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b60:	79fb      	ldrb	r3, [r7, #7]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d105      	bne.n	8009b72 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009b66:	683a      	ldr	r2, [r7, #0]
 8009b68:	4907      	ldr	r1, [pc, #28]	; (8009b88 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009b6a:	4808      	ldr	r0, [pc, #32]	; (8009b8c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009b6c:	f7ff fdbc 	bl	80096e8 <USBD_GetString>
 8009b70:	e004      	b.n	8009b7c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	4904      	ldr	r1, [pc, #16]	; (8009b88 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009b76:	4805      	ldr	r0, [pc, #20]	; (8009b8c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009b78:	f7ff fdb6 	bl	80096e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b7c:	4b02      	ldr	r3, [pc, #8]	; (8009b88 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	20001698 	.word	0x20001698
 8009b8c:	0800a34c 	.word	0x0800a34c

08009b90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b96:	4b0f      	ldr	r3, [pc, #60]	; (8009bd4 <Get_SerialNum+0x44>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b9c:	4b0e      	ldr	r3, [pc, #56]	; (8009bd8 <Get_SerialNum+0x48>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ba2:	4b0e      	ldr	r3, [pc, #56]	; (8009bdc <Get_SerialNum+0x4c>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4413      	add	r3, r2
 8009bae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d009      	beq.n	8009bca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009bb6:	2208      	movs	r2, #8
 8009bb8:	4909      	ldr	r1, [pc, #36]	; (8009be0 <Get_SerialNum+0x50>)
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f000 f814 	bl	8009be8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009bc0:	2204      	movs	r2, #4
 8009bc2:	4908      	ldr	r1, [pc, #32]	; (8009be4 <Get_SerialNum+0x54>)
 8009bc4:	68b8      	ldr	r0, [r7, #8]
 8009bc6:	f000 f80f 	bl	8009be8 <IntToUnicode>
  }
}
 8009bca:	bf00      	nop
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	1fff7a10 	.word	0x1fff7a10
 8009bd8:	1fff7a14 	.word	0x1fff7a14
 8009bdc:	1fff7a18 	.word	0x1fff7a18
 8009be0:	2000012a 	.word	0x2000012a
 8009be4:	2000013a 	.word	0x2000013a

08009be8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	75fb      	strb	r3, [r7, #23]
 8009bfe:	e027      	b.n	8009c50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	0f1b      	lsrs	r3, r3, #28
 8009c04:	2b09      	cmp	r3, #9
 8009c06:	d80b      	bhi.n	8009c20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	0f1b      	lsrs	r3, r3, #28
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	4619      	mov	r1, r3
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	440b      	add	r3, r1
 8009c18:	3230      	adds	r2, #48	; 0x30
 8009c1a:	b2d2      	uxtb	r2, r2
 8009c1c:	701a      	strb	r2, [r3, #0]
 8009c1e:	e00a      	b.n	8009c36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	0f1b      	lsrs	r3, r3, #28
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	7dfb      	ldrb	r3, [r7, #23]
 8009c28:	005b      	lsls	r3, r3, #1
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	440b      	add	r3, r1
 8009c30:	3237      	adds	r2, #55	; 0x37
 8009c32:	b2d2      	uxtb	r2, r2
 8009c34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	011b      	lsls	r3, r3, #4
 8009c3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c3c:	7dfb      	ldrb	r3, [r7, #23]
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	3301      	adds	r3, #1
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	4413      	add	r3, r2
 8009c46:	2200      	movs	r2, #0
 8009c48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	75fb      	strb	r3, [r7, #23]
 8009c50:	7dfa      	ldrb	r2, [r7, #23]
 8009c52:	79fb      	ldrb	r3, [r7, #7]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d3d3      	bcc.n	8009c00 <IntToUnicode+0x18>
  }
}
 8009c58:	bf00      	nop
 8009c5a:	bf00      	nop
 8009c5c:	371c      	adds	r7, #28
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
	...

08009c68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b08a      	sub	sp, #40	; 0x28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c70:	f107 0314 	add.w	r3, r7, #20
 8009c74:	2200      	movs	r2, #0
 8009c76:	601a      	str	r2, [r3, #0]
 8009c78:	605a      	str	r2, [r3, #4]
 8009c7a:	609a      	str	r2, [r3, #8]
 8009c7c:	60da      	str	r2, [r3, #12]
 8009c7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a1d      	ldr	r2, [pc, #116]	; (8009cfc <HAL_PCD_MspInit+0x94>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d134      	bne.n	8009cf4 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	613b      	str	r3, [r7, #16]
 8009c8e:	4b1c      	ldr	r3, [pc, #112]	; (8009d00 <HAL_PCD_MspInit+0x98>)
 8009c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c92:	4a1b      	ldr	r2, [pc, #108]	; (8009d00 <HAL_PCD_MspInit+0x98>)
 8009c94:	f043 0302 	orr.w	r3, r3, #2
 8009c98:	6313      	str	r3, [r2, #48]	; 0x30
 8009c9a:	4b19      	ldr	r3, [pc, #100]	; (8009d00 <HAL_PCD_MspInit+0x98>)
 8009c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c9e:	f003 0302 	and.w	r3, r3, #2
 8009ca2:	613b      	str	r3, [r7, #16]
 8009ca4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8009ca6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cac:	2302      	movs	r3, #2
 8009cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8009cb8:	230c      	movs	r3, #12
 8009cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009cbc:	f107 0314 	add.w	r3, r7, #20
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	4810      	ldr	r0, [pc, #64]	; (8009d04 <HAL_PCD_MspInit+0x9c>)
 8009cc4:	f7f8 fd2c 	bl	8002720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009cc8:	2300      	movs	r3, #0
 8009cca:	60fb      	str	r3, [r7, #12]
 8009ccc:	4b0c      	ldr	r3, [pc, #48]	; (8009d00 <HAL_PCD_MspInit+0x98>)
 8009cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd0:	4a0b      	ldr	r2, [pc, #44]	; (8009d00 <HAL_PCD_MspInit+0x98>)
 8009cd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8009cd8:	4b09      	ldr	r3, [pc, #36]	; (8009d00 <HAL_PCD_MspInit+0x98>)
 8009cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ce0:	60fb      	str	r3, [r7, #12]
 8009ce2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	204d      	movs	r0, #77	; 0x4d
 8009cea:	f7f8 f88e 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009cee:	204d      	movs	r0, #77	; 0x4d
 8009cf0:	f7f8 f8a7 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009cf4:	bf00      	nop
 8009cf6:	3728      	adds	r7, #40	; 0x28
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	40040000 	.word	0x40040000
 8009d00:	40023800 	.word	0x40023800
 8009d04:	40020400 	.word	0x40020400

08009d08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4610      	mov	r0, r2
 8009d20:	f7fe fb83 	bl	800842a <USBD_LL_SetupStage>
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009d3e:	78fa      	ldrb	r2, [r7, #3]
 8009d40:	6879      	ldr	r1, [r7, #4]
 8009d42:	4613      	mov	r3, r2
 8009d44:	00db      	lsls	r3, r3, #3
 8009d46:	4413      	add	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	440b      	add	r3, r1
 8009d4c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	78fb      	ldrb	r3, [r7, #3]
 8009d54:	4619      	mov	r1, r3
 8009d56:	f7fe fbbd 	bl	80084d4 <USBD_LL_DataOutStage>
}
 8009d5a:	bf00      	nop
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b082      	sub	sp, #8
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009d74:	78fa      	ldrb	r2, [r7, #3]
 8009d76:	6879      	ldr	r1, [r7, #4]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	00db      	lsls	r3, r3, #3
 8009d7c:	4413      	add	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	440b      	add	r3, r1
 8009d82:	334c      	adds	r3, #76	; 0x4c
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	78fb      	ldrb	r3, [r7, #3]
 8009d88:	4619      	mov	r1, r3
 8009d8a:	f7fe fc56 	bl	800863a <USBD_LL_DataInStage>
}
 8009d8e:	bf00      	nop
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7fe fd8a 	bl	80088be <USBD_LL_SOF>
}
 8009daa:	bf00      	nop
 8009dac:	3708      	adds	r7, #8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b084      	sub	sp, #16
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d102      	bne.n	8009dcc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	73fb      	strb	r3, [r7, #15]
 8009dca:	e008      	b.n	8009dde <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d102      	bne.n	8009dda <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	73fb      	strb	r3, [r7, #15]
 8009dd8:	e001      	b.n	8009dde <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009dda:	f7f6 fc4b 	bl	8000674 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009de4:	7bfa      	ldrb	r2, [r7, #15]
 8009de6:	4611      	mov	r1, r2
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fe fd2a 	bl	8008842 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fe fcd2 	bl	800879e <USBD_LL_Reset>
}
 8009dfa:	bf00      	nop
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fe fd25 	bl	8008862 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	6812      	ldr	r2, [r2, #0]
 8009e26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e2a:	f043 0301 	orr.w	r3, r3, #1
 8009e2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a1b      	ldr	r3, [r3, #32]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d005      	beq.n	8009e44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e38:	4b04      	ldr	r3, [pc, #16]	; (8009e4c <HAL_PCD_SuspendCallback+0x48>)
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	4a03      	ldr	r2, [pc, #12]	; (8009e4c <HAL_PCD_SuspendCallback+0x48>)
 8009e3e:	f043 0306 	orr.w	r3, r3, #6
 8009e42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e44:	bf00      	nop
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	e000ed00 	.word	0xe000ed00

08009e50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe fd15 	bl	800888e <USBD_LL_Resume>
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	460b      	mov	r3, r1
 8009e76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e7e:	78fa      	ldrb	r2, [r7, #3]
 8009e80:	4611      	mov	r1, r2
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe fd6d 	bl	8008962 <USBD_LL_IsoOUTIncomplete>
}
 8009e88:	bf00      	nop
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ea2:	78fa      	ldrb	r2, [r7, #3]
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe fd29 	bl	80088fe <USBD_LL_IsoINIncomplete>
}
 8009eac:	bf00      	nop
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fe fd7f 	bl	80089c6 <USBD_LL_DevConnected>
}
 8009ec8:	bf00      	nop
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fe fd7c 	bl	80089dc <USBD_LL_DevDisconnected>
}
 8009ee4:	bf00      	nop
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d140      	bne.n	8009f7e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8009efc:	4a22      	ldr	r2, [pc, #136]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a20      	ldr	r2, [pc, #128]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009f08:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8009f0c:	4b1e      	ldr	r3, [pc, #120]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009f0e:	4a1f      	ldr	r2, [pc, #124]	; (8009f8c <USBD_LL_Init+0xa0>)
 8009f10:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8009f12:	4b1d      	ldr	r3, [pc, #116]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009f14:	2206      	movs	r2, #6
 8009f16:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8009f18:	4b1b      	ldr	r3, [pc, #108]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8009f1e:	4b1a      	ldr	r3, [pc, #104]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009f20:	2200      	movs	r2, #0
 8009f22:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8009f24:	4b18      	ldr	r3, [pc, #96]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009f26:	2202      	movs	r2, #2
 8009f28:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8009f2a:	4b17      	ldr	r3, [pc, #92]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8009f30:	4b15      	ldr	r3, [pc, #84]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8009f36:	4b14      	ldr	r3, [pc, #80]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009f3c:	4b12      	ldr	r3, [pc, #72]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009f3e:	2200      	movs	r2, #0
 8009f40:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8009f42:	4b11      	ldr	r3, [pc, #68]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009f48:	4b0f      	ldr	r3, [pc, #60]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8009f4e:	480e      	ldr	r0, [pc, #56]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009f50:	f7f9 f885 	bl	800305e <HAL_PCD_Init>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8009f5a:	f7f6 fb8b 	bl	8000674 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8009f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f62:	4809      	ldr	r0, [pc, #36]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009f64:	f7fa fadb 	bl	800451e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8009f68:	2280      	movs	r2, #128	; 0x80
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	4806      	ldr	r0, [pc, #24]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009f6e:	f7fa fa8f 	bl	8004490 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8009f72:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8009f76:	2101      	movs	r1, #1
 8009f78:	4803      	ldr	r0, [pc, #12]	; (8009f88 <USBD_LL_Init+0x9c>)
 8009f7a:	f7fa fa89 	bl	8004490 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	20001898 	.word	0x20001898
 8009f8c:	40040000 	.word	0x40040000

08009f90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7f9 f976 	bl	8003298 <HAL_PCD_Start>
 8009fac:	4603      	mov	r3, r0
 8009fae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f000 f942 	bl	800a23c <USBD_Get_USB_Status>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b084      	sub	sp, #16
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	4608      	mov	r0, r1
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	70fb      	strb	r3, [r7, #3]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	70bb      	strb	r3, [r7, #2]
 8009fdc:	4613      	mov	r3, r2
 8009fde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009fee:	78bb      	ldrb	r3, [r7, #2]
 8009ff0:	883a      	ldrh	r2, [r7, #0]
 8009ff2:	78f9      	ldrb	r1, [r7, #3]
 8009ff4:	f7f9 fe47 	bl	8003c86 <HAL_PCD_EP_Open>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 f91c 	bl	800a23c <USBD_Get_USB_Status>
 800a004:	4603      	mov	r3, r0
 800a006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a008:	7bbb      	ldrb	r3, [r7, #14]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	460b      	mov	r3, r1
 800a01c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a02c:	78fa      	ldrb	r2, [r7, #3]
 800a02e:	4611      	mov	r1, r2
 800a030:	4618      	mov	r0, r3
 800a032:	f7f9 fe90 	bl	8003d56 <HAL_PCD_EP_Close>
 800a036:	4603      	mov	r3, r0
 800a038:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 f8fd 	bl	800a23c <USBD_Get_USB_Status>
 800a042:	4603      	mov	r3, r0
 800a044:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a046:	7bbb      	ldrb	r3, [r7, #14]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	460b      	mov	r3, r1
 800a05a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a05c:	2300      	movs	r3, #0
 800a05e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a060:	2300      	movs	r3, #0
 800a062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a06a:	78fa      	ldrb	r2, [r7, #3]
 800a06c:	4611      	mov	r1, r2
 800a06e:	4618      	mov	r0, r3
 800a070:	f7f9 ff68 	bl	8003f44 <HAL_PCD_EP_SetStall>
 800a074:	4603      	mov	r3, r0
 800a076:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a078:	7bfb      	ldrb	r3, [r7, #15]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 f8de 	bl	800a23c <USBD_Get_USB_Status>
 800a080:	4603      	mov	r3, r0
 800a082:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a084:	7bbb      	ldrb	r3, [r7, #14]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	460b      	mov	r3, r1
 800a098:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0a8:	78fa      	ldrb	r2, [r7, #3]
 800a0aa:	4611      	mov	r1, r2
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7f9 ffad 	bl	800400c <HAL_PCD_EP_ClrStall>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0b6:	7bfb      	ldrb	r3, [r7, #15]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f000 f8bf 	bl	800a23c <USBD_Get_USB_Status>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a0e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	da0b      	bge.n	800a100 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a0e8:	78fb      	ldrb	r3, [r7, #3]
 800a0ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0ee:	68f9      	ldr	r1, [r7, #12]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	00db      	lsls	r3, r3, #3
 800a0f4:	4413      	add	r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	440b      	add	r3, r1
 800a0fa:	333e      	adds	r3, #62	; 0x3e
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	e00b      	b.n	800a118 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a100:	78fb      	ldrb	r3, [r7, #3]
 800a102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a106:	68f9      	ldr	r1, [r7, #12]
 800a108:	4613      	mov	r3, r2
 800a10a:	00db      	lsls	r3, r3, #3
 800a10c:	4413      	add	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	440b      	add	r3, r1
 800a112:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a116:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3714      	adds	r7, #20
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a13e:	78fa      	ldrb	r2, [r7, #3]
 800a140:	4611      	mov	r1, r2
 800a142:	4618      	mov	r0, r3
 800a144:	f7f9 fd7a 	bl	8003c3c <HAL_PCD_SetAddress>
 800a148:	4603      	mov	r3, r0
 800a14a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	4618      	mov	r0, r3
 800a150:	f000 f874 	bl	800a23c <USBD_Get_USB_Status>
 800a154:	4603      	mov	r3, r0
 800a156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a158:	7bbb      	ldrb	r3, [r7, #14]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b086      	sub	sp, #24
 800a166:	af00      	add	r7, sp, #0
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	603b      	str	r3, [r7, #0]
 800a16e:	460b      	mov	r3, r1
 800a170:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a180:	7af9      	ldrb	r1, [r7, #11]
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	f7f9 fe93 	bl	8003eb0 <HAL_PCD_EP_Transmit>
 800a18a:	4603      	mov	r3, r0
 800a18c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a18e:	7dfb      	ldrb	r3, [r7, #23]
 800a190:	4618      	mov	r0, r3
 800a192:	f000 f853 	bl	800a23c <USBD_Get_USB_Status>
 800a196:	4603      	mov	r3, r0
 800a198:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a19a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	607a      	str	r2, [r7, #4]
 800a1ae:	603b      	str	r3, [r7, #0]
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a1c2:	7af9      	ldrb	r1, [r7, #11]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	f7f9 fe0f 	bl	8003dea <HAL_PCD_EP_Receive>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1d0:	7dfb      	ldrb	r3, [r7, #23]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 f832 	bl	800a23c <USBD_Get_USB_Status>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1dc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3718      	adds	r7, #24
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b082      	sub	sp, #8
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1f8:	78fa      	ldrb	r2, [r7, #3]
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7f9 fe3f 	bl	8003e80 <HAL_PCD_EP_GetRxCount>
 800a202:	4603      	mov	r3, r0
}
 800a204:	4618      	mov	r0, r3
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a214:	4b03      	ldr	r3, [pc, #12]	; (800a224 <USBD_static_malloc+0x18>)
}
 800a216:	4618      	mov	r0, r3
 800a218:	370c      	adds	r7, #12
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	20001da4 	.word	0x20001da4

0800a228 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]

}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	4603      	mov	r3, r0
 800a244:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a24a:	79fb      	ldrb	r3, [r7, #7]
 800a24c:	2b03      	cmp	r3, #3
 800a24e:	d817      	bhi.n	800a280 <USBD_Get_USB_Status+0x44>
 800a250:	a201      	add	r2, pc, #4	; (adr r2, 800a258 <USBD_Get_USB_Status+0x1c>)
 800a252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a256:	bf00      	nop
 800a258:	0800a269 	.word	0x0800a269
 800a25c:	0800a26f 	.word	0x0800a26f
 800a260:	0800a275 	.word	0x0800a275
 800a264:	0800a27b 	.word	0x0800a27b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a268:	2300      	movs	r3, #0
 800a26a:	73fb      	strb	r3, [r7, #15]
    break;
 800a26c:	e00b      	b.n	800a286 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a26e:	2303      	movs	r3, #3
 800a270:	73fb      	strb	r3, [r7, #15]
    break;
 800a272:	e008      	b.n	800a286 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a274:	2301      	movs	r3, #1
 800a276:	73fb      	strb	r3, [r7, #15]
    break;
 800a278:	e005      	b.n	800a286 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a27a:	2303      	movs	r3, #3
 800a27c:	73fb      	strb	r3, [r7, #15]
    break;
 800a27e:	e002      	b.n	800a286 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a280:	2303      	movs	r3, #3
 800a282:	73fb      	strb	r3, [r7, #15]
    break;
 800a284:	bf00      	nop
  }
  return usb_status;
 800a286:	7bfb      	ldrb	r3, [r7, #15]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3714      	adds	r7, #20
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <__libc_init_array>:
 800a294:	b570      	push	{r4, r5, r6, lr}
 800a296:	4d0d      	ldr	r5, [pc, #52]	; (800a2cc <__libc_init_array+0x38>)
 800a298:	4c0d      	ldr	r4, [pc, #52]	; (800a2d0 <__libc_init_array+0x3c>)
 800a29a:	1b64      	subs	r4, r4, r5
 800a29c:	10a4      	asrs	r4, r4, #2
 800a29e:	2600      	movs	r6, #0
 800a2a0:	42a6      	cmp	r6, r4
 800a2a2:	d109      	bne.n	800a2b8 <__libc_init_array+0x24>
 800a2a4:	4d0b      	ldr	r5, [pc, #44]	; (800a2d4 <__libc_init_array+0x40>)
 800a2a6:	4c0c      	ldr	r4, [pc, #48]	; (800a2d8 <__libc_init_array+0x44>)
 800a2a8:	f000 f820 	bl	800a2ec <_init>
 800a2ac:	1b64      	subs	r4, r4, r5
 800a2ae:	10a4      	asrs	r4, r4, #2
 800a2b0:	2600      	movs	r6, #0
 800a2b2:	42a6      	cmp	r6, r4
 800a2b4:	d105      	bne.n	800a2c2 <__libc_init_array+0x2e>
 800a2b6:	bd70      	pop	{r4, r5, r6, pc}
 800a2b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2bc:	4798      	blx	r3
 800a2be:	3601      	adds	r6, #1
 800a2c0:	e7ee      	b.n	800a2a0 <__libc_init_array+0xc>
 800a2c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2c6:	4798      	blx	r3
 800a2c8:	3601      	adds	r6, #1
 800a2ca:	e7f2      	b.n	800a2b2 <__libc_init_array+0x1e>
 800a2cc:	0800be34 	.word	0x0800be34
 800a2d0:	0800be34 	.word	0x0800be34
 800a2d4:	0800be34 	.word	0x0800be34
 800a2d8:	0800be38 	.word	0x0800be38

0800a2dc <memset>:
 800a2dc:	4402      	add	r2, r0
 800a2de:	4603      	mov	r3, r0
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d100      	bne.n	800a2e6 <memset+0xa>
 800a2e4:	4770      	bx	lr
 800a2e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a2ea:	e7f9      	b.n	800a2e0 <memset+0x4>

0800a2ec <_init>:
 800a2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ee:	bf00      	nop
 800a2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2f2:	bc08      	pop	{r3}
 800a2f4:	469e      	mov	lr, r3
 800a2f6:	4770      	bx	lr

0800a2f8 <_fini>:
 800a2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fa:	bf00      	nop
 800a2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2fe:	bc08      	pop	{r3}
 800a300:	469e      	mov	lr, r3
 800a302:	4770      	bx	lr
